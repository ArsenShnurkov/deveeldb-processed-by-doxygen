<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Sql.Query.QueryTablePlanner Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Query.htm">Query</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#properties">Properties</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Sql.Query.QueryTablePlanner Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ComplexSinglePlan.htm">ComplexSinglePlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ConstantPlan.htm">ConstantPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExhaustiveJoinPlan.htm">ExhaustiveJoinPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExhaustiveSelectPlan.htm">ExhaustiveSelectPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExhaustiveSubQueryPlan.htm">ExhaustiveSubQueryPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SimplePatternPlan.htm">SimplePatternPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SimpleSelectPlan.htm">SimpleSelectPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SimpleSinglePlan.htm">SimpleSinglePlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SimpleSubQueryPlan.htm">SimpleSubQueryPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SingleColumnPlan.htm">SingleColumnPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1StandardJoinPlan.htm">StandardJoinPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SubLogicPlan.htm">SubLogicPlan</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae961b10f40418d18b46003927b7750ac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae961b10f40418d18b46003927b7750ac">QueryTablePlanner</a> ()</td></tr>
<tr class="separator:ae961b10f40418d18b46003927b7750ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67452853b59b78171644e5b1393f102e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a67452853b59b78171644e5b1393f102e">AddPlan</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> tablePlan)</td></tr>
<tr class="separator:a67452853b59b78171644e5b1393f102e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45f31afad4cc2b80ab05d6622a00c882"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a45f31afad4cc2b80ab05d6622a00c882">AddPlan</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> plan, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IFromTableSource.htm">IFromTableSource</a> tableSource)</td></tr>
<tr class="separator:a45f31afad4cc2b80ab05d6622a00c882"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae19161419ff562451acb8a599e065ab2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae19161419ff562451acb8a599e065ab2">JoinAt</a> (int betweenIndex, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a> joinType, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> onExpression)</td></tr>
<tr class="separator:ae19161419ff562451acb8a599e065ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95133977d8316ab97212818124414dff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a95133977d8316ab97212818124414dff">PlanSearchExpression</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> searchExpression)</td></tr>
<tr class="separator:a95133977d8316ab97212818124414dff"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="properties"></a>
Properties</h2></td></tr>
<tr class="memitem:a36aaf56048dac46524febcc821a8c6e8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a36aaf56048dac46524febcc821a8c6e8">HasJoin</a><code> [get, private set]</code></td></tr>
<tr class="separator:a36aaf56048dac46524febcc821a8c6e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2cddf4a459dea39e695efe0a17c454"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a5c2cddf4a459dea39e695efe0a17c454">SinglePlan</a><code> [get]</code></td></tr>
<tr class="separator:a5c2cddf4a459dea39e695efe0a17c454"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:af449f0657932e5007dc0d0743a5e517a"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#af449f0657932e5007dc0d0743a5e517a">IndexOfPlan</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> plan)</td></tr>
<tr class="separator:af449f0657932e5007dc0d0743a5e517a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9b87610b0417070a2d60ef216d689eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae9b87610b0417070a2d60ef216d689eb">MergePlans</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> left, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> right, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> mergePlan)</td></tr>
<tr class="separator:ae9b87610b0417070a2d60ef216d689eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26f37b283e63e95dab2d49f1a32a23b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">FindPlan</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> reference)</td></tr>
<tr class="separator:a26f37b283e63e95dab2d49f1a32a23b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04bf7bd00096c3130c391ce0048421fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a04bf7bd00096c3130c391ce0048421fb">FindCommonPlan</a> (IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> &gt; columnNames)</td></tr>
<tr class="separator:a04bf7bd00096c3130c391ce0048421fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b3c18b10ce67fe8a73eca26cc2cd2e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b3c18b10ce67fe8a73eca26cc2cd2e4">SetCachePoints</a> ()</td></tr>
<tr class="separator:a3b3c18b10ce67fe8a73eca26cc2cd2e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cc1fe9593fc21f4a87963c34b32dd72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a5cc1fe9593fc21f4a87963c34b32dd72">JoinPlansForColumns</a> (IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> &gt; columnNames)</td></tr>
<tr class="separator:a5cc1fe9593fc21f4a87963c34b32dd72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8963c1c69986655bc4733552367f1358"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8963c1c69986655bc4733552367f1358">NaturalJoinAll</a> ()</td></tr>
<tr class="separator:a8963c1c69986655bc4733552367f1358"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69663bdfcd668b3244a3432abd0efad2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">NaturallyJoinPlans</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> plan1, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> plan2)</td></tr>
<tr class="separator:a69663bdfcd668b3244a3432abd0efad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdd2fef546f25fd12851b42bc7412798"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#acdd2fef546f25fd12851b42bc7412798">JoinToSingle</a> (IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> &gt; allPlans)</td></tr>
<tr class="separator:acdd2fef546f25fd12851b42bc7412798"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c700748c2dea1ad00da606f9721241"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a78c700748c2dea1ad00da606f9721241">LogicalEvaluate</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:a78c700748c2dea1ad00da606f9721241"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905c6e2551193c3df366bc68845dc906"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Clone</a> ()</td></tr>
<tr class="separator:a905c6e2551193c3df366bc68845dc906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a553b9d88ac2f16bb082f10bda0ebf374"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a553b9d88ac2f16bb082f10bda0ebf374">PlanAllOuterJoins</a> ()</td></tr>
<tr class="separator:a553b9d88ac2f16bb082f10bda0ebf374"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f86d654d8f078f0e2d4a213d5268187"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1f86d654d8f078f0e2d4a213d5268187">PlanExpressionList</a> (IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt; expressions)</td></tr>
<tr class="separator:a1f86d654d8f078f0e2d4a213d5268187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f08c46f0aabd4b8b05f0a10c5471ced"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a0f08c46f0aabd4b8b05f0a10c5471ced">EvaluateSubLogic</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:a0f08c46f0aabd4b8b05f0a10c5471ced"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f31d69f2713b90f3ce3139b598bd27f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3f31d69f2713b90f3ce3139b598bd27f">EvaluateMultiples</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:a3f31d69f2713b90f3ce3139b598bd27f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b3b491a25e77281376b355ba9c0413"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a30b3b491a25e77281376b355ba9c0413">EvaluateSubQueries</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:a30b3b491a25e77281376b355ba9c0413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad53496dc4a3a546190176a2668ee187a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ad53496dc4a3a546190176a2668ee187a">EvaluatePatterns</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:ad53496dc4a3a546190176a2668ee187a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92f187eb05ffde8f8e3ca62b08824461"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a92f187eb05ffde8f8e3ca62b08824461">EvaluateSingles</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:a92f187eb05ffde8f8e3ca62b08824461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7c7c49bb0f5abac4c668482b31fa32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b7c7c49bb0f5abac4c668482b31fa32">EvaluateConstants</a> (List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt; list, List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt; plans)</td></tr>
<tr class="separator:a3b7c7c49bb0f5abac4c668482b31fa32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d1bd6802b4c29cdd684b8e8b6c40045"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8d1bd6802b4c29cdd684b8e8b6c40045">PlanExpression</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:a8d1bd6802b4c29cdd684b8e8b6c40045"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a6214a4ca002802fbf1f6634d97bbc420"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a6214a4ca002802fbf1f6634d97bbc420">ConcatPlans</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> left, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> right, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> plan)</td></tr>
<tr class="separator:a6214a4ca002802fbf1f6634d97bbc420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b037fd8153644af5d651c2f772fc7ec"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1b037fd8153644af5d651c2f772fc7ec">AssertBeNaturalJoin</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> plan1, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> plan2)</td></tr>
<tr class="separator:a1b037fd8153644af5d651c2f772fc7ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac948d259ab5eceb0cf6a1b4acc83de9c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ac948d259ab5eceb0cf6a1b4acc83de9c">AddSingleColumnPlan</a> (IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SingleColumnPlan.htm">SingleColumnPlan</a> &gt; list, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> uniqueName, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[] expParts, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op)</td></tr>
<tr class="separator:ac948d259ab5eceb0cf6a1b4acc83de9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a03e7a415f5c506eca332974a055b51fc"><td class="memItemLeft" align="right" valign="top">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a></td></tr>
<tr class="separator:a03e7a415f5c506eca332974a055b51fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00024">24</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae961b10f40418d18b46003927b7750ac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Sql.Query.QueryTablePlanner.QueryTablePlanner </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00027">27</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                   {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a> = <span class="keyword">new</span> List&lt;TablePlan&gt;();</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a36aaf56048dac46524febcc821a8c6e8">HasJoin</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a36aaf56048dac46524febcc821a8c6e8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a36aaf56048dac46524febcc821a8c6e8">Deveel.Data.Sql.Query.QueryTablePlanner.HasJoin</a></div><div class="ttdeci">bool HasJoin</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00032">QueryTablePlanner.cs:32</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a67452853b59b78171644e5b1393f102e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.AddPlan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>tablePlan</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00772">772</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                                                 {</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Add(tablePlan);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a36aaf56048dac46524febcc821a8c6e8">HasJoin</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a36aaf56048dac46524febcc821a8c6e8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a36aaf56048dac46524febcc821a8c6e8">Deveel.Data.Sql.Query.QueryTablePlanner.HasJoin</a></div><div class="ttdeci">bool HasJoin</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00032">QueryTablePlanner.cs:32</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a45f31afad4cc2b80ab05d6622a00c882"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.AddPlan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td>
          <td class="paramname"><em>plan</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IFromTableSource.htm">IFromTableSource</a>&#160;</td>
          <td class="paramname"><em>tableSource</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00777">777</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                                                               {</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            var columns = tableSource.ColumnNames;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            var uniqueNames = <span class="keyword">new</span>[] {tableSource.UniqueName};</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a67452853b59b78171644e5b1393f102e">AddPlan</a>(<span class="keyword">new</span> TablePlan(plan, columns, uniqueNames));</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a67452853b59b78171644e5b1393f102e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a67452853b59b78171644e5b1393f102e">Deveel.Data.Sql.Query.QueryTablePlanner.AddPlan</a></div><div class="ttdeci">void AddPlan(TablePlan tablePlan)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00772">QueryTablePlanner.cs:772</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac948d259ab5eceb0cf6a1b4acc83de9c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Deveel.Data.Sql.Query.QueryTablePlanner.AddSingleColumnPlan </td>
          <td>(</td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1SingleColumnPlan.htm">SingleColumnPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>uniqueName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[]&#160;</td>
          <td class="paramname"><em>expParts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00292">292</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                                                                                                                                                                             {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            var exp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Binary</a>(expParts[0], op, expParts[1]);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="comment">// Is this source in the list already?</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">foreach</span> (var existingPlan <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordflow">if</span> (existingPlan.TablePlan == table &amp;&amp;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    (columnName == null || existingPlan.ColumnName.Equals(columnName))) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    <span class="comment">// Append to end of current expression</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    existingPlan.SetSource(columnName, <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(existingPlan.Expression, exp));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="comment">// Didn&#39;t find so make a new entry in the list.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            list.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(<span class="keyword">new</span> SingleColumnPlan(table, columnName, uniqueName, exp));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a190b32bbe269e178bb69866170e55441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">Deveel.Data.Sql.Expressions.SqlExpression.And</a></div><div class="ttdeci">static SqlBinaryExpression And(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00393">SqlExpression.cs:393</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a63b97ab28cd81777112d58f6821e5d49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Deveel.Data.Sql.Expressions.SqlExpression.Add</a></div><div class="ttdeci">static SqlBinaryExpression Add(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00405">SqlExpression.cs:405</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ad5bd15eb16058f78c184625a44fffde8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Deveel.Data.Sql.Expressions.SqlExpression.Binary</a></div><div class="ttdeci">static SqlBinaryExpression Binary(SqlExpression left, SqlExpressionType expressionType, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00304">SqlExpression.cs:304</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1b037fd8153644af5d651c2f772fc7ec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int Deveel.Data.Sql.Query.QueryTablePlanner.AssertBeNaturalJoin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>plan1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>plan2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00142">142</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                                                 {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">if</span> (plan1.LeftPlan == plan2 || plan1.RightPlan == plan2)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">if</span> (plan1.LeftPlan != null &amp;&amp; plan2.LeftPlan != null)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="comment">// This is a left clash</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (plan1.RightPlan != null &amp;&amp; plan2.RightPlan != null)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment">// This is a right clash</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span> ((plan1.LeftPlan == null &amp;&amp; plan2.RightPlan == null) ||</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                (plan1.RightPlan == null &amp;&amp; plan2.LeftPlan == null))</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="comment">// This means a merge between the plans is fine</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="comment">// Must be a left and right clash</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a905c6e2551193c3df366bc68845dc906"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a> Deveel.Data.Sql.Query.QueryTablePlanner.Clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00309">309</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                          {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            var copy = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae961b10f40418d18b46003927b7750ac">QueryTablePlanner</a>();</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordtype">int</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Count;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                copy.tablePlans.Add(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[i].<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Clone</a>());</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="comment">// Copy the left and right links in the PlanTableSource</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                var src = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[i];</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                var mod = copy.tablePlans[i];</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="comment">// See how the left plan links to which index,</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                <span class="keywordflow">if</span> (src.LeftPlan != null) {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    <span class="keywordtype">int</span> n = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#af449f0657932e5007dc0d0743a5e517a">IndexOfPlan</a>(src.LeftPlan);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    mod.LeftJoin(copy.tablePlans[n], src.LeftJoinType, src.LeftOnExpression);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                <span class="comment">// See how the right plan links to which index,</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">if</span> (src.RightPlan != null) {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    <span class="keywordtype">int</span> n = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#af449f0657932e5007dc0d0743a5e517a">IndexOfPlan</a>(src.RightPlan);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    mod.RightJoin(copy.tablePlans[n], src.RightJoinType, src.RightOnExpression);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">return</span> copy;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_ae961b10f40418d18b46003927b7750ac"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae961b10f40418d18b46003927b7750ac">Deveel.Data.Sql.Query.QueryTablePlanner.QueryTablePlanner</a></div><div class="ttdeci">QueryTablePlanner()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00027">QueryTablePlanner.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a905c6e2551193c3df366bc68845dc906"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Deveel.Data.Sql.Query.QueryTablePlanner.Clone</a></div><div class="ttdeci">QueryTablePlanner Clone()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00309">QueryTablePlanner.cs:309</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_af449f0657932e5007dc0d0743a5e517a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#af449f0657932e5007dc0d0743a5e517a">Deveel.Data.Sql.Query.QueryTablePlanner.IndexOfPlan</a></div><div class="ttdeci">int IndexOfPlan(TablePlan plan)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00043">QueryTablePlanner.cs:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6214a4ca002802fbf1f6634d97bbc420"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.ConcatPlans </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td>
          <td class="paramname"><em>plan</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00053">53</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                                                                   {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="comment">// Merge the variable list</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            var newVarList = <span class="keyword">new</span> ObjectName[left.ColumnNames.Length + right.ColumnNames.Length];</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.Copy(left.ColumnNames, 0, newVarList, 0, left.ColumnNames.Length);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.Copy(right.ColumnNames, 0, newVarList, left.ColumnNames.Length - 1, right.ColumnNames.Length);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="comment">// Merge the unique table names list</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            var newUniqueList = <span class="keyword">new</span> <span class="keywordtype">string</span>[left.UniqueNames.Length + right.UniqueNames.Length];</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.Copy(left.UniqueNames, 0, newUniqueList, 0, left.UniqueNames.Length);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.Copy(right.UniqueNames, 0, newUniqueList, left.UniqueNames.Length - 1, right.UniqueNames.Length);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="comment">// Return the new table source plan.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> TablePlan(plan, newVarList, newUniqueList);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Deveel.Data.Types.SqlTypeCode.Array</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3b7c7c49bb0f5abac4c668482b31fa32"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateConstants </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00659">659</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                                                                             {</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="comment">// For each constant variable</span></div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            plans.AddRange(list.Select(expr =&gt; <span class="keyword">new</span> ConstantPlan(<span class="keyword">this</span>, expr)).Cast&lt;ExpressionPlan&gt;());</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3f31d69f2713b90f3ce3139b598bd27f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateMultiples </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00500">500</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                                                                                   {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="comment">// FUTURE OPTIMIZATION:</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="comment">//   This join order planner is a little primitive in design.  It orders</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="comment">//   optimizable joins first and least optimizable last, but does not</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="comment">//   take into account other factors that we could use to optimize</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="comment">//   joins in the future.</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="comment">// Get the list of variables in the left hand and right hand side</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                var lhsVar = expression.Left.AsReferenceName();</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                var rhsVar = expression.Right.AsReferenceName();</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="comment">// Work out how optimizable the join is.</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="comment">// The calculation is as follows;</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <span class="comment">// a) If both the lhs and rhs are a single variable then the</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="comment">//    optimizable value is set to 0.6f.</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="comment">// b) If only one of lhs or rhs is a single variable then the</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <span class="comment">//    optimizable value is set to 0.64f.</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// c) Otherwise it is set to 0.68f (exhaustive select guarenteed).</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="keywordflow">if</span> (lhsVar == null &amp;&amp; rhsVar == null) {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <span class="comment">// Neither lhs or rhs are single vars</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    plans.Add(<span class="keyword">new</span> ExhaustiveJoinPlan(<span class="keyword">this</span>, expression));</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lhsVar != null &amp;&amp; rhsVar != null) {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="comment">// Both lhs and rhs are a single var (most optimizable type of</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="comment">// join).</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    plans.Add(<span class="keyword">new</span> StandardJoinPlan(<span class="keyword">this</span>, expression, 0.60f));</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="comment">// Either lhs or rhs is a single var</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    plans.Add(<span class="keyword">new</span> StandardJoinPlan(<span class="keyword">this</span>, expression, 064f));</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                }</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad53496dc4a3a546190176a2668ee187a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluatePatterns </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00588">588</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                                                                                  {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                <span class="comment">// If the LHS is a single column and the RHS is a constant then</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                <span class="comment">// the conditions are right for a simple pattern search.</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                var leftColumnName = expression.Left.AsReferenceName();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <span class="keywordflow">if</span> (expression.IsConstant()) {</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                    plans.Add(<span class="keyword">new</span> ConstantPlan(<span class="keyword">this</span>, expression));</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (leftColumnName != null &amp;&amp;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                           expression.Right.IsConstant()) {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    plans.Add(<span class="keyword">new</span> SimplePatternPlan(<span class="keyword">this</span>, leftColumnName, expression));</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="comment">// Otherwise we must assume a complex pattern search which may</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    <span class="comment">// require a join.  For example, &#39;a + b LIKE &#39;a%&#39;&#39; or</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="comment">// &#39;a LIKE b&#39;.  At the very least, this will be an exhaustive</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    <span class="comment">// search and at the worst it will be a join + exhaustive search.</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    <span class="comment">// So we should evaluate these at the end of the evaluation order.</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    plans.Add(<span class="keyword">new</span> ExhaustiveSelectPlan(<span class="keyword">this</span>, expression));</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a92f187eb05ffde8f8e3ca62b08824461"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSingles </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00610">610</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                                                                                 {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <span class="comment">// The list of simple expression plans (lhs = single)</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            var simplePlanList = <span class="keyword">new</span> List&lt;SingleColumnPlan&gt;();</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="comment">// The list of complex function expression plans (lhs = expression)</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            var complexPlanList = <span class="keyword">new</span> List&lt;SingleColumnPlan&gt;();</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                <span class="comment">// The single var</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                ObjectName singleVar;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op = expression.ExpressionType;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> left = expression.Left, right = expression.Right;</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                <span class="keywordflow">if</span> (op.IsSubQuery()) {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                    singleVar = expression.Left.AsReferenceName();</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    <span class="keywordflow">if</span> (singleVar != null) {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        plans.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(<span class="keyword">new</span> SimpleSelectPlan(<span class="keyword">this</span>, singleVar, op, expression.Right));</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                        singleVar = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Left</a>.DiscoverReferences().First();</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                        plans.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(<span class="keyword">new</span> ComplexSinglePlan(<span class="keyword">this</span>, singleVar, expression));</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                    }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                    singleVar = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Left</a>.DiscoverReferences().FirstOrDefault();</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                    <span class="keywordflow">if</span> (singleVar == null) {</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                        <span class="comment">// Reverse the expressions and the operator</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                        var tempExp = left;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                        left = right;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                        right = tempExp;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                        op = op.Reverse();</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                        singleVar = left.DiscoverReferences().First();</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                    }</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    var tableSource = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">FindPlan</a>(singleVar);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="comment">// Simple LHS?</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    var v = left.AsReferenceName();</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keywordflow">if</span> (v != null) {</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ac948d259ab5eceb0cf6a1b4acc83de9c">AddSingleColumnPlan</a>(simplePlanList, tableSource, v, singleVar, <span class="keyword">new</span> []{left, right}, op);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                        <span class="comment">// No, complex lhs</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ac948d259ab5eceb0cf6a1b4acc83de9c">AddSingleColumnPlan</a>(complexPlanList, tableSource, null, singleVar, <span class="keyword">new</span> []{left, right}, op);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            }</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            plans.AddRange(simplePlanList.Select(plan =&gt; <span class="keyword">new</span> SimpleSinglePlan(<span class="keyword">this</span>, plan.UniqueName, plan.Expression)).Cast&lt;ExpressionPlan&gt;());</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            plans.AddRange(complexPlanList.Select(plan =&gt; <span class="keyword">new</span> ComplexSinglePlan(<span class="keyword">this</span>, plan.UniqueName, plan.Expression)).Cast&lt;ExpressionPlan&gt;());</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a26f37b283e63e95dab2d49f1a32a23b9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">Deveel.Data.Sql.Query.QueryTablePlanner.FindPlan</a></div><div class="ttdeci">TablePlan FindPlan(ObjectName reference)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00083">QueryTablePlanner.cs:83</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_ac948d259ab5eceb0cf6a1b4acc83de9c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ac948d259ab5eceb0cf6a1b4acc83de9c">Deveel.Data.Sql.Query.QueryTablePlanner.AddSingleColumnPlan</a></div><div class="ttdeci">static void AddSingleColumnPlan(IList&lt; SingleColumnPlan &gt; list, TablePlan table, ObjectName columnName, ObjectName uniqueName, SqlExpression[] expParts, SqlExpressionType op)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00292">QueryTablePlanner.cs:292</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a63b97ab28cd81777112d58f6821e5d49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Deveel.Data.Sql.Expressions.SqlExpression.Add</a></div><div class="ttdeci">static SqlBinaryExpression Add(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00405">SqlExpression.cs:405</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_ab6cfdbd79ee5230b7a3b7faf911067ce"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Deveel.Data.Sql.Expressions.SqlBinaryExpression.Left</a></div><div class="ttdeci">SqlExpression Left</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00045">SqlBinaryExpression.cs:45</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0f08c46f0aabd4b8b05f0a10c5471ced"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSubLogic </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00446">446</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                                                                                  {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                var orExprs = <span class="keyword">new</span>[] {expression.Left, expression.Right};</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                <span class="comment">// An optimizations here;</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                <span class="comment">// If all the expressions we are ORing together are in the same table</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <span class="comment">// then we should execute them before the joins, otherwise they</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                <span class="comment">// should go after the joins.</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="comment">// The reason for this is because if we can lesson the amount of work a</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                <span class="comment">// join has to do then we should.  The actual time it takes to perform</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                <span class="comment">// an OR search shouldn&#39;t change if it is before or after the joins.</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                TablePlan common = null;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                <span class="keywordflow">foreach</span> (var orExpr <span class="keywordflow">in</span> orExprs) {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    var vars = orExpr.DiscoverReferences().ToArray();</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    <span class="keywordtype">bool</span> breakRule = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    <span class="comment">// If there are no variables then don&#39;t bother with this expression</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                    <span class="keywordflow">if</span> (vars.Any()) {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        <span class="comment">// Find the common table source (if any)</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        var ts = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a04bf7bd00096c3130c391ce0048421fb">FindCommonPlan</a>(vars);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        <span class="keywordtype">bool</span> orAfterJoins = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                        <span class="keywordflow">if</span> (ts == null) {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            <span class="comment">// No common table, so OR after the joins</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            orAfterJoins = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (common == null) {</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                            common = ts;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (common != ts) {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                            <span class="comment">// No common table with the vars in this OR list so do this OR</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                            <span class="comment">// after the joins.</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                            orAfterJoins = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        <span class="keywordflow">if</span> (orAfterJoins) {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            plans.Add(<span class="keyword">new</span> SubLogicPlan(<span class="keyword">this</span>, expression, 0.70f));</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            <span class="comment">// Continue to the next logic expression</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                            breakRule = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                        }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    <span class="keywordflow">if</span> (!breakRule) {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                        <span class="comment">// Either we found a common table or there are no variables in the OR.</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                        <span class="comment">// Either way we should evaluate this after the join.</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                        plans.Add(<span class="keyword">new</span> SubLogicPlan(<span class="keyword">this</span>, expression, 0.58f));</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                    }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a04bf7bd00096c3130c391ce0048421fb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a04bf7bd00096c3130c391ce0048421fb">Deveel.Data.Sql.Query.QueryTablePlanner.FindCommonPlan</a></div><div class="ttdeci">TablePlan FindCommonPlan(IList&lt; ObjectName &gt; columnNames)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00096">QueryTablePlanner.cs:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a30b3b491a25e77281376b355ba9c0413"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSubQueries </td>
          <td>(</td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">List&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_1_1ExpressionPlan.htm">ExpressionPlan</a> &gt;&#160;</td>
          <td class="paramname"><em>plans</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00534">534</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                                                                                    {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                <span class="keywordtype">bool</span> exhaustive;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                var op = expression.ExpressionType;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                <span class="keywordflow">if</span> (op.IsSubQuery()) {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="comment">// Must be an exhaustive sub-command</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    exhaustive = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="comment">// Check that the left is a simple enough variable reference</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    var leftColumn = expression.Left.AsReferenceName();</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    <span class="keywordflow">if</span> (leftColumn == null) {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                        exhaustive = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        <span class="comment">// Check that the right is a sub-command plan.</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                        IQueryPlanNode rightPlan = expression.Right.AsQueryPlan();</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        <span class="keywordflow">if</span> (rightPlan == null)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                            exhaustive = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                            <span class="comment">// Finally, check if the plan is correlated or not</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                            var cv = rightPlan.DiscoverQueryReferences(1);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                            exhaustive = cv.Count != 0;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                        }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                }</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                <span class="keywordflow">if</span> (exhaustive) {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                    <span class="comment">// This expression could involve multiple variables, so we may need</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    <span class="comment">// to join.</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                    var columnNames = expression.DiscoverReferences().ToList();</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    <span class="comment">// Also find all correlated variables.</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                    <span class="keywordtype">int</span> level = 0;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    var allCorrelated = expression.DiscoverQueryReferences(ref level);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                    <span class="keywordtype">int</span> sz = allCorrelated.Count;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="comment">// If there are no variables (and no correlated variables) then this</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    <span class="comment">// must be a constant select, For example, 3 in ( select ... )</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                    <span class="keywordflow">if</span> (!columnNames.Any() &amp;&amp; sz == 0) {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                        plans.Add(<span class="keyword">new</span> ConstantPlan(<span class="keyword">this</span>, expression));</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                        columnNames.AddRange(allCorrelated.Select(cv =&gt; cv.Name));</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                        <span class="comment">// An exhaustive expression plan which might require a join or a</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                        <span class="comment">// slow correlated search.  This should be evaluated after the</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                        <span class="comment">// multiple variables are processed.</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                        plans.Add(<span class="keyword">new</span> ExhaustiveSubQueryPlan(<span class="keyword">this</span>, columnNames.ToArray(), expression));</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    }</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    plans.Add(<span class="keyword">new</span> SimpleSubQueryPlan(<span class="keyword">this</span>, expression));</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a04bf7bd00096c3130c391ce0048421fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.FindCommonPlan </td>
          <td>(</td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> &gt;&#160;</td>
          <td class="paramname"><em>columnNames</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00096">96</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                                                        {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">if</span> (columnNames.Count == 0)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            TablePlan pivotPlan = null;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">foreach</span> (var columnName <span class="keywordflow">in</span> columnNames) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                var plan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">FindPlan</a>(columnName);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">if</span> (pivotPlan == null) {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    pivotPlan = plan;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (plan != pivotPlan) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> pivotPlan;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a26f37b283e63e95dab2d49f1a32a23b9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">Deveel.Data.Sql.Query.QueryTablePlanner.FindPlan</a></div><div class="ttdeci">TablePlan FindPlan(ObjectName reference)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00083">QueryTablePlanner.cs:83</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a26f37b283e63e95dab2d49f1a32a23b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.FindPlan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>reference</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00083">83</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                         {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">// If there is only 1 plan then assume the variable is in there.</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Count == 1)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[0];</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">foreach</span> (var source <span class="keywordflow">in</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">if</span> (source.ContainsColumn(reference))</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">return</span> source;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<span class="stringliteral">&quot;Unable to find table with variable reference: &quot;</span> + reference);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af449f0657932e5007dc0d0743a5e517a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Deveel.Data.Sql.Query.QueryTablePlanner.IndexOfPlan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>plan</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00043">43</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordtype">int</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Count;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[i] == plan)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae19161419ff562451acb8a599e065ab2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.JoinAt </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>betweenIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>&#160;</td>
          <td class="paramname"><em>joinType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>onExpression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00783">783</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                                                                            {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            var planLeft = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[betweenIndex];</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            var planRight = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[betweenIndex + 1];</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            planLeft.RightJoin(planRight, joinType, onExpression);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            planRight.LeftJoin(planLeft, joinType, onExpression);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5cc1fe9593fc21f4a87963c34b32dd72"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.JoinPlansForColumns </td>
          <td>(</td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> &gt;&#160;</td>
          <td class="paramname"><em>columnNames</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00119">119</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                                                   {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// Collect all the plans that encapsulate these variables.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            var touchedPlans = <span class="keyword">new</span> List&lt;TablePlan&gt;();</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">foreach</span> (var name <span class="keywordflow">in</span> columnNames) {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                var plan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">FindPlan</a>(name);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">if</span> (!touchedPlans.Contains(plan))</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    touchedPlans.Add(plan);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#acdd2fef546f25fd12851b42bc7412798">JoinToSingle</a>(touchedPlans);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a26f37b283e63e95dab2d49f1a32a23b9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a26f37b283e63e95dab2d49f1a32a23b9">Deveel.Data.Sql.Query.QueryTablePlanner.FindPlan</a></div><div class="ttdeci">TablePlan FindPlan(ObjectName reference)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00083">QueryTablePlanner.cs:83</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_acdd2fef546f25fd12851b42bc7412798"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#acdd2fef546f25fd12851b42bc7412798">Deveel.Data.Sql.Query.QueryTablePlanner.JoinToSingle</a></div><div class="ttdeci">TablePlan JoinToSingle(IList&lt; TablePlan &gt; allPlans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00224">QueryTablePlanner.cs:224</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acdd2fef546f25fd12851b42bc7412798"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.JoinToSingle </td>
          <td>(</td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> &gt;&#160;</td>
          <td class="paramname"><em>allPlans</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00224">224</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                                  {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="comment">// If there are no plans then return null</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> (allPlans.Count == 0)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">if</span> (allPlans.Count == 1)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// Return early if there is only 1 table.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <span class="keywordflow">return</span> allPlans[0];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="comment">// Make a working copy of the plan list.</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            var workingPlanList = <span class="keyword">new</span> List&lt;TablePlan&gt;(allPlans);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="comment">// We go through each plan in turn.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">while</span> (workingPlanList.Count &gt; 1) {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                var leftPlan = workingPlanList[0];</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                var rightPlan = workingPlanList[1];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="comment">// First we need to determine if the left and right plan can be</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="comment">// naturally joined.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keywordtype">int</span> status = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1b037fd8153644af5d651c2f772fc7ec">AssertBeNaturalJoin</a>(leftPlan, rightPlan);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">if</span> (status == 0) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="comment">// Yes they can so join them</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    var newPlan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">NaturallyJoinPlans</a>(leftPlan, rightPlan);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="comment">// Remove the left and right plan from the list and add the new plan</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    workingPlanList.Remove(leftPlan);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    workingPlanList.Remove(rightPlan);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    workingPlanList.Insert(0, newPlan);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (status == 1) {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <span class="comment">// No we can&#39;t because of a right join clash, so we join the left</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="comment">// plan right in hopes of resolving the clash.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    var newPlan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">NaturallyJoinPlans</a>(leftPlan, leftPlan.RightPlan);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    workingPlanList.Remove(leftPlan);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    workingPlanList.Remove(leftPlan.RightPlan);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    workingPlanList.Insert(0, newPlan);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (status == 2) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="comment">// No we can&#39;t because of a left join clash, so we join the left</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="comment">// plan left in hopes of resolving the clash.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    var newPlan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">NaturallyJoinPlans</a>(leftPlan, leftPlan.LeftPlan);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    workingPlanList.Remove(leftPlan);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    workingPlanList.Remove(leftPlan.LeftPlan);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    workingPlanList.Insert(0, newPlan);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Natural join assessed status {0} is unknown.&quot;</span>, status));</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="comment">// Return the working plan of the merged tables.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keywordflow">return</span> workingPlanList[0];</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a69663bdfcd668b3244a3432abd0efad2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">Deveel.Data.Sql.Query.QueryTablePlanner.NaturallyJoinPlans</a></div><div class="ttdeci">TablePlan NaturallyJoinPlans(TablePlan plan1, TablePlan plan2)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00160">QueryTablePlanner.cs:160</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a1b037fd8153644af5d651c2f772fc7ec"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1b037fd8153644af5d651c2f772fc7ec">Deveel.Data.Sql.Query.QueryTablePlanner.AssertBeNaturalJoin</a></div><div class="ttdeci">static int AssertBeNaturalJoin(TablePlan plan1, TablePlan plan2)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00142">QueryTablePlanner.cs:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a78c700748c2dea1ad00da606f9721241"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryTablePlanner.LogicalEvaluate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00275">275</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                                         {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">if</span> (expression == null) {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <span class="comment">// Naturally join everything and return the plan.</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8963c1c69986655bc4733552367f1358">NaturalJoinAll</a>();</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a5c2cddf4a459dea39e695efe0a17c454">SinglePlan</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm#a7d94a401ba2f91d63ac293b4ceaacfff">Plan</a>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="comment">// Plan the expression</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8d1bd6802b4c29cdd684b8e8b6c40045">PlanExpression</a>(expression);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="comment">// Naturally join any straggling tables</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8963c1c69986655bc4733552367f1358">NaturalJoinAll</a>();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="comment">// Return the plan</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a5c2cddf4a459dea39e695efe0a17c454">SinglePlan</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm#a7d94a401ba2f91d63ac293b4ceaacfff">Plan</a>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a8963c1c69986655bc4733552367f1358"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8963c1c69986655bc4733552367f1358">Deveel.Data.Sql.Query.QueryTablePlanner.NaturalJoinAll</a></div><div class="ttdeci">TablePlan NaturalJoinAll()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00133">QueryTablePlanner.cs:133</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan_htm_a7d94a401ba2f91d63ac293b4ceaacfff"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm#a7d94a401ba2f91d63ac293b4ceaacfff">Deveel.Data.Sql.Query.TablePlan.Plan</a></div><div class="ttdeci">IQueryPlanNode Plan</div><div class="ttdoc">Returns the plan for this table source. </div><div class="ttdef"><b>Definition:</b> <a href="TablePlan_8cs_source.htm#l00041">TablePlan.cs:41</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a5c2cddf4a459dea39e695efe0a17c454"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a5c2cddf4a459dea39e695efe0a17c454">Deveel.Data.Sql.Query.QueryTablePlanner.SinglePlan</a></div><div class="ttdeci">TablePlan SinglePlan</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00034">QueryTablePlanner.cs:34</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a8d1bd6802b4c29cdd684b8e8b6c40045"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a8d1bd6802b4c29cdd684b8e8b6c40045">Deveel.Data.Sql.Query.QueryTablePlanner.PlanExpression</a></div><div class="ttdeci">void PlanExpression(SqlExpression expression)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00664">QueryTablePlanner.cs:664</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae9b87610b0417070a2d60ef216d689eb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.MergePlans </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td>
          <td class="paramname"><em>mergePlan</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00068">68</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                                                                                {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="comment">// Remove the sources from the table list.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Remove(left);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Remove(right);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="comment">// Add the concatenation of the left and right tables.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            var newPlan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a6214a4ca002802fbf1f6634d97bbc420">ConcatPlans</a>(left, right, mergePlan);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            newPlan.MergeJoin(left, right);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            newPlan.SetUpdated();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a67452853b59b78171644e5b1393f102e">AddPlan</a>(newPlan);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">return</span> newPlan;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a67452853b59b78171644e5b1393f102e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a67452853b59b78171644e5b1393f102e">Deveel.Data.Sql.Query.QueryTablePlanner.AddPlan</a></div><div class="ttdeci">void AddPlan(TablePlan tablePlan)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00772">QueryTablePlanner.cs:772</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a6214a4ca002802fbf1f6634d97bbc420"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a6214a4ca002802fbf1f6634d97bbc420">Deveel.Data.Sql.Query.QueryTablePlanner.ConcatPlans</a></div><div class="ttdeci">static TablePlan ConcatPlans(TablePlan left, TablePlan right, IQueryPlanNode plan)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00053">QueryTablePlanner.cs:53</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8963c1c69986655bc4733552367f1358"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.NaturalJoinAll </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00133">133</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                           {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordtype">int</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Count;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">if</span> (sz == 1)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>[0];</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="comment">// Produce a plan that naturally joins all tables.</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#acdd2fef546f25fd12851b42bc7412798">JoinToSingle</a>(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_acdd2fef546f25fd12851b42bc7412798"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#acdd2fef546f25fd12851b42bc7412798">Deveel.Data.Sql.Query.QueryTablePlanner.JoinToSingle</a></div><div class="ttdeci">TablePlan JoinToSingle(IList&lt; TablePlan &gt; allPlans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00224">QueryTablePlanner.cs:224</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a69663bdfcd668b3244a3432abd0efad2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.NaturallyJoinPlans </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>plan1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&#160;</td>
          <td class="paramname"><em>plan2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00160">160</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                                                               {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a> joinType;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> onExpr;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            TablePlan leftPlan, rightPlan;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="comment">// Are the plans linked by common join information?</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">if</span> (plan1.RightPlan == plan2) {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                joinType = plan1.RightJoinType;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                onExpr = plan1.RightOnExpression;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                leftPlan = plan1;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                rightPlan = plan2;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (plan1.LeftPlan == plan2) {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                joinType = plan1.LeftJoinType;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                onExpr = plan1.LeftOnExpression;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                leftPlan = plan2;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                rightPlan = plan1;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="comment">// Assertion - make sure no join clashes!</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keywordflow">if</span> ((plan1.LeftPlan != null &amp;&amp; plan2.LeftPlan != null) ||</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    (plan1.RightPlan != null &amp;&amp; plan2.RightPlan != null)) {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Plans can not be naturally join because &quot;</span> +</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                        <span class="stringliteral">&quot;the left/right join plans clash.&quot;</span>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="comment">// Else we must assume a non-dependent join (not an outer join).</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="comment">// Perform a natural join</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                IQueryPlanNode node1 = <span class="keyword">new</span> NaturalJoinNode(plan1.Plan, plan2.Plan);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae9b87610b0417070a2d60ef216d689eb">MergePlans</a>(plan1, plan2, node1);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="comment">// This means plan1 and plan2 are linked by a common join and ON</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">// expression which we evaluate now.</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordtype">bool</span> outerJoin;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">if</span> (joinType == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>.Left) {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="comment">// Mark the left plan</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                leftPlan.UpdatePlan(<span class="keyword">new</span> MarkerNode(leftPlan.Plan, <span class="stringliteral">&quot;OUTER_JOIN&quot;</span>));</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                outerJoin = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (joinType == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>.Right) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="comment">// Mark the right plan</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                rightPlan.UpdatePlan(<span class="keyword">new</span> MarkerNode(rightPlan.Plan, <span class="stringliteral">&quot;OUTER_JOIN&quot;</span>));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                outerJoin = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (joinType == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>.Inner) {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="comment">// Inner join with ON expression</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                outerJoin = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Join type ({0}) is not supported.&quot;</span>, joinType));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="comment">// Make a Planner object for joining these plans.</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var planner = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae961b10f40418d18b46003927b7750ac">QueryTablePlanner</a>();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            planner.AddPlan(leftPlan.Clone());</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            planner.AddPlan(rightPlan.Clone());</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="comment">// Evaluate the on expression</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            var node = planner.LogicalEvaluate(onExpr);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// If outer join add the left outer join node</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">if</span> (outerJoin)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                node = <span class="keyword">new</span> LeftOuterJoinNode(node, <span class="stringliteral">&quot;OUTER_JOIN&quot;</span>);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="comment">// And merge the plans in this set with the new node.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae9b87610b0417070a2d60ef216d689eb">MergePlans</a>(plan1, plan2, node);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_adb07f7a341b1eda61ff53ddf48cfec81"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">Deveel.Data.Sql.Expressions.JoinType</a></div><div class="ttdeci">JoinType</div><div class="ttdoc">Enumerates the kind of group join in a selection query. </div><div class="ttdef"><b>Definition:</b> <a href="JoinType_8cs_source.htm#l00023">JoinType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_ae9b87610b0417070a2d60ef216d689eb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae9b87610b0417070a2d60ef216d689eb">Deveel.Data.Sql.Query.QueryTablePlanner.MergePlans</a></div><div class="ttdeci">TablePlan MergePlans(TablePlan left, TablePlan right, IQueryPlanNode mergePlan)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00068">QueryTablePlanner.cs:68</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_ae961b10f40418d18b46003927b7750ac"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ae961b10f40418d18b46003927b7750ac">Deveel.Data.Sql.Query.QueryTablePlanner.QueryTablePlanner</a></div><div class="ttdeci">QueryTablePlanner()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00027">QueryTablePlanner.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a553b9d88ac2f16bb082f10bda0ebf374"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.PlanAllOuterJoins </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00338">338</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                         {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordtype">int</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>.Count;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">if</span> (sz &lt;= 1)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="comment">// Make a working copy of the plan list.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            var workingPlanList = <span class="keyword">new</span> List&lt;TablePlan&gt;(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            var plan1 = workingPlanList[0];</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                var plan2 = workingPlanList[i];</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordflow">if</span> (plan1.RightPlan == plan2) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                    plan1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">NaturallyJoinPlans</a>(plan1, plan2);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    plan1 = plan2;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a69663bdfcd668b3244a3432abd0efad2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a69663bdfcd668b3244a3432abd0efad2">Deveel.Data.Sql.Query.QueryTablePlanner.NaturallyJoinPlans</a></div><div class="ttdeci">TablePlan NaturallyJoinPlans(TablePlan plan1, TablePlan plan2)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00160">QueryTablePlanner.cs:160</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8d1bd6802b4c29cdd684b8e8b6c40045"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.PlanExpression </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00664">664</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                                              {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            <span class="keywordflow">if</span> (expression is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> &amp;&amp;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a>.IsLogical()) {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                var binary = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>) expression;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                <span class="keywordflow">if</span> (expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a> == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Or) {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    <span class="comment">// parsing an OR block</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <span class="comment">// Split left and right of logical operator.</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                    var exps = <span class="keyword">new</span>[]{binary.Left, binary.Right};</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                    <span class="comment">// If we are an &#39;or&#39; then evaluate left and right and union the</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    <span class="comment">// result.</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                    <span class="comment">// Before we branch set cache points.</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b3c18b10ce67fe8a73eca26cc2cd2e4">SetCachePoints</a>();</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                    <span class="comment">// Make copies of the left and right planner</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    var leftPlanner = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Clone</a>();</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                    var rightPlanner = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Clone</a>();</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                    <span class="comment">// Plan the left and right side of the OR</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                    leftPlanner.PlanExpression(exps[0]);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                    rightPlanner.PlanExpression(exps[1]);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                    <span class="comment">// Fix the left and right planner so that they represent the same</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    <span class="comment">// &#39;group&#39;.</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                    <span class="comment">// The current implementation naturally joins all sources if the</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    <span class="comment">// number of sources is different than the original size.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    <span class="keywordtype">int</span> leftSz = leftPlanner.tablePlans.Count;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                    <span class="keywordtype">int</span> rightSz = rightPlanner.tablePlans.Count;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                    <span class="keywordflow">if</span> (leftSz != rightSz || leftPlanner.HasJoin || rightPlanner.HasJoin) {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                        <span class="comment">// Naturally join all in the left and right plan</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                        leftPlanner.NaturalJoinAll();</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                        rightPlanner.NaturalJoinAll();</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                    }</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                    <span class="comment">// Union all table sources, but only if they have changed.</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                    var leftTableList = leftPlanner.tablePlans;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    var rightTableList = rightPlanner.tablePlans;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordtype">int</span> sz = leftTableList.Count;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                    <span class="comment">// First we must determine the plans that need to be joined in the</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="comment">// left and right plan.</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                    var leftJoinList = <span class="keyword">new</span> List&lt;TablePlan&gt;();</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                    var rightJoinList = <span class="keyword">new</span> List&lt;TablePlan&gt;();</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                        var leftPlan = leftTableList[i];</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                        var rightPlan = rightTableList[i];</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                        <span class="keywordflow">if</span> (leftPlan.IsUpdated || rightPlan.IsUpdated) {</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                            leftJoinList.Add(leftPlan);</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                            rightJoinList.Add(rightPlan);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                        }</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                    }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    <span class="comment">// Make sure the plans are joined in the left and right planners</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    leftPlanner.JoinToSingle(leftJoinList);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                    rightPlanner.JoinToSingle(rightJoinList);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                    <span class="comment">// Since the planner lists may have changed we update them here.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                    leftTableList = leftPlanner.tablePlans;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                    rightTableList = rightPlanner.tablePlans;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                    sz = leftTableList.Count;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                    var newTableList = <span class="keyword">new</span> List&lt;TablePlan&gt;(sz);</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                        var leftPlan = leftTableList[i];</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                        var rightPlan = rightTableList[i];</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                        TablePlan newPlan;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                        <span class="comment">// If left and right plan updated so we need to union them</span></div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                        <span class="keywordflow">if</span> (leftPlan.IsUpdated || rightPlan.IsUpdated) {</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                            <span class="comment">// In many causes, the left and right branches will contain</span></div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                            <span class="comment">//   identical branches that would best be optimized out.</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                            <span class="comment">// Take the left plan, add the logical union to it, and make it</span></div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                            <span class="comment">// the plan for this.</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                            var node = <span class="keyword">new</span> LogicalUnionNode(leftPlan.Plan, rightPlan.Plan);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                            <span class="comment">// Update the plan in this table list</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                            leftPlan.UpdatePlan(node);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                            newPlan = leftPlan;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                            <span class="comment">// If the left and right plan didn&#39;t update, then use the</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                            <span class="comment">// left plan (it doesn&#39;t matter if we use left or right because</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                            <span class="comment">// they are the same).</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                            newPlan = leftPlan;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                        }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                        <span class="comment">// Add the left plan to the new table list we are creating</span></div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                        newTableList.Add(newPlan);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                    }</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                    <span class="comment">// Set the new table list</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a> = newTableList;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a> == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.And) {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1f86d654d8f078f0e2d4a213d5268187">PlanExpressionList</a>(<span class="keyword">new</span>[]{binary.Left, binary.Right});</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException();</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1f86d654d8f078f0e2d4a213d5268187">PlanExpressionList</a>(<span class="keyword">new</span> []{expression});</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">Deveel.Data.Sql.Expressions.SqlBinaryExpression</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00023">SqlBinaryExpression.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a3b3c18b10ce67fe8a73eca26cc2cd2e4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b3c18b10ce67fe8a73eca26cc2cd2e4">Deveel.Data.Sql.Query.QueryTablePlanner.SetCachePoints</a></div><div class="ttdeci">void SetCachePoints()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00113">QueryTablePlanner.cs:113</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a1f86d654d8f078f0e2d4a213d5268187"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a1f86d654d8f078f0e2d4a213d5268187">Deveel.Data.Sql.Query.QueryTablePlanner.PlanExpressionList</a></div><div class="ttdeci">void PlanExpressionList(IEnumerable&lt; SqlExpression &gt; expressions)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00358">QueryTablePlanner.cs:358</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a3f022885e573e9111024b4392237d255"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">Deveel.Data.Sql.Expressions.SqlExpression.ExpressionType</a></div><div class="ttdeci">abstract SqlExpressionType ExpressionType</div><div class="ttdoc">Gets the type code of this SQL expression. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00051">SqlExpression.cs:51</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a905c6e2551193c3df366bc68845dc906"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a905c6e2551193c3df366bc68845dc906">Deveel.Data.Sql.Query.QueryTablePlanner.Clone</a></div><div class="ttdeci">QueryTablePlanner Clone()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00309">QueryTablePlanner.cs:309</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1f86d654d8f078f0e2d4a213d5268187"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.PlanExpressionList </td>
          <td>(</td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>expressions</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00358">358</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                                                {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            var subLogicExpressions = <span class="keyword">new</span> List&lt;SqlBinaryExpression&gt;();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="comment">// The list of expressions that have a sub-select in them.</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            var subQueryExpressions = <span class="keyword">new</span> List&lt;SqlBinaryExpression&gt;();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="comment">// The list of all constant expressions ( true = true )</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            var constants = <span class="keyword">new</span> List&lt;SqlExpression&gt;();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// The list of pattern matching expressions (eg. &#39;t LIKE &#39;a%&#39;)</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            var patternExpressions = <span class="keyword">new</span> List&lt;SqlBinaryExpression&gt;();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="comment">// The list of all expressions that are a single variable on one</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="comment">// side, a conditional operator, and a constant on the other side.</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            var singleVars = <span class="keyword">new</span> List&lt;SqlBinaryExpression&gt;();</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="comment">// The list of multi variable expressions (possible joins)</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            var multiVars = <span class="keyword">new</span> List&lt;SqlBinaryExpression&gt;();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> expressions) {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> exp;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                <span class="keywordflow">if</span> (!(expression is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>)) {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    <span class="comment">// If this is not a binary expression we imply</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    <span class="comment">// [expression] = &#39;true&#39;</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    exp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Equal</a>(expression, <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<span class="keyword">true</span>));</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    exp = (SqlBinaryExpression) expression;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keywordflow">if</span> (exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ae824e2a89deb2ff7f521329e8fb5934f">ExpressionType</a>.IsLogical()) {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    subLogicExpressions.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (exp.HasSubQuery()) {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    subQueryExpressions.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ae824e2a89deb2ff7f521329e8fb5934f">ExpressionType</a>.IsPattern()) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    patternExpressions.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    <span class="comment">// The list of variables in the expression.</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                    var columnNames = exp.DiscoverReferences().ToList();</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    <span class="keywordflow">if</span> (columnNames.Count == 0) {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                        <span class="comment">// These are ( 54 + 9 = 9 ), ( &quot;z&quot; &gt; &quot;a&quot; ), ( 9.01 - 2 ), etc</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                        constants.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (columnNames.Count == 1) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="comment">// These are ( id = 90 ), ( &#39;a&#39; &lt; number ), etc</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        singleVars.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (columnNames.Count &gt; 1) {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        <span class="comment">// These are ( id = part_id ),</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        <span class="comment">// ( cost_of + value_of &lt; sold_at ), ( id = part_id - 10 )</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        multiVars.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Invalid number of column names&quot;</span>);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="comment">// The order in which expression are evaluated,</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="comment">// (ExpressionPlan)</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            var evaluateOrder = <span class="keyword">new</span> List&lt;ExpressionPlan&gt;();</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="comment">// Evaluate the constants.  These should always be evaluated first</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// because they always evaluate to either true or false or null.</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b7c7c49bb0f5abac4c668482b31fa32">EvaluateConstants</a>(constants, evaluateOrder);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="comment">// Evaluate the singles.  If formed well these can be evaluated</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="comment">// using fast indices.  eg. (a &gt; 9 - 3) is more optimal than</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="comment">// (a + 3 &gt; 9).</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a92f187eb05ffde8f8e3ca62b08824461">EvaluateSingles</a>(singleVars, evaluateOrder);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="comment">// Evaluate the pattern operators.  Note that some patterns can be</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="comment">// optimized better than others, but currently we keep this near the</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="comment">// middle of our evaluation sequence.</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ad53496dc4a3a546190176a2668ee187a">EvaluatePatterns</a>(patternExpressions, evaluateOrder);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// Evaluate the sub-queries.  These are queries of the form,</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="comment">// (a IN ( SELECT ... )), (a = ( SELECT ... ) = ( SELECT ... )), etc.</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a30b3b491a25e77281376b355ba9c0413">EvaluateSubQueries</a>(subQueryExpressions, evaluateOrder);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="comment">// Evaluate multiple variable expressions.  It&#39;s possible these are</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="comment">// joins.</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3f31d69f2713b90f3ce3139b598bd27f">EvaluateMultiples</a>(multiVars, evaluateOrder);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="comment">// Lastly evaluate the sub-logic expressions.  These expressions are</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="comment">// OR type expressions.</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a0f08c46f0aabd4b8b05f0a10c5471ced">EvaluateSubLogic</a>(subLogicExpressions, evaluateOrder);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            evaluateOrder.Sort();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="comment">// And add each expression to the plan</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">foreach</span> (ExpressionPlan plan <span class="keywordflow">in</span> evaluateOrder) {</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                plan.AddToPlanTree();</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_ae824e2a89deb2ff7f521329e8fb5934f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ae824e2a89deb2ff7f521329e8fb5934f">Deveel.Data.Sql.Expressions.SqlBinaryExpression.ExpressionType</a></div><div class="ttdeci">override SqlExpressionType ExpressionType</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00053">SqlBinaryExpression.cs:53</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a3b7c7c49bb0f5abac4c668482b31fa32"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3b7c7c49bb0f5abac4c668482b31fa32">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateConstants</a></div><div class="ttdeci">void EvaluateConstants(List&lt; SqlExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00659">QueryTablePlanner.cs:659</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_ad53496dc4a3a546190176a2668ee187a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#ad53496dc4a3a546190176a2668ee187a">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluatePatterns</a></div><div class="ttdeci">void EvaluatePatterns(List&lt; SqlBinaryExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00588">QueryTablePlanner.cs:588</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a1860b79ee4114c0d70d52f42587f6550"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Deveel.Data.Sql.Expressions.SqlExpression.Equal</a></div><div class="ttdeci">static SqlBinaryExpression Equal(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00353">SqlExpression.cs:353</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a30b3b491a25e77281376b355ba9c0413"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a30b3b491a25e77281376b355ba9c0413">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSubQueries</a></div><div class="ttdeci">void EvaluateSubQueries(List&lt; SqlBinaryExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00534">QueryTablePlanner.cs:534</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">Deveel.Data.Sql.Expressions.SqlBinaryExpression</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00023">SqlBinaryExpression.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a63b97ab28cd81777112d58f6821e5d49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Deveel.Data.Sql.Expressions.SqlExpression.Add</a></div><div class="ttdeci">static SqlBinaryExpression Add(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00405">SqlExpression.cs:405</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a0f08c46f0aabd4b8b05f0a10c5471ced"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a0f08c46f0aabd4b8b05f0a10c5471ced">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSubLogic</a></div><div class="ttdeci">void EvaluateSubLogic(List&lt; SqlBinaryExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00446">QueryTablePlanner.cs:446</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a78749d3e57bb42c82189114d3c0887c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Deveel.Data.Sql.Expressions.SqlExpression.Constant</a></div><div class="ttdeci">static SqlConstantExpression Constant(object value)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00256">SqlExpression.cs:256</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a92f187eb05ffde8f8e3ca62b08824461"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a92f187eb05ffde8f8e3ca62b08824461">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateSingles</a></div><div class="ttdeci">void EvaluateSingles(List&lt; SqlBinaryExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00610">QueryTablePlanner.cs:610</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a3f31d69f2713b90f3ce3139b598bd27f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a3f31d69f2713b90f3ce3139b598bd27f">Deveel.Data.Sql.Query.QueryTablePlanner.EvaluateMultiples</a></div><div class="ttdeci">void EvaluateMultiples(List&lt; SqlBinaryExpression &gt; list, List&lt; ExpressionPlan &gt; plans)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00500">QueryTablePlanner.cs:500</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a95133977d8316ab97212818124414dff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryTablePlanner.PlanSearchExpression </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>searchExpression</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00790">790</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                                                                   {</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <span class="comment">// First perform all outer tables.</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a553b9d88ac2f16bb082f10bda0ebf374">PlanAllOuterJoins</a>();</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a78c700748c2dea1ad00da606f9721241">LogicalEvaluate</a>(searchExpression);</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a78c700748c2dea1ad00da606f9721241"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a78c700748c2dea1ad00da606f9721241">Deveel.Data.Sql.Query.QueryTablePlanner.LogicalEvaluate</a></div><div class="ttdeci">IQueryPlanNode LogicalEvaluate(SqlExpression expression)</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00275">QueryTablePlanner.cs:275</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a553b9d88ac2f16bb082f10bda0ebf374"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a553b9d88ac2f16bb082f10bda0ebf374">Deveel.Data.Sql.Query.QueryTablePlanner.PlanAllOuterJoins</a></div><div class="ttdeci">void PlanAllOuterJoins()</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00338">QueryTablePlanner.cs:338</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3b3c18b10ce67fe8a73eca26cc2cd2e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryTablePlanner.SetCachePoints </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00113">113</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                      {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">foreach</span> (var plan <span class="keywordflow">in</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">tablePlans</a>) {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                plan.SetCachePoint();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner_htm_a03e7a415f5c506eca332974a055b51fc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm#a03e7a415f5c506eca332974a055b51fc">Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</a></div><div class="ttdeci">List&lt; TablePlan &gt; tablePlans</div><div class="ttdef"><b>Definition:</b> <a href="QueryTablePlanner_8cs_source.htm#l00025">QueryTablePlanner.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a03e7a415f5c506eca332974a055b51fc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">List&lt;<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a>&gt; Deveel.Data.Sql.Query.QueryTablePlanner.tablePlans</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00025">25</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>

</div>
</div>
<h2 class="groupheader">Property Documentation</h2>
<a class="anchor" id="a36aaf56048dac46524febcc821a8c6e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Deveel.Data.Sql.Query.QueryTablePlanner.HasJoin</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00032">32</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a5c2cddf4a459dea39e695efe0a17c454"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1TablePlan.htm">TablePlan</a> Deveel.Data.Sql.Query.QueryTablePlanner.SinglePlan</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryTablePlanner_8cs_source.htm#l00034">34</a> of file <a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Sql.Query/<a class="el" href="QueryTablePlanner_8cs_source.htm">QueryTablePlanner.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
