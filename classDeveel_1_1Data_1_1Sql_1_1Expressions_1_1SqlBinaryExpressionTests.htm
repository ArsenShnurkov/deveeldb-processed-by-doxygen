<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm">Expressions</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm">SqlBinaryExpressionTests</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aaa3f4b68db21103c0f28184fef1ab835"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aaa3f4b68db21103c0f28184fef1ab835">NumericAndNumericAdd</a> ()</td></tr>
<tr class="separator:aaa3f4b68db21103c0f28184fef1ab835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3b9a6d0228b9dbfc8678f8301c54c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aec3b9a6d0228b9dbfc8678f8301c54c2">NumericAddToString</a> ()</td></tr>
<tr class="separator:aec3b9a6d0228b9dbfc8678f8301c54c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedceb4afbd480c3a47e34f10d2509e61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aedceb4afbd480c3a47e34f10d2509e61">NumericAndBooleanAdd</a> ()</td></tr>
<tr class="separator:aedceb4afbd480c3a47e34f10d2509e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a893197543605074647d148b96cd130f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a893197543605074647d148b96cd130f6">StringAndStringAdd</a> ()</td></tr>
<tr class="separator:a893197543605074647d148b96cd130f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ec039a6d9a289031e9b0564b901bdf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a29ec039a6d9a289031e9b0564b901bdf">NumericAndNumericSubtract</a> ()</td></tr>
<tr class="separator:a29ec039a6d9a289031e9b0564b901bdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95ef8a2b5c05d64edb606ac1532afdb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa95ef8a2b5c05d64edb606ac1532afdb">NumericAndBooleanSubtract</a> ()</td></tr>
<tr class="separator:aa95ef8a2b5c05d64edb606ac1532afdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1e6765a4c9dabf43916de815ddf9094"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#af1e6765a4c9dabf43916de815ddf9094">NumericMultiply</a> ()</td></tr>
<tr class="separator:af1e6765a4c9dabf43916de815ddf9094"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa771782b6e8124b0564d46238436049e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa771782b6e8124b0564d46238436049e">NumericDivide</a> ()</td></tr>
<tr class="separator:aa771782b6e8124b0564d46238436049e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f74cab8303b92def3e9305061b2ea32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7f74cab8303b92def3e9305061b2ea32">NumericModulo</a> ()</td></tr>
<tr class="separator:a7f74cab8303b92def3e9305061b2ea32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc37f42de85c3e6c4409bd8215522de6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#adc37f42de85c3e6c4409bd8215522de6">NumericEqualTo</a> (double a, double b, bool expected)</td></tr>
<tr class="separator:adc37f42de85c3e6c4409bd8215522de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9122051594fdb402f5ebcd75fdfaeee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ab9122051594fdb402f5ebcd75fdfaeee">NumericNotEqualTo</a> (double a, double b, bool expected)</td></tr>
<tr class="separator:ab9122051594fdb402f5ebcd75fdfaeee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae771b6130b41b61f27520b808a9d4f87"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ae771b6130b41b61f27520b808a9d4f87">NumericGreaterThan</a> (double a, double b, bool expected)</td></tr>
<tr class="separator:ae771b6130b41b61f27520b808a9d4f87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40f1f34a5165c692a8c6f88bcb1c1b86"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a40f1f34a5165c692a8c6f88bcb1c1b86">NumericSmallerThan</a> (double a, double b, bool expected)</td></tr>
<tr class="separator:a40f1f34a5165c692a8c6f88bcb1c1b86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16d78eb35975f8fedc2ab3cab727aad0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a16d78eb35975f8fedc2ab3cab727aad0">NumericOr</a> (long a, long b, long expected)</td></tr>
<tr class="separator:a16d78eb35975f8fedc2ab3cab727aad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a094c099a86d5eb8504d7507f4690deb8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a094c099a86d5eb8504d7507f4690deb8">BooleanOr</a> (bool a, bool b, bool expected)</td></tr>
<tr class="separator:a094c099a86d5eb8504d7507f4690deb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23efff3a22ef32386986e75cd428418e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a23efff3a22ef32386986e75cd428418e">BooleanAnd</a> (bool a, bool b, bool expected)</td></tr>
<tr class="separator:a23efff3a22ef32386986e75cd428418e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b279a5c6da86f3872becc3fa4f93a81"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7b279a5c6da86f3872becc3fa4f93a81">NumericXOr</a> (double a, double b, double expected)</td></tr>
<tr class="separator:a7b279a5c6da86f3872becc3fa4f93a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88a24c678b7be142ef0b7dc7945a4560"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a88a24c678b7be142ef0b7dc7945a4560">NumericAnd</a> (long a, long b, long expected)</td></tr>
<tr class="separator:a88a24c678b7be142ef0b7dc7945a4560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31be9a7b43a28b91c4177f3977c93ec0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a31be9a7b43a28b91c4177f3977c93ec0">NumericIsNullTrue</a> ()</td></tr>
<tr class="separator:a31be9a7b43a28b91c4177f3977c93ec0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee39a98b37c4ef9b787f5ed4fee7b8f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aee39a98b37c4ef9b787f5ed4fee7b8f2">NumericIsNullFalse</a> ()</td></tr>
<tr class="separator:aee39a98b37c4ef9b787f5ed4fee7b8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0d59caac077f9960b8c80f39babf893"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ac0d59caac077f9960b8c80f39babf893">StringLikesPattern</a> (string input, string patern, bool expected)</td></tr>
<tr class="separator:ac0d59caac077f9960b8c80f39babf893"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00025">25</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a23efff3a22ef32386986e75cd428418e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.BooleanAnd </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00343">343</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                              {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(a)));</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(b)));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            var andExp = SqlExpression.And(exp1, exp2);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = andExp.Evaluate());</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a094c099a86d5eb8504d7507f4690deb8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.BooleanOr </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00319">319</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                             {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(a)));</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(b)));</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            var orExp = SqlExpression.Or(exp1, exp2);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.Evaluate());</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aec3b9a6d0228b9dbfc8678f8301c54c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAddToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00049">49</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                         {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566, 10)));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(8991.67, 10)));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            var addExp = SqlExpression.Add(exp1, exp2);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordtype">string</span> s = null;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            Assert.DoesNotThrow(() =&gt; s = addExp.ToString());</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            Assert.IsNotNull(s);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            Assert.IsNotEmpty(s);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            Assert.AreEqual(<span class="stringliteral">&quot;4566 + 8991.670000&quot;</span>, s);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a88a24c678b7be142ef0b7dc7945a4560"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAnd </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00386">386</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                              {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            var orExp = SqlExpression.And(exp1, exp2);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.Evaluate());</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aedceb4afbd480c3a47e34f10d2509e61"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndBooleanAdd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00062">62</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                           {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566)));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">true</span>));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            var addExp = SqlExpression.Add(exp1, exp2);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.Evaluate());</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            var constExp = (SqlConstantExpression) resultExp;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4567, 2);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa95ef8a2b5c05d64edb606ac1532afdb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndBooleanSubtract </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00123">123</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(325778.32)));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Boolean(<span class="keyword">true</span>));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            var subtractExp = SqlExpression.Subtract(exp1, exp2);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = subtractExp.Evaluate());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(325777.32), (<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aaa3f4b68db21103c0f28184fef1ab835"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndNumericAdd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00027">27</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                           {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566, 10)));</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(8991.67, 10)));</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            var addExp = SqlExpression.Add(exp1, exp2);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.Evaluate());</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            var constExp = (SqlConstantExpression) resultExp;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(13557.67, 2);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a29ec039a6d9a289031e9b0564b901bdf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndNumericSubtract </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00101">101</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                                {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(879987.47, 10)));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(2577.14, 10)));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            var subtractExp = SqlExpression.Subtract(exp1, exp2);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = subtractExp.Evaluate());</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(877410.33, 2);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa771782b6e8124b0564d46238436049e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericDivide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00162">162</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(49021.022)));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(78.34)));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            var divExp = SqlExpression.Divide(exp1, exp2);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = divExp.Evaluate());</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(5);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(625.74702, 5);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adc37f42de85c3e6c4409bd8215522de6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericEqualTo </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00206">206</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                                      {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var eqExp = SqlExpression.Equal(exp1, exp2);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = eqExp.Evaluate());</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>) expected;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae771b6130b41b61f27520b808a9d4f87"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericGreaterThan </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00252">252</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                                          {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            var grExp = SqlExpression.GreaterThan(exp1, exp2);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = grExp.Evaluate());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aee39a98b37c4ef9b787f5ed4fee7b8f2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericIsNullFalse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00428">428</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                         {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(747748)));</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Null());</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            var orExp = SqlExpression.Is(exp1, exp2);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.Evaluate());</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a31be9a7b43a28b91c4177f3977c93ec0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericIsNullTrue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00407">407</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                        {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#aed053d462ea48c3ad8ff42a90d7f35e8">Null</a>));</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Null());</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            var orExp = SqlExpression.Is(exp1, exp2);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.Evaluate());</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_aed053d462ea48c3ad8ff42a90d7f35e8"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#aed053d462ea48c3ad8ff42a90d7f35e8">Deveel.Data.Sql.Objects.SqlNumber.Null</a></div><div class="ttdeci">static readonly SqlNumber Null</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00031">SqlNumber.cs:31</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7f74cab8303b92def3e9305061b2ea32"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericModulo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00183">183</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                    {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(892771.0623)));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(9012)));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            var modExp = SqlExpression.Modulo(exp1, exp2);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = modExp.Evaluate());</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(4);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(583.0623, 4);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af1e6765a4c9dabf43916de815ddf9094"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericMultiply </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00141">141</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                      {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(56894.09)));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(456)));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            var mulExp = SqlExpression.Multiply(exp1, exp2);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = mulExp.Evaluate());</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(25943705.04, 2);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab9122051594fdb402f5ebcd75fdfaeee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericNotEqualTo </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00229">229</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                                                         {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            var eqExp = SqlExpression.NotEqual(exp1, exp2);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = eqExp.Evaluate());</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a16d78eb35975f8fedc2ab3cab727aad0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericOr </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00296">296</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                             {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            var orExp = SqlExpression.Or(exp1, exp2);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.Evaluate());</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a40f1f34a5165c692a8c6f88bcb1c1b86"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericSmallerThan </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00275">275</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                                          {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Number(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            var ltExp = SqlExpression.SmallerThan(exp1, exp2);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = ltExp.Evaluate());</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7b279a5c6da86f3872becc3fa4f93a81"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericXOr </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00365">365</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                                                    {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.Double(a));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.Double(b));</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            var xorExp = SqlExpression.XOr(exp1, exp2);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = xorExp.Evaluate());</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a893197543605074647d148b96cd130f6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.StringAndStringAdd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00083">83</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                         {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;The quick brown fox &quot;</span>));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.VarChar(<span class="stringliteral">&quot;jumps over the lazy dog&quot;</span>));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            var addExp = SqlExpression.Add(exp1, exp2);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.Evaluate());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            var constExp = (SqlConstantExpression) resultExp;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlString.htm">SqlString</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(<span class="stringliteral">&quot;The quick brown fox jumps over the lazy dog&quot;</span>), (<a class="code" href="namespaceSqlString.htm">SqlString</a>) constExp.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Value</a>.Value);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="namespaceSqlString_htm"><div class="ttname"><a href="namespaceSqlString.htm">SqlString</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString_htm_a5eb2132eae8da5700709b5ed92ce6d7f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Deveel.Data.Sql.Objects.SqlString.Value</a></div><div class="ttdeci">string Value</div><div class="ttdef"><b>Definition:</b> <a href="SqlString_8cs_source.htm#l00126">SqlString.cs:126</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac0d59caac077f9960b8c80f39babf893"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.StringLikesPattern </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>patern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm#l00456">456</a> of file <a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                                                                   {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            var exp1 = SqlExpression.Constant(DataObject.String(patern));</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            var exp2 = SqlExpression.Constant(DataObject.String(input));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            var likeExp = SqlExpression.Like(exp1, exp2);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            SqlExpression resultExp = null;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = likeExp.Evaluate());</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(resultExp);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            var constExp = (SqlConstantExpression)resultExp;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-nunit/Deveel.Data.Sql.Expressions/<a class="el" href="SqlBinaryExpressionTests_8cs_source.htm">SqlBinaryExpressionTests.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
