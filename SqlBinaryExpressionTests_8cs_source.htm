<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-nunit/Deveel.Data.Sql.Expressions/SqlBinaryExpressionTests.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_161fca7059b832f09270a2e8ed498e3a.htm">deveeldb-nunit</a></li><li class="navelem"><a class="el" href="dir_8fa2ce77e8ce816dec451e8fd9849da9.htm">Deveel.Data.Sql.Expressions</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SqlBinaryExpressionTests.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SqlBinaryExpressionTests_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2014 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceDeveel.htm">Deveel</a>.<a class="code" href="namespaceDeveel_1_1Data.htm">Data</a>.<a class="code" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a>.<a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Objects.htm">Objects</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceDeveel.htm">Deveel</a>.<a class="code" href="namespaceDeveel_1_1Data.htm">Data</a>.<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm">Types</a>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceNUnit.htm">NUnit</a>.Framework;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Sql.Expressions {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    [TestFixture]</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm">   25</a></span>&#160;    <span class="keyword">public</span> sealed <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm">SqlBinaryExpressionTests</a> {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        [Test]</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aaa3f4b68db21103c0f28184fef1ab835">   27</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aaa3f4b68db21103c0f28184fef1ab835">NumericAndNumericAdd</a>() {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566, 10)));</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(8991.67, 10)));</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            var addExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp1, exp2);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) resultExp;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(13557.67, 2);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        [Test]</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aec3b9a6d0228b9dbfc8678f8301c54c2">   49</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aec3b9a6d0228b9dbfc8678f8301c54c2">NumericAddToString</a>() {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566, 10)));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(8991.67, 10)));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            var addExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp1, exp2);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordtype">string</span> s = null;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            Assert.DoesNotThrow(() =&gt; s = addExp.ToString());</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            Assert.IsNotNull(s);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            Assert.IsNotEmpty(s);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            Assert.AreEqual(<span class="stringliteral">&quot;4566 + 8991.670000&quot;</span>, s);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        [Test]</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aedceb4afbd480c3a47e34f10d2509e61">   62</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aedceb4afbd480c3a47e34f10d2509e61">NumericAndBooleanAdd</a>() {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4566)));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">true</span>));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            var addExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp1, exp2);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) resultExp;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(4567, 2);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        [Test]</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a893197543605074647d148b96cd130f6">   83</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a893197543605074647d148b96cd130f6">StringAndStringAdd</a>() {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">String</a>(<span class="stringliteral">&quot;The quick brown fox &quot;</span>));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a7c7678b1d7ecea444953e695f6c2c711">VarChar</a>(<span class="stringliteral">&quot;jumps over the lazy dog&quot;</span>));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            var addExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(exp1, exp2);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = addExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) resultExp;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlString.htm">SqlString</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(<span class="stringliteral">&quot;The quick brown fox jumps over the lazy dog&quot;</span>), (<a class="code" href="namespaceSqlString.htm">SqlString</a>) constExp.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Value</a>.Value);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        [Test]</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a29ec039a6d9a289031e9b0564b901bdf">  101</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a29ec039a6d9a289031e9b0564b901bdf">NumericAndNumericSubtract</a>() {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(879987.47, 10)));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(2577.14, 10)));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            var subtractExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#adab59015d88abfa8ff038f4113dc7d1a">Subtract</a>(exp1, exp2);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = subtractExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(877410.33, 2);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        [Test]</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa95ef8a2b5c05d64edb606ac1532afdb">  123</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa95ef8a2b5c05d64edb606ac1532afdb">NumericAndBooleanSubtract</a>() {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(325778.32)));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">true</span>));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            var subtractExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#adab59015d88abfa8ff038f4113dc7d1a">Subtract</a>(exp1, exp2);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = subtractExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(325777.32), (<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        [Test]</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#af1e6765a4c9dabf43916de815ddf9094">  141</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#af1e6765a4c9dabf43916de815ddf9094">NumericMultiply</a>() {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(56894.09)));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(456)));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            var mulExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a5e3af2aa372f1d277902bfdfe0e34df7">Multiply</a>(exp1, exp2);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = mulExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(2);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(25943705.04, 2);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        [Test]</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa771782b6e8124b0564d46238436049e">  162</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa771782b6e8124b0564d46238436049e">NumericDivide</a>() {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(49021.022)));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(78.34)));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            var divExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#aaa2a9f791ece5d0066e96235628a1354">Divide</a>(exp1, exp2);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = divExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(5);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(625.74702, 5);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        [Test]</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7f74cab8303b92def3e9305061b2ea32">  183</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7f74cab8303b92def3e9305061b2ea32">NumericModulo</a>() {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(892771.0623)));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(9012)));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            var modExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a76885d0a3b0cfec8cd57b33082ac8eea">Modulo</a>(exp1, exp2);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = modExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value).<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Round</a>(4);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(583.0623, 4);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            Assert.AreEqual(expected, actual);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        [TestCase(9862711.650091, 9862711.650091, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        [TestCase(12345, 2345, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        [TestCase(123456.789, 123456.7, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#adc37f42de85c3e6c4409bd8215522de6">  206</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#adc37f42de85c3e6c4409bd8215522de6">NumericEqualTo</a>(<span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var eqExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Equal</a>(exp1, exp2);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = eqExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>) expected;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        [TestCase(763525.22e11, 763525.22e11, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        [TestCase(12345, 123456, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        [TestCase(564255.23899, 564255.23, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ab9122051594fdb402f5ebcd75fdfaeee">  229</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ab9122051594fdb402f5ebcd75fdfaeee">NumericNotEqualTo</a>(<span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            var eqExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#abe5076af692925060fed5ce662a3c6db">NotEqual</a>(exp1, exp2);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = eqExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        [TestCase(123998, 123999, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        [TestCase(8764556.9011, 8764556.901145, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        [TestCase(244591, 24620, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ae771b6130b41b61f27520b808a9d4f87">  252</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ae771b6130b41b61f27520b808a9d4f87">NumericGreaterThan</a>(<span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            var grExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a2cbdfbb669d463101caa7c257091469e">GreaterThan</a>(exp1, exp2);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = grExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        [TestCase(988271, 988271, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        [TestCase(625.99e23, 12, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        [TestCase(19283.9991e68, 19283.9991e69, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a40f1f34a5165c692a8c6f88bcb1c1b86">  275</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a40f1f34a5165c692a8c6f88bcb1c1b86">NumericSmallerThan</a>(<span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            var ltExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a291de1647d48b1e95822b8be9ac2fc3e">SmallerThan</a>(exp1, exp2);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = ltExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            var expectedResult = (<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)expected;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        [TestCase(458849, 5526, 464375)]</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a16d78eb35975f8fedc2ab3cab727aad0">  296</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a16d78eb35975f8fedc2ab3cab727aad0">NumericOr</a>(<span class="keywordtype">long</span> a, <span class="keywordtype">long</span> b, <span class="keywordtype">long</span> expected) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            var orExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a64de8a8c5b443456bcab1b135b6044d4">Or</a>(exp1, exp2);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        [TestCase(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        [TestCase(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        [TestCase(<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a094c099a86d5eb8504d7507f4690deb8">  319</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a094c099a86d5eb8504d7507f4690deb8">BooleanOr</a>(<span class="keywordtype">bool</span> a, <span class="keywordtype">bool</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(a)));</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(b)));</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            var orExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a64de8a8c5b443456bcab1b135b6044d4">Or</a>(exp1, exp2);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        [TestCase(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        [TestCase(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        [TestCase(<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a23efff3a22ef32386986e75cd428418e">  343</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a23efff3a22ef32386986e75cd428418e">BooleanAnd</a>(<span class="keywordtype">bool</span> a, <span class="keywordtype">bool</span> b, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(a)));</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Boolean</a>(<span class="keyword">new</span> <a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>(b)));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            var andExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(exp1, exp2);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = andExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        [TestCase(567488, 90021, 653157)]</div>
<div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7b279a5c6da86f3872becc3fa4f93a81">  365</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7b279a5c6da86f3872becc3fa4f93a81">NumericXOr</a>(<span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">double</span> expected) {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a8748bf4252ac4a915cfffb982ec2c197">Double</a>(a));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a8748bf4252ac4a915cfffb982ec2c197">Double</a>(b));</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            var xorExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a961ea2d4176afbf49493ffb3e396bf29">XOr</a>(exp1, exp2);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = xorExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        [TestCase(6574493, 13324, 4108)]</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a88a24c678b7be142ef0b7dc7945a4560">  386</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a88a24c678b7be142ef0b7dc7945a4560">NumericAnd</a>(<span class="keywordtype">long</span> a, <span class="keywordtype">long</span> b, <span class="keywordtype">long</span> expected) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(a)));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(b)));</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            var orExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(exp1, exp2);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            var actual = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(expected);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        [Test]</div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a31be9a7b43a28b91c4177f3977c93ec0">  407</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a31be9a7b43a28b91c4177f3977c93ec0">NumericIsNullTrue</a>() {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#aed053d462ea48c3ad8ff42a90d7f35e8">Null</a>));</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac5fb2a3cb95aa4344150cfa377ab95b2">Null</a>());</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            var orExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#abc30f332062c081bc2c7ba6dca090407">Is</a>(exp1, exp2);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            Assert.AreEqual(expectedResult, actual);            </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        [Test]</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aee39a98b37c4ef9b787f5ed4fee7b8f2">  428</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aee39a98b37c4ef9b787f5ed4fee7b8f2">NumericIsNullFalse</a>() {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Number</a>(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(747748)));</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac5fb2a3cb95aa4344150cfa377ab95b2">Null</a>());</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            var orExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#abc30f332062c081bc2c7ba6dca090407">Is</a>(exp1, exp2);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = orExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;Anto%&quot;</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;Anto&quot;</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;%nello&quot;</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;Anto_ello&quot;</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;Anton__ello&quot;</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;%Antonello%&quot;</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello&quot;</span>, <span class="stringliteral">&quot;Antonello_&quot;</span>, <span class="keyword">false</span>)]</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        [TestCase(<span class="stringliteral">&quot;Antonello Provenzano&quot;</span>, <span class="stringliteral">&quot;Antonello%&quot;</span>, <span class="keyword">true</span>)]</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ac0d59caac077f9960b8c80f39babf893">  456</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ac0d59caac077f9960b8c80f39babf893">StringLikesPattern</a>(<span class="keywordtype">string</span> input, <span class="keywordtype">string</span> patern, <span class="keywordtype">bool</span> expected) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            var exp1 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">String</a>(patern));</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            var exp2 = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Constant</a>(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">String</a>(input));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            var likeExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ada957c57559ac166954719a6569d9805">Like</a>(exp1, exp2);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> resultExp = null;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            Assert.DoesNotThrow(() =&gt; resultExp = likeExp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>());</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            Assert.IsNotNull(resultExp);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>&gt;(resultExp);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            var constExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)resultExp;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            Assert.IsNotNull(constExp.Value.Value);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(constExp.Value.Type);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>&gt;(constExp.Value.Value);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            var actual = ((<a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>)constExp.Value.Value);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            var expectedResult = <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a>(expected);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            Assert.AreEqual(expectedResult, actual);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_adc37f42de85c3e6c4409bd8215522de6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#adc37f42de85c3e6c4409bd8215522de6">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericEqualTo</a></div><div class="ttdeci">void NumericEqualTo(double a, double b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00206">SqlBinaryExpressionTests.cs:206</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_aaa2a9f791ece5d0066e96235628a1354"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#aaa2a9f791ece5d0066e96235628a1354">Deveel.Data.Sql.Expressions.SqlExpression.Divide</a></div><div class="ttdeci">static SqlBinaryExpression Divide(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00417">SqlExpression.cs:417</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a31be9a7b43a28b91c4177f3977c93ec0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a31be9a7b43a28b91c4177f3977c93ec0">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericIsNullTrue</a></div><div class="ttdeci">void NumericIsNullTrue()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00407">SqlBinaryExpressionTests.cs:407</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a190b32bbe269e178bb69866170e55441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">Deveel.Data.Sql.Expressions.SqlExpression.And</a></div><div class="ttdeci">static SqlBinaryExpression And(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00393">SqlExpression.cs:393</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a16d78eb35975f8fedc2ab3cab727aad0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a16d78eb35975f8fedc2ab3cab727aad0">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericOr</a></div><div class="ttdeci">void NumericOr(long a, long b, long expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00296">SqlBinaryExpressionTests.cs:296</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a5e3af2aa372f1d277902bfdfe0e34df7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a5e3af2aa372f1d277902bfdfe0e34df7">Deveel.Data.Sql.Expressions.SqlExpression.Multiply</a></div><div class="ttdeci">static SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00413">SqlExpression.cs:413</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a7b279a5c6da86f3872becc3fa4f93a81"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7b279a5c6da86f3872becc3fa4f93a81">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericXOr</a></div><div class="ttdeci">void NumericXOr(double a, double b, double expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00365">SqlBinaryExpressionTests.cs:365</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_a8748bf4252ac4a915cfffb982ec2c197"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#a8748bf4252ac4a915cfffb982ec2c197">Deveel.Data.DataObject.Double</a></div><div class="ttdeci">static DataObject Double(double value)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00588">DataObject.cs:588</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ab7a0cc04985bf71a052b6e67fdc38407"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ab7a0cc04985bf71a052b6e67fdc38407">Deveel.Data.DataObject.Number</a></div><div class="ttdeci">static DataObject Number(SqlNumber value)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00552">DataObject.cs:552</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00025">SqlBinaryExpressionTests.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ac5fb2a3cb95aa4344150cfa377ab95b2"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ac5fb2a3cb95aa4344150cfa377ab95b2">Deveel.Data.DataObject.Null</a></div><div class="ttdeci">static DataObject Null(SqlType type)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00630">DataObject.cs:630</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Objects_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Objects.htm">Deveel.Data.Sql.Objects</a></div><div class="ttdef"><b>Definition:</b> <a href="IObjectRef_8cs_source.htm#l00021">IObjectRef.cs:21</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a1860b79ee4114c0d70d52f42587f6550"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Deveel.Data.Sql.Expressions.SqlExpression.Equal</a></div><div class="ttdeci">static SqlBinaryExpression Equal(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00353">SqlExpression.cs:353</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a291de1647d48b1e95822b8be9ac2fc3e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a291de1647d48b1e95822b8be9ac2fc3e">Deveel.Data.Sql.Expressions.SqlExpression.SmallerThan</a></div><div class="ttdeci">static SqlBinaryExpression SmallerThan(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00377">SqlExpression.cs:377</a></div></div>
<div class="ttc" id="namespaceNUnit_htm"><div class="ttname"><a href="namespaceNUnit.htm">NUnit</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_a4930586d99bce5807993af0cfaa8e966"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">Deveel.Data.DataObject.String</a></div><div class="ttdeci">static DataObject String(string s)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00592">DataObject.cs:592</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ac879565bbf7572459c4a2e289fe4feb1"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ac879565bbf7572459c4a2e289fe4feb1">Deveel.Data.DataObject.Boolean</a></div><div class="ttdeci">static DataObject Boolean(SqlBoolean value)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00544">DataObject.cs:544</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a094c099a86d5eb8504d7507f4690deb8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a094c099a86d5eb8504d7507f4690deb8">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.BooleanOr</a></div><div class="ttdeci">void BooleanOr(bool a, bool b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00319">SqlBinaryExpressionTests.cs:319</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a893197543605074647d148b96cd130f6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a893197543605074647d148b96cd130f6">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.StringAndStringAdd</a></div><div class="ttdeci">void StringAndStringAdd()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00083">SqlBinaryExpressionTests.cs:83</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aee39a98b37c4ef9b787f5ed4fee7b8f2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aee39a98b37c4ef9b787f5ed4fee7b8f2">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericIsNullFalse</a></div><div class="ttdeci">void NumericIsNullFalse()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00428">SqlBinaryExpressionTests.cs:428</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_ac0d59caac077f9960b8c80f39babf893"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ac0d59caac077f9960b8c80f39babf893">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.StringLikesPattern</a></div><div class="ttdeci">void StringLikesPattern(string input, string patern, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00456">SqlBinaryExpressionTests.cs:456</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_af183cbb43972165fd569f3910a46a5d3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Deveel.Data.Sql.Expressions.SqlExpression.Evaluate</a></div><div class="ttdeci">virtual SqlExpression Evaluate(EvaluateContext context)</div><div class="ttdoc">When overridden by a derived class, this method evaluates the expression within the provided context...</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00167">SqlExpression.cs:167</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a88a24c678b7be142ef0b7dc7945a4560"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a88a24c678b7be142ef0b7dc7945a4560">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAnd</a></div><div class="ttdeci">void NumericAnd(long a, long b, long expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00386">SqlBinaryExpressionTests.cs:386</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aec3b9a6d0228b9dbfc8678f8301c54c2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aec3b9a6d0228b9dbfc8678f8301c54c2">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAddToString</a></div><div class="ttdeci">void NumericAddToString()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00049">SqlBinaryExpressionTests.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a76885d0a3b0cfec8cd57b33082ac8eea"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a76885d0a3b0cfec8cd57b33082ac8eea">Deveel.Data.Sql.Expressions.SqlExpression.Modulo</a></div><div class="ttdeci">static SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00421">SqlExpression.cs:421</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a63b97ab28cd81777112d58f6821e5d49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Deveel.Data.Sql.Expressions.SqlExpression.Add</a></div><div class="ttdeci">static SqlBinaryExpression Add(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00405">SqlExpression.cs:405</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a64de8a8c5b443456bcab1b135b6044d4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a64de8a8c5b443456bcab1b135b6044d4">Deveel.Data.Sql.Expressions.SqlExpression.Or</a></div><div class="ttdeci">static SqlBinaryExpression Or(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00397">SqlExpression.cs:397</a></div></div>
<div class="ttc" id="namespaceSqlString_htm"><div class="ttname"><a href="namespaceSqlString.htm">SqlString</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_abe5076af692925060fed5ce662a3c6db"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#abe5076af692925060fed5ce662a3c6db">Deveel.Data.Sql.Expressions.SqlExpression.NotEqual</a></div><div class="ttdeci">static SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00357">SqlExpression.cs:357</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm">Deveel.Data.DataObject</a></div><div class="ttdoc">Represents a dynamic object that encapsulates a defined SqlType and a compatible constant ISqlObject ...</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00035">DataObject.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a961ea2d4176afbf49493ffb3e396bf29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a961ea2d4176afbf49493ffb3e396bf29">Deveel.Data.Sql.Expressions.SqlExpression.XOr</a></div><div class="ttdeci">static SqlBinaryExpression XOr(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00401">SqlExpression.cs:401</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_adab59015d88abfa8ff038f4113dc7d1a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#adab59015d88abfa8ff038f4113dc7d1a">Deveel.Data.Sql.Expressions.SqlExpression.Subtract</a></div><div class="ttdeci">static SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00409">SqlExpression.cs:409</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_ae771b6130b41b61f27520b808a9d4f87"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ae771b6130b41b61f27520b808a9d4f87">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericGreaterThan</a></div><div class="ttdeci">void NumericGreaterThan(double a, double b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00252">SqlBinaryExpressionTests.cs:252</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString_htm_a5eb2132eae8da5700709b5ed92ce6d7f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Deveel.Data.Sql.Objects.SqlString.Value</a></div><div class="ttdeci">string Value</div><div class="ttdef"><b>Definition:</b> <a href="SqlString_8cs_source.htm#l00126">SqlString.cs:126</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ada957c57559ac166954719a6569d9805"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ada957c57559ac166954719a6569d9805">Deveel.Data.Sql.Expressions.SqlExpression.Like</a></div><div class="ttdeci">static SqlBinaryExpression Like(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00385">SqlExpression.cs:385</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a7f74cab8303b92def3e9305061b2ea32"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a7f74cab8303b92def3e9305061b2ea32">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericModulo</a></div><div class="ttdeci">void NumericModulo()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00183">SqlBinaryExpressionTests.cs:183</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_aed053d462ea48c3ad8ff42a90d7f35e8"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#aed053d462ea48c3ad8ff42a90d7f35e8">Deveel.Data.Sql.Objects.SqlNumber.Null</a></div><div class="ttdeci">static readonly SqlNumber Null</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00031">SqlNumber.cs:31</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aa771782b6e8124b0564d46238436049e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa771782b6e8124b0564d46238436049e">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericDivide</a></div><div class="ttdeci">void NumericDivide()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00162">SqlBinaryExpressionTests.cs:162</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">Deveel.Data.Sql.Expressions.SqlConstantExpression</a></div><div class="ttdoc">An expression that holds a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpression_8cs_source.htm#l00033">SqlConstantExpression.cs:33</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_a7c7678b1d7ecea444953e695f6c2c711"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#a7c7678b1d7ecea444953e695f6c2c711">Deveel.Data.DataObject.VarChar</a></div><div class="ttdeci">static DataObject VarChar(string s)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00622">DataObject.cs:622</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aedceb4afbd480c3a47e34f10d2509e61"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aedceb4afbd480c3a47e34f10d2509e61">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndBooleanAdd</a></div><div class="ttdeci">void NumericAndBooleanAdd()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00062">SqlBinaryExpressionTests.cs:62</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm">Deveel.Data.Types</a></div><div class="ttdef"><b>Definition:</b> <a href="ArrayType_8cs_source.htm#l00021">ArrayType.cs:21</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data.htm">Deveel.Data</a></div><div class="ttdef"><b>Definition:</b> <a href="ActiveSessionList_8cs_source.htm#l00022">ActiveSessionList.cs:22</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a5611a45679d0938ba19c3f26d7385e67"><div class="ttname"><a href="DataObject_8cs.htm#a5611a45679d0938ba19c3f26d7385e67">SqlBoolean</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlBoolean SqlBoolean</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00026">DataObject.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a23efff3a22ef32386986e75cd428418e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a23efff3a22ef32386986e75cd428418e">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.BooleanAnd</a></div><div class="ttdeci">void BooleanAnd(bool a, bool b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00343">SqlBinaryExpressionTests.cs:343</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a78749d3e57bb42c82189114d3c0887c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a78749d3e57bb42c82189114d3c0887c8">Deveel.Data.Sql.Expressions.SqlExpression.Constant</a></div><div class="ttdeci">static SqlConstantExpression Constant(object value)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00256">SqlExpression.cs:256</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_ab9122051594fdb402f5ebcd75fdfaeee"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#ab9122051594fdb402f5ebcd75fdfaeee">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericNotEqualTo</a></div><div class="ttdeci">void NumericNotEqualTo(double a, double b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00229">SqlBinaryExpressionTests.cs:229</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql.htm">Deveel.Data.Sql</a></div><div class="ttdef"><b>Definition:</b> <a href="CellId_8cs_source.htm#l00022">CellId.cs:22</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a29ec039a6d9a289031e9b0564b901bdf"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a29ec039a6d9a289031e9b0564b901bdf">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndNumericSubtract</a></div><div class="ttdeci">void NumericAndNumericSubtract()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00101">SqlBinaryExpressionTests.cs:101</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_af1e6765a4c9dabf43916de815ddf9094"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#af1e6765a4c9dabf43916de815ddf9094">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericMultiply</a></div><div class="ttdeci">void NumericMultiply()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00141">SqlBinaryExpressionTests.cs:141</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a59e8e0f5359db085faf35be702c4fad4"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a59e8e0f5359db085faf35be702c4fad4">Deveel.Data.Sql.Objects.SqlNumber.Round</a></div><div class="ttdeci">SqlNumber Round()</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00691">SqlNumber.cs:691</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aa95ef8a2b5c05d64edb606ac1532afdb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aa95ef8a2b5c05d64edb606ac1532afdb">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndBooleanSubtract</a></div><div class="ttdeci">void NumericAndBooleanSubtract()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00123">SqlBinaryExpressionTests.cs:123</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a2cbdfbb669d463101caa7c257091469e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a2cbdfbb669d463101caa7c257091469e">Deveel.Data.Sql.Expressions.SqlExpression.GreaterThan</a></div><div class="ttdeci">static SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00381">SqlExpression.cs:381</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_aaa3f4b68db21103c0f28184fef1ab835"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#aaa3f4b68db21103c0f28184fef1ab835">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericAndNumericAdd</a></div><div class="ttdeci">void NumericAndNumericAdd()</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00027">SqlBinaryExpressionTests.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_abc30f332062c081bc2c7ba6dca090407"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#abc30f332062c081bc2c7ba6dca090407">Deveel.Data.Sql.Expressions.SqlExpression.Is</a></div><div class="ttdeci">static SqlBinaryExpression Is(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00361">SqlExpression.cs:361</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests_htm_a40f1f34a5165c692a8c6f88bcb1c1b86"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpressionTests.htm#a40f1f34a5165c692a8c6f88bcb1c1b86">Deveel.Data.Sql.Expressions.SqlBinaryExpressionTests.NumericSmallerThan</a></div><div class="ttdeci">void NumericSmallerThan(double a, double b, bool expected)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionTests_8cs_source.htm#l00275">SqlBinaryExpressionTests.cs:275</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
