<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Store/StoreBase.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_0766e9ed020ad325b7865972be4cac40.htm">Deveel.Data.Store</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">StoreBase.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="StoreBase_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections.Generic;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.IO;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Text;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceDeveel.htm">Deveel</a>.<a class="code" href="namespaceDeveel_1_1Data.htm">Data</a>.<a class="code" href="namespaceDeveel_1_1Data_1_1Util.htm">Util</a>;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Store {</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">   25</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a> : <a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm">IStore</a> {</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">   26</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span>[] <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">   27</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">totalAllocatedSpace</a>;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">   29</a></span>&#160;        <span class="keyword">private</span> readonly byte[] binArea = <span class="keyword">new</span> byte[128 * 8];</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">   31</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> readonly <span class="keywordtype">int</span>[] BinSizes =</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480,</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                1344, 1376, 1408, 1440, 1472, 1504, 1536, 1568, 1600, 1632, 1664, 1696,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                1728, 1760, 1792, 1824, 1856, 1888, 1920, 1952, 1984, 2016, 2048, 2080,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                2144, 2208, 2272, 2336, 2400, 2464, 2528, 2592, 2656, 2720, 2784, 2848,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                2912, 2976, 3040, 3104, 3168, 3232, 3296, 3360, 3424, 3488, 3552, 3616,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                3680, 3744, 3808, 3872, 3936, 4000, 4064, 4128, 4384, 4640, 4896, 5152,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                5408, 5664, 5920, 6176, 6432, 6688, 6944, 7200, 7456, 7712, 7968, 8224,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                10272, 12320, 14368, 16416, 18464, 20512, 22560, 24608, 57376, 90144,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                122912, 155680, 1204256, 2252832</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            };</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">   46</a></span>&#160;        <span class="keyword">private</span> readonly <span class="keyword">static</span> <span class="keywordtype">int</span> BinSizeEntries = BinSizes.Length;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0cfcf79aae1989da82d41104fbe878d1">   47</a></span>&#160;        <span class="keyword">private</span> readonly <span class="keyword">static</span> <span class="keywordtype">int</span> MaxBinSize = BinSizes[BinSizeEntries - 1];</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">   49</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">long</span> ActiveFlag = Int64.MaxValue;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">   50</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">long</span> DeletedFlag = Int64.MinValue;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6862bc09a9dbabd7569e29c37342c3e2">   52</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">long</span> FixedAreaOffset = 128;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// The offset into the file that the data areas start.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">   55</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">long</span> DataAreaOffset = 256 + 1024 + 32;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">   57</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">long</span> BinAreaOffset = 256;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">   59</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> Magic = 0x0AEAE91;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab0de0d59ca4f102abb09cbb5cf809bdb">   61</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab0de0d59ca4f102abb09cbb5cf809bdb">StoreBase</a>(<span class="keywordtype">bool</span> isReadOnly) {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            freeBinList = <span class="keyword">new</span> <span class="keywordtype">long</span>[BinSizeEntries + 1];</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; BinSizeEntries + 1; ++i) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                freeBinList[i] = -1L;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            WildernessOffset = -1;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            IsReadOnly = isReadOnly;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf2ef79394e0249328fa813fc60b5854">   72</a></span>&#160;        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf2ef79394e0249328fa813fc60b5854">~StoreBase</a>() {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            Dispose(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">   76</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> WildernessOffset { <span class="keyword">get</span>; set; }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">   78</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> IsReadOnly { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">   80</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">long</span> DataAreaEndOffset { <span class="keyword">get</span>; }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">   82</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">CheckOffset</a>(<span class="keywordtype">long</span> offset) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span> (offset &lt; DataAreaOffset || offset &gt;= DataAreaEndOffset) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(String.Format(<span class="stringliteral">&quot;The offset is out of range ({0} &gt; {1} &gt; {2})&quot;</span>, DataAreaOffset, offset,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    DataAreaEndOffset));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">   89</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">MinimumBinSizeIndex</a>(<span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordtype">int</span> i = Array.BinarySearch(BinSizes, (<span class="keywordtype">int</span>)size);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">   97</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">ReadBins</a>() {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            Read(BinAreaOffset, binArea, 0, 128 * 8);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">using</span> (var bin = <span class="keyword">new</span> MemoryStream(binArea)) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keyword">using</span> (BinaryReader input = <span class="keyword">new</span> BinaryReader(bin)) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 128; ++i) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        freeBinList[i] = input.ReadInt64();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa9f8ad70cd7a824f84d6e0aa7271dd29">  108</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa9f8ad70cd7a824f84d6e0aa7271dd29">WriteAllBins</a>() {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">int</span> p = 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 128; ++i, p += 8) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordtype">long</span> val = freeBinList[i];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(val, binArea, p);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            Write(BinAreaOffset, binArea, 0, 128 * 8);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">  118</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a>(<span class="keywordtype">int</span> index) {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordtype">int</span> p = index * 8;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">long</span> val = freeBinList[index];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(val, binArea, p);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            Write(BinAreaOffset + p, binArea, p, 8);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">  125</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">AddToBinChain</a>(<span class="keywordtype">long</span> pointer, <span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            CheckOffset(pointer);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// What bin would this area fit into?</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">int</span> binChainIndex = MinimumBinSizeIndex(size);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordtype">long</span> curOffset = freeBinList[binChainIndex];</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">if</span> (curOffset == -1) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="comment">// If the bin chain has no elements,</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                headerInfo[0] = (size | DeletedFlag);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                headerInfo[1] = -1;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                ReboundArea(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                freeBinList[binChainIndex] = pointer;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                WriteBinIndex(binChainIndex);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordtype">bool</span> inserted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordtype">long</span> lastOffset = -1;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordtype">int</span> searches = 0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">while</span> (curOffset != -1 &amp;&amp; inserted == <span class="keyword">false</span>) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="comment">// Get the current offset</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    ReadAreaHeader(curOffset, headerInfo);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keywordtype">long</span> header = headerInfo[0];</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keywordtype">long</span> next = headerInfo[1];</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="comment">// Assert - the header must have deleted flag</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="keywordflow">if</span> ((header &amp; DeletedFlag) == 0)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area not marked as deleted.&quot;</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="keywordtype">long</span> areaSize = header ^ DeletedFlag;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keywordflow">if</span> (areaSize &gt;= size || searches &gt;= 12) {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <span class="comment">// Insert if the area size is &gt;= than the size we are adding.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        <span class="comment">// Set the previous header to point to this</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        <span class="keywordtype">long</span> previous = lastOffset;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <span class="comment">// Set up the deleted area</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        headerInfo[0] = (size | DeletedFlag);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        headerInfo[1] = curOffset;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        ReboundArea(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        <span class="keywordflow">if</span> (lastOffset != -1) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            <span class="comment">// Set the previous input the chain to point to the deleted area</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                            ReadAreaHeader(previous, headerInfo);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                            headerInfo[1] = pointer;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                            ReboundArea(previous, headerInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            <span class="comment">// Otherwise set the head bin item</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                            freeBinList[binChainIndex] = pointer;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            WriteBinIndex(binChainIndex);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        inserted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    lastOffset = curOffset;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    curOffset = next;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    ++searches;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="comment">// If we reach the end and we haven&#39;t inserted,</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">if</span> (!inserted) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="comment">// Set the new deleted area.</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    headerInfo[0] = (size | DeletedFlag);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    headerInfo[1] = -1;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    ReboundArea(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="comment">// Set the previous entry to this</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    ReadAreaHeader(lastOffset, headerInfo);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    headerInfo[1] = pointer;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    ReboundArea(lastOffset, headerInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">  205</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">RemoveFromBinChain</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="comment">// What bin index should we be looking input?</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordtype">int</span> binChainIndex = MinimumBinSizeIndex(size);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var prevOffset = -1L;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            var curOffset = freeBinList[binChainIndex];</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="comment">// Search this bin for the offset</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="comment">// NOTE: This is an iterative search through the bin chain</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">while</span> (offset != curOffset) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">if</span> (curOffset == -1)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area not found input bin chain.&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="comment">// Move to the next input the chain</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                ReadAreaHeader(curOffset, headerInfo);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                prevOffset = curOffset;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                curOffset = headerInfo[1];</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="comment">// Found the offset, so remove it,</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">if</span> (prevOffset == -1) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                ReadAreaHeader(offset, headerInfo);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                freeBinList[binChainIndex] = headerInfo[1];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                WriteBinIndex(binChainIndex);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                ReadAreaHeader(prevOffset, headerInfo2);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                ReadAreaHeader(offset, headerInfo);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                headerInfo2[1] = headerInfo[1];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                ReboundArea(prevOffset, headerInfo2, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">  245</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">Free</a>(<span class="keywordtype">long</span> pointer) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="comment">// Get the area header</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            ReadAreaHeader(pointer, headerInfo);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">if</span> ((headerInfo[0] &amp; DeletedFlag) != 0)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area already marked as unallocated.&quot;</span>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="comment">// If (pointer + size) reaches the end of the header area, set this as the</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">// wilderness.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordtype">bool</span> setAsWilderness = ((pointer + headerInfo[0]) &gt;= DataAreaEndOffset);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            var rOffset = pointer;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            var freeingAreaSize = headerInfo[0];</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            var rSize = freeingAreaSize;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="comment">// Can this area coalesce?</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            var leftPointer = GetPreviousAreaHeader(pointer, headerInfo2);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            var coalesc = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">if</span> ((headerInfo2[0] &amp; DeletedFlag) != 0) {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="comment">// Yes, we can coalesce left</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordtype">long</span> areaSize = (headerInfo2[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                rOffset = leftPointer;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                rSize = rSize + areaSize;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="comment">// Remove left area from the bin</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                RemoveFromBinChain(leftPointer, areaSize);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                coalesc = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">if</span> (!setAsWilderness) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordtype">long</span> rightPointer = GetNextAreaHeader(pointer, headerInfo2);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                <span class="keywordflow">if</span> ((headerInfo2[0] &amp; DeletedFlag) != 0) {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="comment">// Yes, we can coalesce right</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    <span class="keywordtype">long</span> areaSize = (headerInfo2[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    rSize = rSize + areaSize;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <span class="comment">// Remove right from the bin</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    RemoveFromBinChain(rightPointer, areaSize);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    setAsWilderness = (rightPointer == WildernessOffset);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    coalesc = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="comment">// If we are coalescing parent areas</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span> (coalesc)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                CoalesceArea(rOffset, rSize);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">// Add this new area to the bin chain,</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            AddToBinChain(rOffset, rSize);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="comment">// Do we set this as the wilderness?</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (setAsWilderness)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                WildernessOffset = rOffset;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            totalAllocatedSpace -= freeingAreaSize;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">  308</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">GetPreviousAreaHeader</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span>[] header) {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="comment">// If the offset is the start of the file area</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">if</span> (offset == DataAreaOffset) {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <span class="comment">// Return a 0 sized block</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                header[0] = 0;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            Read(offset - 8, headerBuf, 0, 8);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordtype">long</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            sz = sz &amp; ActiveFlag;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordtype">long</span> previousPointer = offset - sz;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            Read(previousPointer, headerBuf, 0, 8);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">return</span> previousPointer;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">  325</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">GetNextAreaHeader</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span>[] header) {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            Read(offset, headerBuf, 0, 8);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordtype">long</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            sz = sz &amp; ActiveFlag;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordtype">long</span> nextOffset = offset + sz;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">if</span> (nextOffset &gt;= DataAreaEndOffset) {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="comment">// Return a 0 sized block</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                header[0] = 0;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            Read(nextOffset, headerBuf, 0, 8);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">return</span> nextOffset;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">  342</a></span>&#160;        <span class="keyword">protected</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span>[] header) {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            Read(offset, headerBuf, 0, 16);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            header[1] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 8);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">  348</a></span>&#160;        <span class="keyword">private</span> readonly byte[] headerBuf = <span class="keyword">new</span> byte[16];</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">  350</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span>[] header, <span class="keywordtype">bool</span> writeHeaders) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span> (writeHeaders) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[0], headerBuf, 0);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[1], headerBuf, 8);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                Write(offset, headerBuf, 0, 16);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[1], headerBuf, 8);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                Write(offset + 8, headerBuf, 8, 8);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">  361</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">CoalesceArea</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(size, headerBuf, 0);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// ISSUE: Boundary alteration is a moment when corruption could occur.</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="comment">//   There are two seeks and writes here and when we are setting the</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="comment">//   end points, there is a risk of failure.</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            Write(offset, headerBuf, 0, 8);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            Write((offset + size) - 8, headerBuf, 0, 8);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">  372</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">CropArea</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span> allocatedSize) {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="comment">// Get the header info</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            ReadAreaHeader(offset, headerInfo);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            var header = headerInfo[0];</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            var freeAreaSize = header;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            var sizeDifference = freeAreaSize - allocatedSize;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            var isWilderness = (offset == WildernessOffset);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="comment">// If the difference is greater than 512 bytes, add the excess space to</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="comment">// a free bin.</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">if</span> ((isWilderness &amp;&amp; sizeDifference &gt;= 32) || sizeDifference &gt;= 512) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="comment">// Split the area into two areas.</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                SplitArea(offset, allocatedSize);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordtype">long</span> leftOverPointer = offset + allocatedSize;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="comment">// Add this area to the bin chain</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                AddToBinChain(leftOverPointer, sizeDifference);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="comment">// If offset is the wilderness area, set this as the new wilderness</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                <span class="keywordflow">if</span> (isWilderness ||</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    (leftOverPointer + sizeDifference) &gt;= DataAreaEndOffset) {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    WildernessOffset = leftOverPointer;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="comment">// If offset is the wilderness area, set wilderness to -1</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="keywordflow">if</span> (isWilderness) {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    WildernessOffset = -1;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">  408</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">Alloc</a>(<span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="keywordflow">if</span> (size &lt; 0)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Negative size allocation&quot;</span>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="comment">// Add 16 bytes for headers</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            size = size + 16;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="comment">// If size &lt; 32, make size = 32</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="keywordflow">if</span> (size &lt; 32)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                size = 32;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <span class="comment">// Round all sizes up to the nearest 8</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="keywordtype">long</span> d = size &amp; 0x07L;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">if</span> (d != 0)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                size = size + (8 - d);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordtype">long</span> realAllocSize = size;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// Search the free bin list for the first bin that matches the given size.</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordtype">int</span> binChainIndex;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">if</span> (size &gt; MaxBinSize) {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                binChainIndex = BinSizeEntries;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                <span class="keywordtype">int</span> i = MinimumBinSizeIndex(size);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                binChainIndex = i;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="comment">// Search the bins until we find the first area that is the nearest fit to</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">// the size requested.</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordtype">int</span> foundBinIndex = -1;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <span class="keywordtype">long</span> prevOffset = -1;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = binChainIndex;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                i &lt; BinSizeEntries + 1 &amp;&amp; foundBinIndex == -1;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                ++i) {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordtype">long</span> curOffset = freeBinList[i];</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">if</span> (curOffset != -1) {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    <span class="keywordflow">if</span> (!first) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <span class="comment">// Pick this..</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        foundBinIndex = i;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        prevOffset = -1;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        <span class="comment">// Search this bin for the first that&#39;s big enough.</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="comment">// We only search the first 12 entries input the bin before giving up.</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        <span class="keywordtype">long</span> lastOffset = -1;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        <span class="keywordtype">int</span> searches = 0;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        <span class="keywordflow">while</span> (curOffset != -1 &amp;&amp;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                               foundBinIndex == -1 &amp;&amp;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                               searches &lt; 12) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                            ReadAreaHeader(curOffset, headerInfo);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            <span class="keywordtype">long</span> areaSize = (headerInfo[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            <span class="comment">// Is this area is greater or equal than the required size</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                            <span class="comment">// and is not the wilderness area, pick it.</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                            <span class="keywordflow">if</span> (curOffset != WildernessOffset &amp;&amp; areaSize &gt;= size) {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                foundBinIndex = i;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                prevOffset = lastOffset;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                            }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                            <span class="comment">// Go to next input chain.</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            lastOffset = curOffset;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            curOffset = headerInfo[1];</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            ++searches;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                first = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <span class="comment">// If no area can be recycled,</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">if</span> (foundBinIndex == -1) {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                <span class="comment">// Allocate a new area of the given size.</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="comment">// If there is a wilderness, grow the wilderness area to the new size,</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                <span class="keywordtype">long</span> workingOffset;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                <span class="keywordtype">long</span> sizeToGrow;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                <span class="keywordtype">long</span> currentAreaSize;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                <span class="keywordflow">if</span> (WildernessOffset != -1) {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    workingOffset = WildernessOffset;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    ReadAreaHeader(WildernessOffset, headerInfo);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    <span class="keywordtype">long</span> wildernessSize = (headerInfo[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    <span class="comment">// Remove this from the bins</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                    RemoveFromBinChain(workingOffset, wildernessSize);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                    <span class="comment">// For safety, we set wilderness_pointer to -1</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    WildernessOffset = -1;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                    sizeToGrow = size - wildernessSize;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    currentAreaSize = wildernessSize;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                    <span class="comment">// wilderness_pointer == -1 so add to the end of the data area.</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    workingOffset = DataAreaEndOffset;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    sizeToGrow = size;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    currentAreaSize = 0;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordtype">long</span> expandedSize = 0;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keywordflow">if</span> (sizeToGrow &gt; 0) {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    <span class="comment">// Expand the data area to the new size.</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                    expandedSize = ExpandDataArea(sizeToGrow);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// Coalesce the new area to the given size</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                CoalesceArea(workingOffset, currentAreaSize + expandedSize);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="comment">// crop the area</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                CropArea(workingOffset, size);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="comment">// Add to the total allocated space</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                totalAllocatedSpace += realAllocSize;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">return</span> workingOffset;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <span class="comment">// An area is taken from the bins,</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                <span class="keywordtype">long</span> freeAreaOffset;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                <span class="comment">// Remove this area from the bin chain and possibly add any excess space</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                <span class="comment">// left over to a new bin.</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <span class="keywordflow">if</span> (prevOffset == -1) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    freeAreaOffset = freeBinList[foundBinIndex];</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    ReadAreaHeader(freeAreaOffset, headerInfo);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    freeBinList[foundBinIndex] = headerInfo[1];</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    WriteBinIndex(foundBinIndex);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    ReadAreaHeader(prevOffset, headerInfo2);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    freeAreaOffset = headerInfo2[1];</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    ReadAreaHeader(freeAreaOffset, headerInfo);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    headerInfo2[1] = headerInfo[1];</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    ReboundArea(prevOffset, headerInfo2, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <span class="comment">// Reset the header of the recycled area.</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                headerInfo[0] = (headerInfo[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                ReboundArea(freeAreaOffset, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                <span class="comment">// Crop the area to the given size.</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                CropArea(freeAreaOffset, size);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                <span class="comment">// Add to the total allocated space</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                totalAllocatedSpace += realAllocSize;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keywordflow">return</span> freeAreaOffset;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        }</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">  564</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">ExpandDataArea</a>(<span class="keywordtype">long</span> minSize) {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = DataAreaEndOffset;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="comment">// Round all sizes up to the nearest 8</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="comment">// We grow only by a small amount if the area is small, and a large amount</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="comment">// if the area is large.</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordtype">long</span> overGrow = endOfDataArea / 64;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordtype">long</span> d = (overGrow &amp; 0x07L);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">if</span> (d != 0)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                overGrow = overGrow + (8 - d);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            overGrow = <a class="code" href="namespaceSystem.htm">System</a>.Math.Min(overGrow, 262144L);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">if</span> (overGrow &lt; 1024)</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                overGrow = 1024;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="keywordtype">long</span> growBy = minSize + overGrow;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <span class="keywordtype">long</span> newFileLength = endOfDataArea + growBy;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            SetDataAreaSize(newFileLength);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="keywordflow">return</span> growBy;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">  585</a></span>&#160;        <span class="keyword">protected</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">SplitArea</a>(<span class="keywordtype">long</span> offset, <span class="keywordtype">long</span> newBoundary) {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">// Split the area pointed to by the offset.</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            Read(offset, headerBuf, 0, 8);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="keywordtype">long</span> curSize = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(headerBuf, 0) &amp; ActiveFlag;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordtype">long</span> leftSize = newBoundary;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordtype">long</span> rightSize = curSize - newBoundary;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">if</span> (rightSize &lt; 0)</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Could not split the area.&quot;</span>);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(leftSize, headerBuf, 0);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(rightSize, headerBuf, 8);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="comment">// ISSUE: Boundary alteration is a moment when corruption could occur.</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="comment">//   There are three seeks and writes here and when we are setting the</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">//   end points, there is a risk of failure.</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="comment">// First set the boundary</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            Write((offset + newBoundary) - 8, headerBuf, 0, 16);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="comment">// Now set the end points</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            Write(offset, headerBuf, 0, 8);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            Write((offset + curSize) - 8, headerBuf, 8, 8);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae7eaa03a2eb0a095e57e67e4e1a9473e">  609</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae7eaa03a2eb0a095e57e67e4e1a9473e">IsValidBoundarySize</a>(<span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">long</span> maxAreaSize = (long)Int32.MaxValue * 200;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            size = size &amp; ActiveFlag;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            return ((size &lt; maxAreaSize) &amp;&amp; (size &gt;= 24) &amp;&amp; ((size &amp; 0x07) == 0));</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        }</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">  615</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">Init</a>() {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                SetDataAreaSize(DataAreaOffset);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                <span class="keyword">using</span> (var stream = <span class="keyword">new</span> MemoryStream((<span class="keywordtype">int</span>) BinAreaOffset)) {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    <span class="keyword">using</span> (BinaryWriter writer = <span class="keyword">new</span> BinaryWriter(stream, Encoding.Unicode)) {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                        <span class="comment">// The file MAGIC</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                        writer.Write(Magic); <span class="comment">// 0</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                        <span class="comment">// The file version</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        writer.Write(1); <span class="comment">// 4</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                        <span class="comment">// The number of areas (chunks) input the file (currently unused)</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                        writer.Write(-1L); <span class="comment">// 8</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                        <span class="comment">// File open/close status byte</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                        writer.Write((byte) 0); <span class="comment">// 16</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                        writer.Flush();</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                        byte[] buffer = <span class="keyword">new</span> byte[(int) DataAreaOffset];</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                        byte[] temp = stream.ToArray();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                        Array.Copy(temp, 0, buffer, 0, temp.Length);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                        </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = (<span class="keywordtype">int</span>) BinAreaOffset; i &lt; (int) DataAreaOffset; ++i) {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                            buffer[i] = 255;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                        }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                        Write(0, buffer, 0, buffer.Length);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    }</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> SetDataAreaSize(<span class="keywordtype">long</span> length);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a79b93178e52ed198d47c8e763d8f95e8">  653</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a79b93178e52ed198d47c8e763d8f95e8">Open</a>() {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                OpenStore(IsReadOnly);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="comment">// If it&#39;s small, initialize to empty</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                <span class="keywordflow">if</span> (DataAreaEndOffset &lt; DataAreaOffset)</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                    Init();</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                byte[] readBuf = <span class="keyword">new</span> byte[(int) BinAreaOffset];</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                Read(0, readBuf, 0, readBuf.Length);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keyword">using</span> (var stream = <span class="keyword">new</span> MemoryStream(readBuf)) {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                    <span class="keyword">using</span> (var reader = <span class="keyword">new</span> BinaryReader(stream)) {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                        <span class="keywordtype">int</span> magic = reader.ReadInt32();</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                        <span class="keywordflow">if</span> (magic != Magic)</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: Magic value is not as expected.&quot;</span>);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                        <span class="keywordtype">int</span> version = reader.ReadInt32();</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        <span class="keywordflow">if</span> (version != 1)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: unrecognized version.&quot;</span>);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                        reader.ReadInt64(); <span class="comment">// ignore</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                        byte status = reader.ReadByte();</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        ClosedClean = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                        <span class="keywordflow">if</span> (status == 1) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                            <span class="comment">// This means the store wasn&#39;t closed cleanly.</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                            ClosedClean = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                <span class="comment">// Read the bins</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                ReadBins();</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="comment">// Mark the file as open</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                <span class="keywordflow">if</span> (!IsReadOnly)</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    Write(16, 1);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                <span class="keywordtype">long</span> fileLength = DataAreaEndOffset;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                <span class="keywordflow">if</span> (fileLength &lt;= 8) {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: File size is too small.&quot;</span>);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                <span class="comment">// Set the wilderness offset.</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keywordflow">if</span> (fileLength == DataAreaOffset) {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                    WildernessOffset = -1;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    Read(fileLength - 8, readBuf, 0, 8);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordtype">long</span> lastBoundary = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(readBuf, 0);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                    <span class="keywordtype">long</span> lastAreaPointer = fileLength - lastBoundary;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="keywordflow">if</span> (lastAreaPointer &lt; DataAreaOffset)</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;File corrupt: last area offset is before data part of file.&quot;</span>);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    <span class="keywordflow">if</span> (lastAreaPointer &gt; fileLength - 8)</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;File corrupt: last_area_pointer at the end of the file.&quot;</span>);</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    Read(lastAreaPointer, readBuf, 0, 8);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                    <span class="keywordtype">long</span> lastAreaHeader = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(readBuf, 0);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                    <span class="comment">// If this is a freed block, then set this are the wilderness offset.</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                    <span class="keywordflow">if</span> ((lastAreaHeader &amp; DeletedFlag) != 0) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                        WildernessOffset = lastAreaPointer;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                        WildernessOffset = -1;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                    }</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                }</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <span class="keywordflow">return</span> ClosedClean;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            }</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">  728</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">Close</a>() {</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                <span class="comment">// Mark the file as closed</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                <span class="keywordflow">if</span> (!IsReadOnly)</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                    Write(16, 0);</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                CloseStore();</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            }</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">  738</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Dispose</a>() {</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            Dispose(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            GC.SuppressFinalize(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        }</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">  743</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">disposed</a>;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div>
<div class="line"><a name="l00745"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a477157c487b4db565a6cc8d1c5c54e4e">  745</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a477157c487b4db565a6cc8d1c5c54e4e">Dispose</a>(<span class="keywordtype">bool</span> disposing) {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keywordflow">if</span> (!disposed) {</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                <span class="keywordflow">if</span> (disposing) {</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                    Close();</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                disposed = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            }</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div>
<div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886">  755</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886">CreateArea</a>(<span class="keywordtype">long</span> size) {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <span class="keywordtype">long</span> pointer = Alloc(size);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">StoreArea</a>(<span class="keyword">this</span>, pointer, pointer + 8, <span class="keyword">false</span>, size);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        }</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a77d1cf74383b6bac24918e8e35fc0dfa">  762</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a77d1cf74383b6bac24918e8e35fc0dfa">DeleteArea</a>(<span class="keywordtype">long</span> <span class="keywordtype">id</span>) {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                Free(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div>
<div class="line"><a name="l00768"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5a21756bcf0a4b2b8b1b68a3fdf2a0d5">  768</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5a21756bcf0a4b2b8b1b68a3fdf2a0d5">GetArea</a>(<span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> readOnly) {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="comment">// If this is the fixed area</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == -1)</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">StoreArea</a>(<span class="keyword">this</span>, <span class="keywordtype">id</span>, FixedAreaOffset, readOnly, 64);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="comment">// Otherwise must be a regular area</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">StoreArea</a>(<span class="keyword">this</span>, <span class="keywordtype">id</span>, <span class="keywordtype">id</span>, readOnly);</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        }</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> Lock();</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> Unlock();</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="comment">//public abstract void CheckPoint();</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">  783</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> ClosedClean { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8726d586aad04152dcc075687180a2c">  785</a></span>&#160;        <span class="keyword">public</span> IEnumerable&lt;long&gt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8726d586aad04152dcc075687180a2c">GetAllAreas</a>() {</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            var list = <span class="keyword">new</span> List&lt;long&gt;();</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = DataAreaEndOffset;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordtype">long</span>[] header = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <span class="comment">// The first header</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordtype">long</span> offset = DataAreaOffset;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="keywordflow">while</span> (offset &lt; endOfDataArea) {</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                ReadAreaHeader(offset, header);</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                <span class="keywordtype">long</span> areaSize = (header[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                <span class="keywordflow">if</span> ((header[0] &amp; DeletedFlag) == 0)</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    list.Add(offset);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                offset += areaSize;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        }</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div>
<div class="line"><a name="l00806"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aac64c691f8dfcf5fc043f53dcaa974f1">  806</a></span>&#160;        <span class="keyword">internal</span> IEnumerable&lt;long&gt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aac64c691f8dfcf5fc043f53dcaa974f1">FindAllocatedAreasNotIn</a>(List&lt;long&gt; usedAreas) {</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="comment">// Sort the list</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            var list = <span class="keyword">new</span> List&lt;long&gt;(usedAreas);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            list.Sort();</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            <span class="comment">// The list of leaked areas</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            var leakedAreas = <span class="keyword">new</span> List&lt;long&gt;();</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordtype">int</span> listIndex = 0;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            <span class="comment">// What area are we looking for?</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <span class="keywordtype">long</span> lookingFor = Int64.MaxValue;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">if</span> (listIndex &lt; list.Count) {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                lookingFor = list[listIndex];</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                ++listIndex;</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = DataAreaEndOffset;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordtype">long</span>[] header = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            <span class="keywordtype">long</span> offset = DataAreaOffset;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            <span class="keywordflow">while</span> (offset &lt; endOfDataArea) {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                ReadAreaHeader(offset, header);</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                <span class="keywordtype">long</span> areaSize = (header[0] &amp; ActiveFlag);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                <span class="keywordtype">bool</span> areaFree = (header[0] &amp; DeletedFlag) != 0;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                <span class="keywordflow">if</span> (offset == lookingFor) {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    <span class="keywordflow">if</span> (areaFree)</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area is not allocated!&quot;</span>);</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                    <span class="comment">// Update the &#39;looking_for&#39; offset</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                    <span class="keywordflow">if</span> (listIndex &lt; list.Count) {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                        lookingFor = (long)list[listIndex];</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                        ++listIndex;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                        lookingFor = Int64.MaxValue;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (offset &gt; lookingFor) {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;IArea (offset = &quot;</span> + lookingFor + <span class="stringliteral">&quot;) wasn&#39;t found input store!&quot;</span>);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    <span class="comment">// An area that isn&#39;t input the list</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                    <span class="keywordflow">if</span> (!areaFree) {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                        <span class="comment">// This is a leaked area.</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        <span class="comment">// It isn&#39;t free and it isn&#39;t input the list</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                        leakedAreas.Add(offset);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                    }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                }</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                offset += areaSize;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            }</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keywordflow">return</span> leakedAreas.ToArray();</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        }</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> OpenStore(<span class="keywordtype">bool</span> readOnly);</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> CloseStore();</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div>
<div class="line"><a name="l00865"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a637f9ff7443b79d42673c3eb6fed612e">  865</a></span>&#160;        <span class="keyword">protected</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a637f9ff7443b79d42673c3eb6fed612e">ReadByte</a>(<span class="keywordtype">long</span> offset) {</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            var buffer = <span class="keyword">new</span> byte[1];</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            var count = Read(offset, buffer, 0, 1);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            <span class="keywordflow">if</span> (count == 0)</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">return</span> buffer[0];</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        }</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">int</span> Read(<span class="keywordtype">long</span> offset, byte[] buffer, <span class="keywordtype">int</span> index, <span class="keywordtype">int</span> length);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div>
<div class="line"><a name="l00876"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">  876</a></span>&#160;        <span class="keyword">protected</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(<span class="keywordtype">long</span> offset, byte value) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            Write(offset, <span class="keyword">new</span> []{value}, 0, 1);</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        }</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keywordtype">void</span> Write(<span class="keywordtype">long</span> offset, byte[] buffer, <span class="keywordtype">int</span> index, <span class="keywordtype">int</span> length);</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="preprocessor">        #region StoreArea</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div>
<div class="line"><a name="l00887"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">  887</a></span>&#160;        <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">StoreArea</a> : <a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> {</div>
<div class="line"><a name="l00888"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a56df893f94c8e7490e00df37bd30b0ab">  888</a></span>&#160;            <span class="keyword">private</span> byte[] buffer = <span class="keyword">new</span> byte[BufferSize];</div>
<div class="line"><a name="l00889"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#ab393c6b2f8cbb30e080f00c825ca5a5f">  889</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#ab393c6b2f8cbb30e080f00c825ca5a5f">position</a>;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div>
<div class="line"><a name="l00891"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a049fde695c56a2560c9f861b7dc3bb13">  891</a></span>&#160;            <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> BufferSize = 8;</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div>
<div class="line"><a name="l00893"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a7d7b29b1c8f21bda0447d35a31a5c4cf">  893</a></span>&#160;            <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a7d7b29b1c8f21bda0447d35a31a5c4cf">StoreArea</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a> store, <span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">long</span> offset, <span class="keywordtype">bool</span> readOnly) {</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                Store = store;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                Id = id;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                IsReadOnly = readOnly;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                store.<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">CheckOffset</a>(offset);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                store.<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset, buffer, 0, 8);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                <span class="keywordtype">long</span> v = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(buffer, 0);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                <span class="keywordflow">if</span> ((v &amp; DeletedFlag) != 0)</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Store being constructed on deleted area.&quot;</span>);</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                <span class="keywordtype">long</span> maxSize = v - 16;</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                StartOffset = offset + 8;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                position = StartOffset;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                EndOffset = StartOffset + maxSize;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div>
<div class="line"><a name="l00911"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aad0acc19e8540f9cd2bf746b44e44789">  911</a></span>&#160;            <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aad0acc19e8540f9cd2bf746b44e44789">StoreArea</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a> store, <span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">long</span> offset, <span class="keywordtype">bool</span> readOnly, <span class="keywordtype">long</span> fixedSize) {</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                Store = store;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                Id = id;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                IsReadOnly = readOnly;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                <span class="comment">// Check the offset is valid</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                <span class="keywordflow">if</span> (offset != FixedAreaOffset) {</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                    store.<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">CheckOffset</a>(offset);</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                }</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                StartOffset = offset;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                position = StartOffset;</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                EndOffset = StartOffset + fixedSize;</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            }</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div>
<div class="line"><a name="l00926"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a6a28cf7a445ce2e0faf71ccf084ba55d">  926</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">long</span> Id { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div>
<div class="line"><a name="l00928"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a3ab72a8d5266ead7c69944fb7a8fa987">  928</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">long</span> StartOffset { <span class="keyword">get</span>; set; }</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div>
<div class="line"><a name="l00930"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a17da4e9a088de5771cf7658e3bfd2b74">  930</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">long</span> EndOffset { <span class="keyword">get</span>; set; }</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div>
<div class="line"><a name="l00932"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#af1ae8485aa1297deabec6db316937e76">  932</a></span>&#160;            <span class="keyword">private</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a> Store { <span class="keyword">get</span>; set; }</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div>
<div class="line"><a name="l00934"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a9158c7edde859e0d07af4a6f0243abd9">  934</a></span>&#160;            <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsReadOnly { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div>
<div class="line"><a name="l00936"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#adaafa716a6ec56ed344f4729f66b02cd">  936</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">long</span> Position {</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                <span class="keyword">get</span> { <span class="keywordflow">return</span> position - StartOffset; }</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                set {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                    <span class="keywordtype">long</span> actPosition = StartOffset + value;</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                    <span class="keywordflow">if</span> (actPosition &lt; 0 || actPosition &gt;= EndOffset)</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Moved position out of the area bounds.&quot;</span>);</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                    position = actPosition;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                }</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            }</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div>
<div class="line"><a name="l00947"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a8dfc5b941802a16cc5aac52dcd078f9d">  947</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">int</span> Length {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                <span class="keyword">get</span> { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(EndOffset - StartOffset); }</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            }</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;</div>
<div class="line"><a name="l00951"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a70c150ccab8ab43858fa9349117b213c">  951</a></span>&#160;            <span class="keyword">protected</span> <span class="keywordtype">long</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a70c150ccab8ab43858fa9349117b213c">CheckAreaOffset</a>(<span class="keywordtype">int</span> diff) {</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                <span class="keywordtype">long</span> newPos = position + diff;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                <span class="keywordflow">if</span> (newPos &gt; EndOffset)</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Trying to access a position out of area bounds.&quot;</span>);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                </div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                <span class="keywordtype">long</span> oldPos = position;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                position = newPos;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                <span class="keywordflow">return</span> oldPos;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            }</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div>
<div class="line"><a name="l00961"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#af694dd9c76ef1b14cc43b77322706489">  961</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#af694dd9c76ef1b14cc43b77322706489">CopyTo</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> destArea, <span class="keywordtype">int</span> size) {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                <span class="comment">// NOTE: Assuming &#39;destination&#39; is a StoreArea, the temporary buffer</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                <span class="comment">// could be optimized away to a direct Array.Ccopy.  However, this</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                <span class="comment">// function would need to be written as a lower level IO function.</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> bufferSize = 2048;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                byte[] buf = <span class="keyword">new</span> byte[bufferSize];</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                <span class="keywordtype">int</span> toCopy = <a class="code" href="namespaceSystem.htm">System</a>.Math.Min(size, bufferSize);</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                <span class="keywordflow">while</span> (toCopy &gt; 0) {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                    var read = Read(buf, 0, toCopy);</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                    <span class="keywordflow">if</span> (read == 0)</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                    destArea.<a class="code" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm#a9591ccb271edb5ce2714e766d9979069">Write</a>(buf, 0, read);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                    size -= toCopy;</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    toCopy = <a class="code" href="namespaceSystem.htm">System</a>.Math.Min(size, bufferSize);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                }</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            }</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div>
<div class="line"><a name="l00980"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aa07d67ecb6dd4c66a36c2b4212a91a49">  980</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aa07d67ecb6dd4c66a36c2b4212a91a49">Read</a>(byte[] buffer, <span class="keywordtype">int</span> offset, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                <span class="keywordflow">return</span> Store.Read(CheckAreaOffset(length), buffer, offset, length);</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            }</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div>
<div class="line"><a name="l00984"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#abeb76f484792694387af6fdf3584c20c">  984</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#abeb76f484792694387af6fdf3584c20c">Write</a>(byte[] buffer, <span class="keywordtype">int</span> offset, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                <span class="keywordflow">if</span> (IsReadOnly)</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;The area is read-only access.&quot;</span>);</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                Store.Write(CheckAreaOffset(length), buffer, offset, length);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            }</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div>
<div class="line"><a name="l00991"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aae5ade2c12b9ec4087e7ce891af1e77f">  991</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aae5ade2c12b9ec4087e7ce891af1e77f">Flush</a>() {</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            }</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        }</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="preprocessor">        #endregion</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    }</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a9e13e91bb574fff6bdf022168aafb7e4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">Deveel.Data.Store.StoreBase.Alloc</a></div><div class="ttdeci">long Alloc(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00408">StoreBase.cs:408</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a0c1a6c21d6fdefb1b4d6e3fa41343f61"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">Deveel.Data.Store.StoreBase.totalAllocatedSpace</a></div><div class="ttdeci">long totalAllocatedSpace</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00027">StoreBase.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a56b3295a740c1a2fe7d7c9bfa7edf5de"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">Deveel.Data.Store.StoreBase.CropArea</a></div><div class="ttdeci">void CropArea(long offset, long allocatedSize)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00372">StoreBase.cs:372</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_ab393c6b2f8cbb30e080f00c825ca5a5f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#ab393c6b2f8cbb30e080f00c825ca5a5f">Deveel.Data.Store.StoreBase.StoreArea.position</a></div><div class="ttdeci">long position</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00889">StoreBase.cs:889</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_aae5ade2c12b9ec4087e7ce891af1e77f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aae5ade2c12b9ec4087e7ce891af1e77f">Deveel.Data.Store.StoreBase.StoreArea.Flush</a></div><div class="ttdeci">void Flush()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00991">StoreBase.cs:991</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a04413e690f21483564c32b996c2186d6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">Deveel.Data.Store.StoreBase.Free</a></div><div class="ttdeci">void Free(long pointer)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00245">StoreBase.cs:245</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a993f2ad0ef93324bc5c1a20a6943568d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">Deveel.Data.Store.StoreBase.MinimumBinSizeIndex</a></div><div class="ttdeci">static int MinimumBinSizeIndex(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00089">StoreBase.cs:89</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_aa9f8ad70cd7a824f84d6e0aa7271dd29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa9f8ad70cd7a824f84d6e0aa7271dd29">Deveel.Data.Store.StoreBase.WriteAllBins</a></div><div class="ttdeci">void WriteAllBins()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00108">StoreBase.cs:108</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a18e40aadbc7dd999b25276881790e19b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">Deveel.Data.Store.StoreBase.ReboundArea</a></div><div class="ttdeci">void ReboundArea(long offset, long[] header, bool writeHeaders)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00350">StoreBase.cs:350</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac9400712dff6cb92771dd0ea77d2c9c3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">Deveel.Data.Store.StoreBase.SplitArea</a></div><div class="ttdeci">void SplitArea(long offset, long newBoundary)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00585">StoreBase.cs:585</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">Deveel.Data.Store.StoreBase</a></div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00025">StoreBase.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_afc7e71cdd308489c801075f66e9b35d5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">Deveel.Data.Store.StoreBase.ReadBins</a></div><div class="ttdeci">void ReadBins()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00097">StoreBase.cs:97</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">Deveel.Data.Store.StoreBase.StoreArea</a></div><div class="ttdoc">An IArea that is backed by a StoreBase. </div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00887">StoreBase.cs:887</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2cd30093e6d372e3b33bf6fc28010441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">Deveel.Data.Store.StoreBase.Close</a></div><div class="ttdeci">void Close()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00728">StoreBase.cs:728</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_af52a7336bf64711adc4bf1f577a527ec"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">Deveel.Data.Store.StoreBase.CheckOffset</a></div><div class="ttdeci">void CheckOffset(long offset)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00082">StoreBase.cs:82</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac8ee7e9d714cfb2a3db12e79e2e4e283"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">Deveel.Data.Store.StoreBase.GetPreviousAreaHeader</a></div><div class="ttdeci">long GetPreviousAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00308">StoreBase.cs:308</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Store_1_1IArea_htm_a9591ccb271edb5ce2714e766d9979069"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm#a9591ccb271edb5ce2714e766d9979069">Deveel.Data.Store.IArea.Write</a></div><div class="ttdeci">void Write(byte[] buffer, int offset, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_af694dd9c76ef1b14cc43b77322706489"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#af694dd9c76ef1b14cc43b77322706489">Deveel.Data.Store.StoreBase.StoreArea.CopyTo</a></div><div class="ttdeci">void CopyTo(IArea destArea, int size)</div><div class="ttdoc">Copies the given amount of bytes from the current position of the this area to another one...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00961">StoreBase.cs:961</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a477157c487b4db565a6cc8d1c5c54e4e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a477157c487b4db565a6cc8d1c5c54e4e">Deveel.Data.Store.StoreBase.Dispose</a></div><div class="ttdeci">virtual void Dispose(bool disposing)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00745">StoreBase.cs:745</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_aac64c691f8dfcf5fc043f53dcaa974f1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aac64c691f8dfcf5fc043f53dcaa974f1">Deveel.Data.Store.StoreBase.FindAllocatedAreasNotIn</a></div><div class="ttdeci">IEnumerable&lt; long &gt; FindAllocatedAreasNotIn(List&lt; long &gt; usedAreas)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00806">StoreBase.cs:806</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf2ef79394e0249328fa813fc60b5854"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf2ef79394e0249328fa813fc60b5854">Deveel.Data.Store.StoreBase.~StoreBase</a></div><div class="ttdeci">~StoreBase()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00072">StoreBase.cs:72</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ae5894a234b11e2c39d74a18778867244"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">Deveel.Data.Store.StoreBase.GetNextAreaHeader</a></div><div class="ttdeci">long GetNextAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00325">StoreBase.cs:325</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2596f3b96dccbbe1c4e9f3ff11b42f48"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">Deveel.Data.Store.StoreBase.CoalesceArea</a></div><div class="ttdeci">void CoalesceArea(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00361">StoreBase.cs:361</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a5717180a15a0c07d035c320274705530"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">Deveel.Data.Store.StoreBase.RemoveFromBinChain</a></div><div class="ttdeci">void RemoveFromBinChain(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00205">StoreBase.cs:205</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_a7d7b29b1c8f21bda0447d35a31a5c4cf"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a7d7b29b1c8f21bda0447d35a31a5c4cf">Deveel.Data.Store.StoreBase.StoreArea.StoreArea</a></div><div class="ttdeci">StoreArea(StoreBase store, long id, long offset, bool readOnly)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00893">StoreBase.cs:893</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8b3a11524f8d72be7c7faf0a91dc4361"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">Deveel.Data.Store.StoreBase.WriteBinIndex</a></div><div class="ttdeci">void WriteBinIndex(int index)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00118">StoreBase.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_a70c150ccab8ab43858fa9349117b213c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#a70c150ccab8ab43858fa9349117b213c">Deveel.Data.Store.StoreBase.StoreArea.CheckAreaOffset</a></div><div class="ttdeci">long CheckAreaOffset(int diff)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00951">StoreBase.cs:951</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab0de0d59ca4f102abb09cbb5cf809bdb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab0de0d59ca4f102abb09cbb5cf809bdb">Deveel.Data.Store.StoreBase.StoreBase</a></div><div class="ttdeci">StoreBase(bool isReadOnly)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00061">StoreBase.cs:61</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a98940aaca42749a5d6f45a3bd372e886"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886">Deveel.Data.Store.StoreBase.CreateArea</a></div><div class="ttdeci">IArea CreateArea(long size)</div><div class="ttdoc">Allocates a block of memory in the store of the specified size and returns an IArea object that can b...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00755">StoreBase.cs:755</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_aa07d67ecb6dd4c66a36c2b4212a91a49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aa07d67ecb6dd4c66a36c2b4212a91a49">Deveel.Data.Store.StoreBase.StoreArea.Read</a></div><div class="ttdeci">int Read(byte[] buffer, int offset, int length)</div><div class="ttdoc">Reads an array of bytes from the underlying IArea and advances the position by length ...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00980">StoreBase.cs:980</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Store_1_1IArea_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">Deveel.Data.Store.IArea</a></div><div class="ttdoc">An interface for access the contents of an area of a store. </div><div class="ttdef"><b>Definition:</b> <a href="IArea_8cs_source.htm#l00023">IArea.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a637f9ff7443b79d42673c3eb6fed612e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a637f9ff7443b79d42673c3eb6fed612e">Deveel.Data.Store.StoreBase.ReadByte</a></div><div class="ttdeci">int ReadByte(long offset)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00865">StoreBase.cs:865</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac4c6c81971a96a2af0c6d026b2bf28d8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">Deveel.Data.Store.StoreBase.Init</a></div><div class="ttdeci">void Init()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00615">StoreBase.cs:615</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_aad0acc19e8540f9cd2bf746b44e44789"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#aad0acc19e8540f9cd2bf746b44e44789">Deveel.Data.Store.StoreBase.StoreArea.StoreArea</a></div><div class="ttdeci">StoreArea(StoreBase store, long id, long offset, bool readOnly, long fixedSize)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00911">StoreBase.cs:911</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2b91b28cb645082130a46c8f5c7d1a48"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">Deveel.Data.Store.StoreBase.disposed</a></div><div class="ttdeci">bool disposed</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00743">StoreBase.cs:743</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a77d1cf74383b6bac24918e8e35fc0dfa"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a77d1cf74383b6bac24918e8e35fc0dfa">Deveel.Data.Store.StoreBase.DeleteArea</a></div><div class="ttdeci">void DeleteArea(long id)</div><div class="ttdoc">Deletes an area that was previously allocated by the CreateArea method by the area id...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00762">StoreBase.cs:762</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data.htm">Deveel.Data</a></div><div class="ttdef"><b>Definition:</b> <a href="ActiveSessionList_8cs_source.htm#l00022">ActiveSessionList.cs:22</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac99362fa22ac4c9e4ed982870e33e030"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">Deveel.Data.Store.StoreBase.ExpandDataArea</a></div><div class="ttdeci">long ExpandDataArea(long minSize)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00564">StoreBase.cs:564</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a856219ef6b432e96bad6ba7a203ab69b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Deveel.Data.Store.StoreBase.Dispose</a></div><div class="ttdeci">void Dispose()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00738">StoreBase.cs:738</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a5a21756bcf0a4b2b8b1b68a3fdf2a0d5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5a21756bcf0a4b2b8b1b68a3fdf2a0d5">Deveel.Data.Store.StoreBase.GetArea</a></div><div class="ttdeci">IArea GetArea(long id, bool readOnly)</div><div class="ttdoc">Returns an object that allows for the contents of an area (represented by the id  parameter) to be Re...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00768">StoreBase.cs:768</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a00a3f2b0e6503ce1c5fd035535e4eb5b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">Deveel.Data.Store.StoreBase.AddToBinChain</a></div><div class="ttdeci">void AddToBinChain(long pointer, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00125">StoreBase.cs:125</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a79b93178e52ed198d47c8e763d8f95e8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a79b93178e52ed198d47c8e763d8f95e8">Deveel.Data.Store.StoreBase.Open</a></div><div class="ttdeci">bool Open()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00653">StoreBase.cs:653</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac8726d586aad04152dcc075687180a2c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8726d586aad04152dcc075687180a2c">Deveel.Data.Store.StoreBase.GetAllAreas</a></div><div class="ttdeci">IEnumerable&lt; long &gt; GetAllAreas()</div><div class="ttdoc">Returns a complete list of pointers to all areas in the Store as long objects sorted from lowest poin...</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00785">StoreBase.cs:785</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Store_1_1IStore_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm">Deveel.Data.Store.IStore</a></div><div class="ttdoc">A store is a resource where areas can be allocated and freed to store information (a memory allocator...</div><div class="ttdef"><b>Definition:</b> <a href="IStore_8cs_source.htm#l00056">IStore.cs:56</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Util_htm"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Util.htm">Deveel.Data.Util</a></div><div class="ttdef"><b>Definition:</b> <a href="BigArray_8cs_source.htm#l00019">BigArray.cs:19</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ae7eaa03a2eb0a095e57e67e4e1a9473e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae7eaa03a2eb0a095e57e67e4e1a9473e">Deveel.Data.Store.StoreBase.IsValidBoundarySize</a></div><div class="ttdeci">static bool IsValidBoundarySize(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00609">StoreBase.cs:609</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea_htm_abeb76f484792694387af6fdf3584c20c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#abeb76f484792694387af6fdf3584c20c">Deveel.Data.Store.StoreBase.StoreArea.Write</a></div><div class="ttdeci">void Write(byte[] buffer, int offset, int length)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00984">StoreBase.cs:984</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
