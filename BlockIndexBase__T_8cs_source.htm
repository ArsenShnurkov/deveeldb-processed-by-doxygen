<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Index/BlockIndexBase_T.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_da8e3e59386dbd04e303b49ee54c7b55.htm">Deveel.Data.Index</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">BlockIndexBase_T.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="BlockIndexBase__T_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections.Generic;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Index {</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">   63</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a>&lt;T&gt; : <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm">IIndex</a>&lt;T&gt; where T : IComparable&lt;T&gt;, IEquatable&lt;T&gt; {</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae088a19d3c3508afb66502cbd9f50c3b">   64</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae088a19d3c3508afb66502cbd9f50c3b">BlockIndexBase</a>() {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            Count = 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            IsReadOnly = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            Blocks = <span class="keyword">new</span> List&lt;IIndexBlock&lt;T&gt;&gt;(10);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a74dcd2d2b35b8da8343ea12556ea79ff">   70</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a74dcd2d2b35b8da8343ea12556ea79ff">BlockIndexBase</a>(IEnumerable&lt;<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a>&gt; blocks)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            : this() {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">foreach</span> (var block <span class="keywordflow">in</span> blocks) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                Blocks.Add(block);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                Count += block.Count;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac8d477cc98655d9d3bd2f330f70917d1">   78</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac8d477cc98655d9d3bd2f330f70917d1">BlockIndexBase</a>(IEnumerable&lt;T&gt; values)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            : this() {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">foreach</span> (var value <span class="keywordflow">in</span> values) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                Add(value);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a23b13ce99032f50b2e5bcad23df6c116">   85</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a23b13ce99032f50b2e5bcad23df6c116">BlockIndexBase</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm">IIndex&lt;T&gt;</a> index)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            : this() {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">if</span> (index is <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase&lt;T&gt;</a>) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="comment">// Optimization for when the input list is a BlockIntegerList</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                var blockIndex = (BlockIndexBase&lt;T&gt;) index;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                var inBlocks = blockIndex.Blocks;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordtype">int</span> inBlocksCount = inBlocks.Count;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// For each block in &#39;blockIndex&#39;</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; inBlocksCount; ++i) {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment">// get the block.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    var block = inBlocks[i];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="comment">// Insert a new block in this object.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    var destBlock = InsertBlock(i, NewBlock());</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="comment">// Copy the contents of the source block to the new destination block.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    block.CopyTo(destBlock);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="comment">// Set the size of the list</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                Count = blockIndex.Count; <span class="comment">//count;</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="comment">// The case when IIntegerList type is not known</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                var i = index.GetEnumerator();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">while</span> (i.MoveNext()) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    Add(i.Current);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// If the given list is immutable then set this list to immutable</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span> (index.IsReadOnly)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                IsReadOnly = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">  118</a></span>&#160;        <span class="keyword">protected</span> List&lt;IIndexBlock&lt;T&gt;&gt; Blocks { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">  120</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> IsReadOnly { <span class="keyword">get</span>; set; }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">  122</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">int</span> Count { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad26fdb3805aba7fc31d206dab271e2d8">  124</a></span>&#160;        <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="keywordtype">int</span> index] {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">get</span> {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordtype">int</span> size = Blocks.Count;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    var block = Blocks[i];</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">if</span> (index &gt;= start &amp;&amp; index &lt; start + bsize)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="keywordflow">return</span> block[index - start];</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    start += bsize;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;index&quot;</span>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> NewBlock();</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">  155</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">OnDeleteBlock</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> block) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">  165</a></span>&#160;        <span class="keyword">private</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a>(<span class="keywordtype">int</span> index, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> block) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            Blocks.Insert(index, block);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="comment">// Point to next in the list.</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">if</span> (index + 1 &lt; Blocks.Count) {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                var nextBlock = Blocks[index + 1];</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a968cfe15f76c6a13ca4576e3c5924e1d">Next</a> = nextBlock;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                nextBlock.Previous = block;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a968cfe15f76c6a13ca4576e3c5924e1d">Next</a> = null;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="comment">// Point to previous in the list.</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> (index &gt; 0) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                var prevBlock = Blocks[index - 1];</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2acf4b97c169baeecdcac74758eb889e">Previous</a> = prevBlock;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                prevBlock.Next = block;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2acf4b97c169baeecdcac74758eb889e">Previous</a> = null;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">return</span> block;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">  193</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">RemoveBlock</a>(<span class="keywordtype">int</span> index) {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="comment">// Alter linked list pointers.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> newPrev = null;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> newNext = null;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">if</span> (index + 1 &lt; Blocks.Count) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                newNext = Blocks[index + 1];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">if</span> (index &gt; 0) {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                newPrev = Blocks[index - 1];</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span> (newPrev != null) {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                newPrev.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a968cfe15f76c6a13ca4576e3c5924e1d">Next</a> = newNext;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">if</span> (newNext != null) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                newNext.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2acf4b97c169baeecdcac74758eb889e">Previous</a> = newPrev;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            var beenRemoved = Blocks[index];</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            Blocks.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2e5b1fe1beabdae191ea4980021b4464">RemoveAt</a>(index);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            OnDeleteBlock(beenRemoved);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">  223</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(T value, <span class="keywordtype">int</span> blockIndex, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> block, <span class="keywordtype">int</span> position) {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a064c0d85dab914e8f691c47494163318">Insert</a>(value, position);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            ++Count;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="comment">// Is the block full?</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span> (block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a4561a7576a12220fd0b6ce83cb2eefac">IsFull</a>) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">// We need to move half of the data out of this block into either the</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// next block or create a new block to store it.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="comment">// The size that we going to zap out of this block.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordtype">int</span> moveSize = (block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#aa72f38d5e969c4ccc063c91a036e29ac">Count</a>/7) - 1;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="comment">// The block to move half the data from this block.</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> moveTo;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="comment">// Is there a next block?</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; Blocks.Count - 1) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    var nextBlock = Blocks[blockIndex + 1];</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="comment">// Yes, can this block contain half the values from this block?</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keywordflow">if</span> (nextBlock.CanContain(moveSize)) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        moveTo = nextBlock;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        <span class="comment">// Can&#39;t contain so insert a new block.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        moveTo = InsertBlock(blockIndex + 1, NewBlock());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="comment">// No next block so create a new block</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    moveTo = InsertBlock(blockIndex + 1, NewBlock());</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="comment">// &#39;moveTo&#39; should be set to the block we are to use to move half the</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <span class="comment">// data from this block.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a06912a53553e4499a62e6378b0ef37a9">MoveTo</a>(moveTo, 0, moveSize);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">  270</a></span>&#160;        <span class="keyword">private</span> T <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">RemoveFromBlock</a>(<span class="keywordtype">int</span> blockIndex, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> block, <span class="keywordtype">int</span> position) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            var oldValue = block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2e5b1fe1beabdae191ea4980021b4464">RemoveAt</a>(position);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            --Count;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="comment">// If we have emptied out this block, then we should remove it from the</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="comment">// list.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span> (block.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a7fe262dc3e7970c9fd12417b32010cee">IsEmpty</a> &amp;&amp; Blocks.Count &gt; 1)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                RemoveBlock(blockIndex);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">return</span> oldValue;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">  290</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">FindBlockContaining</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">if</span> (Count == 0)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordtype">int</span> high = Blocks.Count - 1;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                var block = Blocks[mid];</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Bottom, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &gt; 0) {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Top, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &lt; 0) {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    <span class="comment">// Must be inside this block then!</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordflow">return</span> mid;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">  327</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">if</span> (Count == 0)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordtype">int</span> high = Blocks.Count - 1;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = high; i &gt;= low; --i) {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        var block1 = Blocks[i];</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block1.Bottom, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &lt;= 0) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                            <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block1.Top, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &gt;= 0)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                            <span class="keywordflow">return</span> -(i + 1) - 1;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    <span class="keywordflow">return</span> -(low + 1);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                var block = Blocks[mid];</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Bottom, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &gt; 0) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comparer.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Top, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &lt; 0) {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    low = mid;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <span class="keywordflow">if</span> (low == high) {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        <span class="keywordflow">return</span> low;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">  379</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">FindFirstBlock</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> c) {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">if</span> (Count == 0) {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keywordtype">int</span> high = Blocks.Count - 1;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = low; i &lt;= high; ++i) {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        var block1 = Blocks[i];</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                        <span class="keywordflow">if</span> (c.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block1.Top, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &gt;= 0) {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            <span class="keywordflow">if</span> (c.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block1.Bottom, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &lt;= 0)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                            <span class="keywordflow">return</span> -(i + 1);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">return</span> -(high + 1) - 1;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                var block = Blocks[mid];</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="keywordflow">if</span> (c.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Bottom, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &gt; 0) {</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">CompareValue</a>(block.Top, (<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>) key) &lt; 0) {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    high = mid;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">  421</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">IsSmallerOrEqual</a>(T x, T y) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &lt;= 0;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">  425</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">IsGreaterOrEqual</a>(T x, T y) {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &gt;= 0;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">  429</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">IsGreater</a>(T x, T y) {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &gt; 0;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">  433</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">IsSmaller</a>(T x, T y) {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &lt; 0;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7dbfd7896ee2b82e5b112f34b07dc2d5">  444</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7dbfd7896ee2b82e5b112f34b07dc2d5">FindLastBlock</a>(T val) {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span> (Count == 0) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordtype">int</span> high = Blocks.Count - 1;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = high; i &gt;= low; --i) {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        var block1 = Blocks[i];</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keywordflow">if</span> (IsSmallerOrEqual(block1.Bottom, val)) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                            <span class="keywordflow">if</span> (IsGreaterOrEqual(block1.Top, val))</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                            <span class="keywordflow">return</span> -(i + 1) - 1;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="keywordflow">return</span> -(low + 1);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                var block = Blocks[mid];</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <span class="keywordflow">if</span> (IsGreater(block.Bottom,val)) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsSmaller(block.Top, val)) {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    low = mid;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keywordflow">if</span> (low == high) {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        <span class="keywordflow">return</span> low;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                }</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">  499</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>() {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">if</span> (IsReadOnly)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Index is read-only.&quot;</span>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="comment">// HACK: We have a side effect of checking whether the list is immutable.</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="comment">//   If the block list doesn&#39;t contain any entries we add one here.  This</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="comment">//   hack reduces the memory requirements.</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">if</span> (Blocks.Count == 0) {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                InsertBlock(0, NewBlock());</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a27933d269026917f7b9f67102ab0bfc3">  520</a></span>&#160;        <span class="keyword">internal</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a27933d269026917f7b9f67102ab0bfc3">CopyToArray</a>(T[] array, <span class="keywordtype">int</span> offset, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keywordflow">if</span> (array.Length &lt; length || (offset + length) &gt; Count)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Size mismatch.&quot;</span>);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">foreach</span> (var block <span class="keywordflow">in</span> Blocks) {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                offset += block.CopyTo(array, offset);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div>
<div class="line"><a name="l00529"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#acb0e6a442e1d80330e698da8a6fb1bc2">  529</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#acb0e6a442e1d80330e698da8a6fb1bc2">Insert</a>(<span class="keywordtype">int</span> index, T value) {</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordtype">int</span> size = Blocks.Count;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                var block = Blocks[i];</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <span class="keywordflow">if</span> (index &gt;= start &amp;&amp; index &lt;= start + bsize) {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    InsertIntoBlock(value, i, block, index - start);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                start += bsize;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            }</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;index&quot;</span>);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00547"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">  547</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Add</a>(T value) {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            <span class="keywordtype">int</span> size = Blocks.Count;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            var block = Blocks[size - 1];</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            InsertIntoBlock(value, size - 1, block, block.Count);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        }</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div>
<div class="line"><a name="l00555"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae30c0423a27eff806c0b317c9f2a6a41">  555</a></span>&#160;        <span class="keyword">public</span> T <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae30c0423a27eff806c0b317c9f2a6a41">RemoveAt</a>(<span class="keywordtype">int</span> index) {</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <span class="keywordtype">int</span> size = Blocks.Count;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                var block = Blocks[i];</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">if</span> (index &gt;= start &amp;&amp; index &lt;= start + bsize) {</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    <span class="keywordflow">return</span> RemoveFromBlock(i, block, index - start);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                start += bsize;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;index&quot;</span>);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d9eebe518fa61c79d1847ceac1415fe">  572</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d9eebe518fa61c79d1847ceac1415fe">Contains</a>(T value) {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(value);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                <span class="comment">// We didn&#39;t find in the list, so return false.</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="comment">// Find, if not there then return false.</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> block.SearchLast(value) &gt;= 0;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aa4bb5460760be524b6e0aa13aaa1a3c9">  586</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aa4bb5460760be524b6e0aa13aaa1a3c9">InsertSort</a>(T value) {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(value);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                }</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                i = i + 1;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <span class="comment">// NOTE: A block can never become totally full so it&#39;s always okay to</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                <span class="comment">//   skip one ahead.</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            InsertIntoBlock(value, blockIndex, block, i);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        }</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a896498a4b1422b1426bb9671bdbff4fa">  617</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a896498a4b1422b1426bb9671bdbff4fa">UniqueInsertSort</a>(T value) {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(value);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                <span class="comment">// This means we found the value in the given block, so return false.</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            }</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            InsertIntoBlock(value, blockIndex, block, i);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="comment">// Value inserted so return true.</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a221422342e9b30aaca06bae3bdf2ea31">  650</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a221422342e9b30aaca06bae3bdf2ea31">RemoveSort</a>(T value) {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(value);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="comment">// The block to remove the value,</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                }</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            }</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            <span class="comment">// The point to remove the block,</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                <span class="comment">// This means we can&#39;t found the value in the given block, so return</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                <span class="comment">// false.</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            <span class="comment">// Remove value into the block,</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            var valRemoved = RemoveFromBlock(blockIndex, block, i);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">if</span> (!value.Equals(valRemoved))</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Incorrect value removed.&quot;</span>);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="comment">// Value removed so return true.</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a56b19b534c8cacdb9c2f5ff622de305e">  684</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a56b19b534c8cacdb9c2f5ff622de305e">Contains</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindBlockContaining(key, comparer);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="comment">// We didn&#39;t find in the list, so return false.</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <span class="comment">// Find, if not there then return false.</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keywordflow">return</span> block.BinarySearch(key, comparer) &gt;= 0;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#af548b09a5136307c204ff4e1b37668f4">  698</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#af548b09a5136307c204ff4e1b37668f4">InsertSort</a>(<span class="keywordtype">object</span> key, T value, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(key, comparer);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            }</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(key, comparer);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                i = i + 1;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="comment">// NOTE: A block can never become totally full so it&#39;s always okay to</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="comment">//   skip one ahead.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            InsertIntoBlock(value, blockIndex, block, i);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        }</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div>
<div class="line"><a name="l00729"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac5859cc7c1942c906b479c2c89fe86b7">  729</a></span>&#160;        <span class="keyword">public</span> T <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac5859cc7c1942c906b479c2c89fe86b7">RemoveSort</a>(<span class="keywordtype">object</span> key, T value, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            CheckImmutable();</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="comment">// Find the range of blocks that the value is in.</span></div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keywordtype">int</span> origBlockIndex = FindFirstBlock(key, comparer);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            <span class="keywordtype">int</span> blockIndex = origBlockIndex;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="keywordtype">int</span> lastBlockIndex = Blocks.Count - 1;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                <span class="comment">// Not found in a block,</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Value (&quot;</span> + key + <span class="stringliteral">&quot;) was not found in the list.&quot;</span>);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keywordtype">int</span> i = block.IndexOf(value);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keywordflow">while</span> (i == -1) {</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                <span class="comment">// If not found, go to next block</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                ++blockIndex;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                <span class="keywordflow">if</span> (blockIndex &gt; lastBlockIndex)</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Value (&quot;</span> + key + <span class="stringliteral">&quot;) was not found in the list.&quot;</span>);</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                block = Blocks[blockIndex];</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                <span class="comment">// Try and find the value within this block</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                i = block.IndexOf(value);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            }</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="comment">// Remove value from the block,</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keywordflow">return</span> RemoveFromBlock(blockIndex, block, i);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        }</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div>
<div class="line"><a name="l00758"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a0654b32561d537e32ffd0bba7ad0dacf">  758</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a0654b32561d537e32ffd0bba7ad0dacf">SearchLast</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keywordtype">int</span> blockIndex = FindLastBlock(key, comparer);</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordtype">int</span> sr;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                <span class="comment">// Guarenteed not found in any blocks so return start of insert block</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                blockIndex = (-(blockIndex + 1)); <span class="comment">// - 1;</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                sr = -1;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                var block = Blocks[blockIndex];</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                <span class="comment">// Try and find it in the block,</span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                sr = block.SearchLast(key, comparer);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            }</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordtype">int</span> offset = 0;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; blockIndex; ++i) {</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                var block = Blocks[i];</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                offset += block.Count;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            }</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="keywordflow">return</span> sr &gt;= 0 ? offset + sr : -offset + sr;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a81b2b42f1a49544761574a3fa213627c">  783</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a81b2b42f1a49544761574a3fa213627c">SearchFirst</a>(<span class="keywordtype">object</span> key, <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer&lt;T&gt;</a> comparer) {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keywordtype">int</span> blockNum = FindFirstBlock(key, comparer);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <span class="keywordtype">int</span> sr;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="keywordflow">if</span> (blockNum &lt; 0) {</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                <span class="comment">// Guarenteed not found in any blocks so return start of insert block</span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                blockNum = (-(blockNum + 1)); <span class="comment">// - 1;</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                sr = -1;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                var block = Blocks[blockNum];</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <span class="comment">// Try and find it in the block,</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                sr = block.SearchFirst(key, comparer);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            }</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="keywordtype">int</span> offset = 0;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; blockNum; ++i) {</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                var block = Blocks[i];</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                offset += block.Count;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            }</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            <span class="keywordflow">return</span> sr &gt;= 0 ? offset + sr : -offset + sr;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div>
<div class="line"><a name="l00808"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">  808</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator&lt;T&gt;</a> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">GetEnumerator</a>() {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordflow">return</span> GetEnumerator(0, Count - 1);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div>
<div class="line"><a name="l00812"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a4036aeaee8a3095761f14a3ad08aaee3">  812</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator&lt;T&gt;</a> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a4036aeaee8a3095761f14a3ad08aaee3">GetEnumerator</a>(<span class="keywordtype">int</span> startOffset, <span class="keywordtype">int</span> endOffset) {</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm">Enumerator</a>(<span class="keyword">this</span>, startOffset, endOffset);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00816"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a539e332a1c945be8d6deaac28b5438d2">  816</a></span>&#160;        IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator() {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <span class="keywordflow">return</span> GetEnumerator();</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div>
<div class="line"><a name="l00820"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a97835e8fa1f5cfcaaa98a6fce157ea03">  820</a></span>&#160;        IEnumerator IEnumerable.GetEnumerator() {</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            <span class="keywordflow">return</span> GetEnumerator();</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        }</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="preprocessor">        #region Enumerator</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div>
<div class="line"><a name="l00826"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm">  826</a></span>&#160;        <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm">Enumerator</a> : <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator</a>&lt;T&gt; {</div>
<div class="line"><a name="l00827"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ae915164603524da5d6b96dbea9805a30">  827</a></span>&#160;            <span class="keyword">private</span> readonly <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase&lt;T&gt;</a> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ae915164603524da5d6b96dbea9805a30">index</a>;</div>
<div class="line"><a name="l00828"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#afad4f93244f754726518d619b34e9827">  828</a></span>&#160;            <span class="keyword">private</span> readonly <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#afad4f93244f754726518d619b34e9827">startOffset</a>;</div>
<div class="line"><a name="l00829"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a626f0789b3ed9c11fc2bc65480020395">  829</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a626f0789b3ed9c11fc2bc65480020395">endOffset</a>;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div>
<div class="line"><a name="l00831"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad4dd25a72306d3beecd5944d1da67b72">  831</a></span>&#160;            <span class="keyword">private</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock&lt;T&gt;</a> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad4dd25a72306d3beecd5944d1da67b72">currentBlock</a>;</div>
<div class="line"><a name="l00832"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a4dff51bcdedf32081f5b1ff5ffa030c5">  832</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a4dff51bcdedf32081f5b1ff5ffa030c5">currentBlockSize</a>;</div>
<div class="line"><a name="l00833"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ab35a7ebde28e7ef0c1a5d1f6798dfcfc">  833</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ab35a7ebde28e7ef0c1a5d1f6798dfcfc">blockIndex</a>;</div>
<div class="line"><a name="l00834"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a7f8e21418ef5cff046bd51be80a2d23a">  834</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a7f8e21418ef5cff046bd51be80a2d23a">blockOffset</a>;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aa437c2f02eed83110c189bdfb49b2103">  836</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">int</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aa437c2f02eed83110c189bdfb49b2103">currentOffset</a>;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div>
<div class="line"><a name="l00838"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad7242c6717eb6632ce58a7d4c7a96826">  838</a></span>&#160;            <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad7242c6717eb6632ce58a7d4c7a96826">Enumerator</a>(<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase&lt;T&gt;</a> index, <span class="keywordtype">int</span> startOffset, <span class="keywordtype">int</span> endOffset) {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                this.index = index;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                this.startOffset = startOffset;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                this.endOffset = endOffset;</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                Reset();</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            }</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div>
<div class="line"><a name="l00846"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a5127bd972e342f97584a253aec0f9d70">  846</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a5127bd972e342f97584a253aec0f9d70">SetupVars</a>(<span class="keywordtype">int</span> offset) {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                <span class="keywordtype">int</span> size = index.Blocks.Count;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                <span class="keywordflow">for</span> (blockIndex = 0; blockIndex &lt; size; ++blockIndex) {</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                    var block = index.Blocks[blockIndex];</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                    <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                    <span class="keywordflow">if</span> (offset &lt; start + bsize) {</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                        blockOffset = offset - start;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                        <span class="keywordflow">if</span> (blockOffset &lt; 0)</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                            blockOffset = -1;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                        currentBlock = block;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                        currentBlockSize = bsize;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                    }</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                    start += bsize;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                }</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="stringliteral">&quot;&#39;index&#39; (&quot;</span> + offset + <span class="stringliteral">&quot;) out of bounds.&quot;</span>);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            }</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div>
<div class="line"><a name="l00869"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a6746a4ff6b6cc9e9647c92d6bd27f1fb">  869</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a6746a4ff6b6cc9e9647c92d6bd27f1fb">Dispose</a>() {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            }</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div>
<div class="line"><a name="l00872"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a52c2440f84250eea33b35eea149face0">  872</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a52c2440f84250eea33b35eea149face0">MoveNext</a>() {</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                <span class="keywordflow">if</span> (currentOffset &lt; endOffset) {</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                    ++currentOffset;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    <span class="keywordflow">if</span> (++blockOffset &gt;= currentBlockSize) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                        ++blockIndex;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                        currentBlock = index.Blocks[blockIndex];</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                        currentBlockSize = currentBlock.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#aa72f38d5e969c4ccc063c91a036e29ac">Count</a>;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                        blockOffset = 0;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                    }</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                }</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            }</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div>
<div class="line"><a name="l00889"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aecf59d8536ecb7ce1bdaaa883731c46f">  889</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aecf59d8536ecb7ce1bdaaa883731c46f">Reset</a>() {</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                currentOffset = startOffset - 1;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                <span class="keywordflow">if</span> (endOffset &gt;= startOffset) {</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                    <span class="comment">// Setup variables to 1 before the start</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                    SetupVars(startOffset - 1);</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                }</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            }</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div>
<div class="line"><a name="l00898"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a97b51f43e2804a018fed351e7535a0b3">  898</a></span>&#160;            <span class="keyword">public</span> T Current {</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                <span class="keyword">get</span> { <span class="keywordflow">return</span> currentBlock[blockOffset]; }</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            }</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div>
<div class="line"><a name="l00902"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a58ce7b39af28672fe0287d224e5cdc48">  902</a></span>&#160;            <span class="keywordtype">object</span> IEnumerator.Current {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                <span class="keyword">get</span> { <span class="keywordflow">return</span> Current; }</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            }</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div>
<div class="line"><a name="l00906"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a12532b65ee2d8b704e8565ebad8eb44c">  906</a></span>&#160;            <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a12532b65ee2d8b704e8565ebad8eb44c">WalkBack</a>() {</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                --blockOffset;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                --currentOffset;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                <span class="keywordflow">if</span> (blockOffset &lt; 0) {</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                    <span class="keywordflow">if</span> (blockIndex &gt; 0) {</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                        --blockIndex;</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                        currentBlock = index.Blocks[blockIndex];</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                        currentBlockSize = currentBlock.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#aa72f38d5e969c4ccc063c91a036e29ac">Count</a>;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                        blockOffset = currentBlock.<a class="code" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#aa72f38d5e969c4ccc063c91a036e29ac">Count</a> - 1;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                    }</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                }</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;            }</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div>
<div class="line"><a name="l00919"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a139245a6641c6188afe92b15e3bcf563">  919</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a139245a6641c6188afe92b15e3bcf563">MoveBack</a>() {</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                <span class="keywordflow">if</span> (currentOffset &gt; startOffset) {</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                    WalkBack();</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                }</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            }</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div>
<div class="line"><a name="l00928"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a622e9d28e254d8b2e88737845f644018">  928</a></span>&#160;            <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a622e9d28e254d8b2e88737845f644018">Remove</a>() {</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                index.CheckImmutable();</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                <span class="comment">// NOT ELEGANT: We check &#39;blocks&#39; size to determine if the value</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                <span class="comment">//   deletion caused blocks to be removed.  If it did, we set up the</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                <span class="comment">//   internal variables afresh with a call to &#39;setupVars&#39;.</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                <span class="keywordtype">int</span> origBlockCount = index.Blocks.Count;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                index.RemoveFromBlock(blockIndex, currentBlock, blockOffset);</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                <span class="comment">// Did the number of blocks in the list change?</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                <span class="keywordflow">if</span> (origBlockCount == index.Blocks.Count) {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                    <span class="comment">// HACK: Evaluate the current cached block size</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                    --currentBlockSize;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                    WalkBack();</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                    --currentOffset;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                    SetupVars(currentOffset);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                }</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                --endOffset;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            }</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        }</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="preprocessor">        #endregion</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    }</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a12532b65ee2d8b704e8565ebad8eb44c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a12532b65ee2d8b704e8565ebad8eb44c">Deveel.Data.Index.BlockIndexBase.Enumerator.WalkBack</a></div><div class="ttdeci">void WalkBack()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00906">BlockIndexBase_T.cs:906</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_af548b09a5136307c204ff4e1b37668f4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#af548b09a5136307c204ff4e1b37668f4">Deveel.Data.Index.BlockIndexBase.InsertSort</a></div><div class="ttdeci">void InsertSort(object key, T value, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00698">BlockIndexBase_T.cs:698</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a770c864e43fc560bf1d096e294cc9237"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">Deveel.Data.Index.BlockIndexBase.IsGreaterOrEqual</a></div><div class="ttdeci">static bool IsGreaterOrEqual(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00425">BlockIndexBase_T.cs:425</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ac8d477cc98655d9d3bd2f330f70917d1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac8d477cc98655d9d3bd2f330f70917d1">Deveel.Data.Index.BlockIndexBase.BlockIndexBase</a></div><div class="ttdeci">BlockIndexBase(IEnumerable&lt; T &gt; values)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00078">BlockIndexBase_T.cs:78</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a064c0d85dab914e8f691c47494163318"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a064c0d85dab914e8f691c47494163318">Deveel.Data.Index.IIndexBlock.Insert</a></div><div class="ttdeci">void Insert(T index, int value)</div><div class="ttdoc">Inserts an element to the block at the given index. </div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ae30c0423a27eff806c0b317c9f2a6a41"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae30c0423a27eff806c0b317c9f2a6a41">Deveel.Data.Index.BlockIndexBase.RemoveAt</a></div><div class="ttdeci">T RemoveAt(int index)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00555">BlockIndexBase_T.cs:555</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_ad4dd25a72306d3beecd5944d1da67b72"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad4dd25a72306d3beecd5944d1da67b72">Deveel.Data.Index.BlockIndexBase.Enumerator.currentBlock</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; currentBlock</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00831">BlockIndexBase_T.cs:831</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a2e5b1fe1beabdae191ea4980021b4464"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2e5b1fe1beabdae191ea4980021b4464">Deveel.Data.Index.IIndexBlock.RemoveAt</a></div><div class="ttdeci">T RemoveAt(int index)</div><div class="ttdoc">Removes the element at the given index from the block. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a81b2b42f1a49544761574a3fa213627c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a81b2b42f1a49544761574a3fa213627c">Deveel.Data.Index.BlockIndexBase.SearchFirst</a></div><div class="ttdeci">int SearchFirst(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00783">BlockIndexBase_T.cs:783</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7dbfd7896ee2b82e5b112f34b07dc2d5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7dbfd7896ee2b82e5b112f34b07dc2d5">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(T val)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00444">BlockIndexBase_T.cs:444</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a626f0789b3ed9c11fc2bc65480020395"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a626f0789b3ed9c11fc2bc65480020395">Deveel.Data.Index.BlockIndexBase.Enumerator.endOffset</a></div><div class="ttdeci">int endOffset</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00829">BlockIndexBase_T.cs:829</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a27933d269026917f7b9f67102ab0bfc3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a27933d269026917f7b9f67102ab0bfc3">Deveel.Data.Index.BlockIndexBase.CopyToArray</a></div><div class="ttdeci">void CopyToArray(T[] array, int offset, int length)</div><div class="ttdoc">Copies the data from each block into the given int[] array. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00520">BlockIndexBase_T.cs:520</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">Deveel.Data.Index.IIndexEnumerator</a></div><div class="ttdoc">Enumerates the elements of an index. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexEnumerator_8cs_source.htm#l00030">IIndexEnumerator.cs:30</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">Deveel.Data.Index.IIndexComparer</a></div><div class="ttdoc">A comparer that is used within IIndex<T> to compares two values which are indices to data that is bei...</div><div class="ttdef"><b>Definition:</b> <a href="IIndexComparer__T_8cs_source.htm#l00029">IIndexComparer_T.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d9eebe518fa61c79d1847ceac1415fe"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d9eebe518fa61c79d1847ceac1415fe">Deveel.Data.Index.BlockIndexBase.Contains</a></div><div class="ttdeci">bool Contains(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00572">BlockIndexBase_T.cs:572</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a1acad79bb2e068b165157481de0dec9b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">Deveel.Data.Index.BlockIndexBase.GetEnumerator</a></div><div class="ttdeci">IIndexEnumerator&lt; T &gt; GetEnumerator()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00808">BlockIndexBase_T.cs:808</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a968cfe15f76c6a13ca4576e3c5924e1d"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a968cfe15f76c6a13ca4576e3c5924e1d">Deveel.Data.Index.IIndexBlock.Next</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; Next</div><div class="ttdoc">Gets or sets the next block in the hash. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00037">IIndexBlock_T.cs:37</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_aa437c2f02eed83110c189bdfb49b2103"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aa437c2f02eed83110c189bdfb49b2103">Deveel.Data.Index.BlockIndexBase.Enumerator.currentOffset</a></div><div class="ttdeci">int currentOffset</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00836">BlockIndexBase_T.cs:836</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_acb0e6a442e1d80330e698da8a6fb1bc2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#acb0e6a442e1d80330e698da8a6fb1bc2">Deveel.Data.Index.BlockIndexBase.Insert</a></div><div class="ttdeci">void Insert(int index, T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00529">BlockIndexBase_T.cs:529</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a4036aeaee8a3095761f14a3ad08aaee3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a4036aeaee8a3095761f14a3ad08aaee3">Deveel.Data.Index.BlockIndexBase.GetEnumerator</a></div><div class="ttdeci">IIndexEnumerator&lt; T &gt; GetEnumerator(int startOffset, int endOffset)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00812">BlockIndexBase_T.cs:812</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a6746a4ff6b6cc9e9647c92d6bd27f1fb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a6746a4ff6b6cc9e9647c92d6bd27f1fb">Deveel.Data.Index.BlockIndexBase.Enumerator.Dispose</a></div><div class="ttdeci">void Dispose()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00869">BlockIndexBase_T.cs:869</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a74dcd2d2b35b8da8343ea12556ea79ff"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a74dcd2d2b35b8da8343ea12556ea79ff">Deveel.Data.Index.BlockIndexBase.BlockIndexBase</a></div><div class="ttdeci">BlockIndexBase(IEnumerable&lt; IIndexBlock&lt; T &gt;&gt; blocks)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00070">BlockIndexBase_T.cs:70</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aa4bb5460760be524b6e0aa13aaa1a3c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aa4bb5460760be524b6e0aa13aaa1a3c9">Deveel.Data.Index.BlockIndexBase.InsertSort</a></div><div class="ttdeci">void InsertSort(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00586">BlockIndexBase_T.cs:586</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ac5859cc7c1942c906b479c2c89fe86b7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac5859cc7c1942c906b479c2c89fe86b7">Deveel.Data.Index.BlockIndexBase.RemoveSort</a></div><div class="ttdeci">T RemoveSort(object key, T value, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00729">BlockIndexBase_T.cs:729</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a2acf4b97c169baeecdcac74758eb889e"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a2acf4b97c169baeecdcac74758eb889e">Deveel.Data.Index.IIndexBlock.Previous</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; Previous</div><div class="ttdoc">Gets or sets the previous block in the hash. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00042">IIndexBlock_T.cs:42</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_ae915164603524da5d6b96dbea9805a30"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ae915164603524da5d6b96dbea9805a30">Deveel.Data.Index.BlockIndexBase.Enumerator.index</a></div><div class="ttdeci">readonly BlockIndexBase&lt; T &gt; index</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00827">BlockIndexBase_T.cs:827</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a52c2440f84250eea33b35eea149face0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a52c2440f84250eea33b35eea149face0">Deveel.Data.Index.BlockIndexBase.Enumerator.MoveNext</a></div><div class="ttdeci">bool MoveNext()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00872">BlockIndexBase_T.cs:872</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a921cc3a57cf5a37b9ce87fdfbb9c2461"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Deveel.Data.Index.BlockIndexBase.Add</a></div><div class="ttdeci">void Add(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00547">BlockIndexBase_T.cs:547</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a896498a4b1422b1426bb9671bdbff4fa"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a896498a4b1422b1426bb9671bdbff4fa">Deveel.Data.Index.BlockIndexBase.UniqueInsertSort</a></div><div class="ttdeci">bool UniqueInsertSort(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00617">BlockIndexBase_T.cs:617</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aeb2681065642424f8dc7267b68aa2df6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">Deveel.Data.Index.BlockIndexBase.IsSmallerOrEqual</a></div><div class="ttdeci">static bool IsSmallerOrEqual(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00421">BlockIndexBase_T.cs:421</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm">Deveel.Data.DataObject</a></div><div class="ttdoc">Represents a dynamic object that encapsulates a defined SqlType and a compatible constant ISqlObject ...</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00035">DataObject.cs:35</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer_htm_a5b39c841a512496babf3f855761a8c08"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm#a5b39c841a512496babf3f855761a8c08">Deveel.Data.Index.IIndexComparer.CompareValue</a></div><div class="ttdeci">int CompareValue(T index, DataObject value)</div><div class="ttdoc">Compares a value contained in the underlying index at the given position and the </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ad7da6e17ca10ff50fd67f2b7606020ae"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">Deveel.Data.Index.BlockIndexBase.IsGreater</a></div><div class="ttdeci">static bool IsGreater(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00429">BlockIndexBase_T.cs:429</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a4561a7576a12220fd0b6ce83cb2eefac"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a4561a7576a12220fd0b6ce83cb2eefac">Deveel.Data.Index.IIndexBlock.IsFull</a></div><div class="ttdeci">bool IsFull</div><div class="ttdoc">Gets a value indicating if the block is full. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00061">IIndexBlock_T.cs:61</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm">Deveel.Data.Index.BlockIndexBase.Enumerator</a></div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00826">BlockIndexBase_T.cs:826</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_ad7242c6717eb6632ce58a7d4c7a96826"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ad7242c6717eb6632ce58a7d4c7a96826">Deveel.Data.Index.BlockIndexBase.Enumerator.Enumerator</a></div><div class="ttdeci">Enumerator(BlockIndexBase&lt; T &gt; index, int startOffset, int endOffset)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00838">BlockIndexBase_T.cs:838</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a4dff51bcdedf32081f5b1ff5ffa030c5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a4dff51bcdedf32081f5b1ff5ffa030c5">Deveel.Data.Index.BlockIndexBase.Enumerator.currentBlockSize</a></div><div class="ttdeci">int currentBlockSize</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00832">BlockIndexBase_T.cs:832</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a06912a53553e4499a62e6378b0ef37a9"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a06912a53553e4499a62e6378b0ef37a9">Deveel.Data.Index.IIndexBlock.MoveTo</a></div><div class="ttdeci">void MoveTo(IIndexBlock&lt; T &gt; destBlock, int destIndex, int count)</div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">Deveel.Data.Index.IIndexBlock</a></div><div class="ttdoc">A block contained in a BlockIndex. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00033">IIndexBlock_T.cs:33</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_a7fe262dc3e7970c9fd12417b32010cee"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#a7fe262dc3e7970c9fd12417b32010cee">Deveel.Data.Index.IIndexBlock.IsEmpty</a></div><div class="ttdeci">bool IsEmpty</div><div class="ttdoc">Gets a value indicating if the block is empty. </div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00066">IIndexBlock_T.cs:66</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndex_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm">Deveel.Data.Index.IIndex</a></div><div class="ttdoc">An interface for querying and accessing an index of primitive integers. </div><div class="ttdef"><b>Definition:</b> <a href="IIndex_8cs_source.htm#l00037">IIndex.cs:37</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aae98c3ceece630399dd8f3f5d1571b69"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">Deveel.Data.Index.BlockIndexBase.OnDeleteBlock</a></div><div class="ttdeci">virtual void OnDeleteBlock(IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Called when the class decides the given IIndexBlock<T> is no longer needed. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00155">BlockIndexBase_T.cs:155</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_aecf59d8536ecb7ce1bdaaa883731c46f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#aecf59d8536ecb7ce1bdaaa883731c46f">Deveel.Data.Index.BlockIndexBase.Enumerator.Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00889">BlockIndexBase_T.cs:889</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock_htm_aa72f38d5e969c4ccc063c91a036e29ac"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm#aa72f38d5e969c4ccc063c91a036e29ac">Deveel.Data.Index.IIndexBlock.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="IIndexBlock__T_8cs_source.htm#l00056">IIndexBlock_T.cs:56</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a></div><div class="ttdoc">An implementation of an index of values that are stored across an array of blocks. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00063">BlockIndexBase_T.cs:63</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ae2fa7d93837715b1ea6b10919e5916dc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">Deveel.Data.Index.BlockIndexBase.RemoveBlock</a></div><div class="ttdeci">void RemoveBlock(int index)</div><div class="ttdoc">Removes a block from the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00193">BlockIndexBase_T.cs:193</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a56b19b534c8cacdb9c2f5ff622de305e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a56b19b534c8cacdb9c2f5ff622de305e">Deveel.Data.Index.BlockIndexBase.Contains</a></div><div class="ttdeci">bool Contains(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00684">BlockIndexBase_T.cs:684</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a44142dfbc0a192bef2be270c358c33cb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">Deveel.Data.Index.BlockIndexBase.FindBlockContaining</a></div><div class="ttdeci">int FindBlockContaining(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00290">BlockIndexBase_T.cs:290</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a7f8e21418ef5cff046bd51be80a2d23a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a7f8e21418ef5cff046bd51be80a2d23a">Deveel.Data.Index.BlockIndexBase.Enumerator.blockOffset</a></div><div class="ttdeci">int blockOffset</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00834">BlockIndexBase_T.cs:834</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ae088a19d3c3508afb66502cbd9f50c3b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae088a19d3c3508afb66502cbd9f50c3b">Deveel.Data.Index.BlockIndexBase.BlockIndexBase</a></div><div class="ttdeci">BlockIndexBase()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00064">BlockIndexBase_T.cs:64</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a622e9d28e254d8b2e88737845f644018"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a622e9d28e254d8b2e88737845f644018">Deveel.Data.Index.BlockIndexBase.Enumerator.Remove</a></div><div class="ttdeci">void Remove()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00928">BlockIndexBase_T.cs:928</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a5127bd972e342f97584a253aec0f9d70"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a5127bd972e342f97584a253aec0f9d70">Deveel.Data.Index.BlockIndexBase.Enumerator.SetupVars</a></div><div class="ttdeci">void SetupVars(int offset)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00846">BlockIndexBase_T.cs:846</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_ab35a7ebde28e7ef0c1a5d1f6798dfcfc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#ab35a7ebde28e7ef0c1a5d1f6798dfcfc">Deveel.Data.Index.BlockIndexBase.Enumerator.blockIndex</a></div><div class="ttdeci">int blockIndex</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00833">BlockIndexBase_T.cs:833</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a497a00c13b562c16a21275364a8602e9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">Deveel.Data.Index.BlockIndexBase.FindFirstBlock</a></div><div class="ttdeci">int FindFirstBlock(object key, IIndexComparer&lt; T &gt; c)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00379">BlockIndexBase_T.cs:379</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a23b13ce99032f50b2e5bcad23df6c116"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a23b13ce99032f50b2e5bcad23df6c116">Deveel.Data.Index.BlockIndexBase.BlockIndexBase</a></div><div class="ttdeci">BlockIndexBase(IIndex&lt; T &gt; index)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00085">BlockIndexBase_T.cs:85</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ad15d43e82f148428c5f16eae5e729e77"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">Deveel.Data.Index.BlockIndexBase.IsSmaller</a></div><div class="ttdeci">static bool IsSmaller(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00433">BlockIndexBase_T.cs:433</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a0654b32561d537e32ffd0bba7ad0dacf"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a0654b32561d537e32ffd0bba7ad0dacf">Deveel.Data.Index.BlockIndexBase.SearchLast</a></div><div class="ttdeci">int SearchLast(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00758">BlockIndexBase_T.cs:758</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_a139245a6641c6188afe92b15e3bcf563"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#a139245a6641c6188afe92b15e3bcf563">Deveel.Data.Index.BlockIndexBase.Enumerator.MoveBack</a></div><div class="ttdeci">bool MoveBack()</div><div class="ttdoc">Reverses the direction of the enumerator to the previous element within the list. /summary> returns> ...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00919">BlockIndexBase_T.cs:919</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a221422342e9b30aaca06bae3bdf2ea31"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a221422342e9b30aaca06bae3bdf2ea31">Deveel.Data.Index.BlockIndexBase.RemoveSort</a></div><div class="ttdeci">bool RemoveSort(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00650">BlockIndexBase_T.cs:650</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a85090d3d907dd726299e5f4c7bdce544"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">Deveel.Data.Index.BlockIndexBase.RemoveFromBlock</a></div><div class="ttdeci">T RemoveFromBlock(int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Removes the value from the given position in the specified block. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00270">BlockIndexBase_T.cs:270</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator_htm_afad4f93244f754726518d619b34e9827"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm#afad4f93244f754726518d619b34e9827">Deveel.Data.Index.BlockIndexBase.Enumerator.startOffset</a></div><div class="ttdeci">readonly int startOffset</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00828">BlockIndexBase_T.cs:828</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aef2a349aaada862c202ecab5ff4436a2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">Deveel.Data.Index.BlockIndexBase.InsertBlock</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; InsertBlock(int index, IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Inserts a block at the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00165">BlockIndexBase_T.cs:165</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
