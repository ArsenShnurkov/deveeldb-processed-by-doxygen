<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Sql.Parser/SqlGrammarBase.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_f0ea0b9ea9aae2e0e9b9dfca26eb78a8.htm">Deveel.Data.Sql.Parser</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SqlGrammarBase.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SqlGrammarBase_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceIrony.htm">Irony</a>.Parsing;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Sql.Parser {</div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm">   22</a></span>&#160;    <span class="keyword">abstract</span> <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm">SqlGrammarBase</a> : Grammar {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment">// cached most used non-terminal</span></div>
<div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#af29bdc9da091d64c11ea9092df5cd5b0">   24</a></span>&#160;        <span class="keyword">private</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#af29bdc9da091d64c11ea9092df5cd5b0">sqlExpression</a>;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad208eef98f4305948f795a35e0eedfb0">   25</a></span>&#160;        <span class="keyword">private</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad208eef98f4305948f795a35e0eedfb0">objectname</a>;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a92540e5dece588d0f31b6e9be82fa92b">   26</a></span>&#160;        <span class="keyword">private</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a92540e5dece588d0f31b6e9be82fa92b">datatype</a>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab937ee2154f8c90f812c2a1f26a368d2">   28</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab937ee2154f8c90f812c2a1f26a368d2">SqlGrammarBase</a>()</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            : base(false) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            SetupGrammar();</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a76461256ff21197faccebb7db97fa8bf">   33</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keywordtype">string</span> Dialect { <span class="keyword">get</span>; }</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad1cee12879ebb5ac6b8caed27637fbdd">   35</a></span>&#160;        <span class="keyword">protected</span> StringLiteral StringLiteral { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#aeb453f1562dd00310fde99b001312dd8">   37</a></span>&#160;        <span class="keyword">protected</span> NumberLiteral NumberLiteral { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7a238dc94de0ffea2956b92cfc11b4b9">   39</a></span>&#160;        <span class="keyword">protected</span> NumberLiteral PositiveLiteral { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#afa0e4a726db435511cca5d4a31e2e612">   41</a></span>&#160;        <span class="keyword">protected</span> IdentifierTerminal Identifier { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a40fed037bfea5464c165dcb837574e64">   43</a></span>&#160;        <span class="keyword">protected</span> KeyTerm Comma { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab990f22ca52cff67ef12b372a391a915">   45</a></span>&#160;        <span class="keyword">protected</span> KeyTerm Dot { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#affcef0b6673463b9381cf44372472165">   47</a></span>&#160;        <span class="keyword">protected</span> KeyTerm Colon { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a4b6c938a3e481e57e05f8b79fa31ec99">   49</a></span>&#160;        <span class="keyword">protected</span> KeyTerm As { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">protected</span> <span class="keyword">abstract</span> NonTerminal MakeRoot();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a1daa718b544a6900c341acafa797594c">   53</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a1daa718b544a6900c341acafa797594c">Comments</a>() {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            var comment = <span class="keyword">new</span> CommentTerminal(<span class="stringliteral">&quot;multiline_comment&quot;</span>, <span class="stringliteral">&quot;/*&quot;</span>, <span class="stringliteral">&quot;*/&quot;</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            var lineComment = <span class="keyword">new</span> CommentTerminal(<span class="stringliteral">&quot;singleline_comment&quot;</span>, <span class="stringliteral">&quot;--&quot;</span>, <span class="stringliteral">&quot;\n&quot;</span>, <span class="stringliteral">&quot;\r\n&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            NonGrammarTerminals.Add(comment);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            NonGrammarTerminals.Add(lineComment);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146cc723c81c9d3773fe092f7f71337">   60</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146cc723c81c9d3773fe092f7f71337">Literals</a>() {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            StringLiteral = <span class="keyword">new</span> StringLiteral(<span class="stringliteral">&quot;string&quot;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>, StringOptions.AllowsAllEscapes, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1StringLiteralNode.htm">StringLiteralNode</a>));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            NumberLiteral = <span class="keyword">new</span> NumberLiteral(<span class="stringliteral">&quot;number&quot;</span>, NumberOptions.DisableQuickParse | NumberOptions.AllowSign, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1NumberLiteralNode.htm">NumberLiteralNode</a>));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            PositiveLiteral = <span class="keyword">new</span> NumberLiteral(<span class="stringliteral">&quot;positive&quot;</span>, NumberOptions.IntOnly, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IntegerLiteralNode.htm">IntegerLiteralNode</a>));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a4ec575b8f41f9f53db1a305dbde0b31a">   66</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a4ec575b8f41f9f53db1a305dbde0b31a">MakeSimpleId</a>() {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            Identifier = <span class="keyword">new</span> IdentifierTerminal(<span class="stringliteral">&quot;simple_id&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            var idStringLiteral = <span class="keyword">new</span> StringLiteral(<span class="stringliteral">&quot;simple_id_quoted&quot;</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            idStringLiteral.AddStartEnd(<span class="stringliteral">&quot;\&quot;&quot;</span>, StringOptions.NoEscapes);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            idStringLiteral.AstConfig.NodeType = typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IdentifierNode.htm">IdentifierNode</a>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            idStringLiteral.SetOutputTerminal(<span class="keyword">this</span>, Identifier);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2b4c6a59b503587a5eedb0bddffe8838">   74</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2b4c6a59b503587a5eedb0bddffe8838">Operators</a>() {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            RegisterOperators(10, <span class="stringliteral">&quot;*&quot;</span>, <span class="stringliteral">&quot;/&quot;</span>, <span class="stringliteral">&quot;%&quot;</span>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            RegisterOperators(9, <span class="stringliteral">&quot;+&quot;</span>, <span class="stringliteral">&quot;-&quot;</span>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            RegisterOperators(8, <span class="stringliteral">&quot;=&quot;</span>, <span class="stringliteral">&quot;&gt;&quot;</span>, <span class="stringliteral">&quot;&lt;&quot;</span>, <span class="stringliteral">&quot;&gt;=&quot;</span>, <span class="stringliteral">&quot;&lt;=&quot;</span>, <span class="stringliteral">&quot;&lt;&gt;&quot;</span>, <span class="stringliteral">&quot;!=&quot;</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            RegisterOperators(8, Key(<span class="stringliteral">&quot;LIKE&quot;</span>), Key(<span class="stringliteral">&quot;IN&quot;</span>), Key(<span class="stringliteral">&quot;IS&quot;</span>), Key(<span class="stringliteral">&quot;IS&quot;</span>) + Key(<span class="stringliteral">&quot;NOT&quot;</span>));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            RegisterOperators(7, <span class="stringliteral">&quot;^&quot;</span>, <span class="stringliteral">&quot;&amp;&quot;</span>, <span class="stringliteral">&quot;|&quot;</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            RegisterOperators(6, Key(<span class="stringliteral">&quot;NOT&quot;</span>));</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            RegisterOperators(5, Key(<span class="stringliteral">&quot;AND&quot;</span>));</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            RegisterOperators(4, Key(<span class="stringliteral">&quot;OR&quot;</span>));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a91a64ffe32f048bf8b00b8aea49b76c6">   85</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a91a64ffe32f048bf8b00b8aea49b76c6">SetupGrammar</a>() {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            Comma = ToTerm(<span class="stringliteral">&quot;,&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            Dot = ToTerm(<span class="stringliteral">&quot;.&quot;</span>);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            Colon = ToTerm(<span class="stringliteral">&quot;:&quot;</span>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            As = ToTerm(<span class="stringliteral">&quot;AS&quot;</span>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            MakeSimpleId();</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            Comments();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            Keywords();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            ReservedWords();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            Literals();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            Operators();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            MarkPunctuation(<span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;AS&quot;</span>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            Root = MakeRoot();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a120d6e4b2982c01ae2b284610bd1493d">  105</a></span>&#160;        <span class="keyword">protected</span> KeyTerm <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a120d6e4b2982c01ae2b284610bd1493d">Key</a>(<span class="keywordtype">string</span> term) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            KeyTerm keyTerm;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span> (!KeyTerms.TryGetValue(term, out keyTerm))</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                KeyTerms[term] = keyTerm = ToTerm(term);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> keyTerm;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab86787c107d7524e77bbb6ed4cd5351c">  113</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab86787c107d7524e77bbb6ed4cd5351c">Keywords</a>() {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146c832aa0fc1d12dd4933f336e0673">  117</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146c832aa0fc1d12dd4933f336e0673">ReservedWords</a>() {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2ae88dbf338ac38961efa95dc3f5cd92">  121</a></span>&#160;        <span class="keyword">protected</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2ae88dbf338ac38961efa95dc3f5cd92">ObjectName</a>() {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">if</span> (objectname != null)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">return</span> objectname;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            objectname = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;object_name&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1ObjectNameNode.htm">ObjectNameNode</a>));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            objectname.Rule = MakePlusRule(objectname, Dot, Identifier);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> objectname;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a5806c1c2cd82e427830e1e6a9f67ddce">  130</a></span>&#160;        <span class="keyword">protected</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a5806c1c2cd82e427830e1e6a9f67ddce">DataType</a>() {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span> (datatype != null)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">return</span> datatype;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            datatype = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;datatype&quot;</span>, typeof (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeNode.htm">DataTypeNode</a>));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            var numberPrecision = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;number_precision&quot;</span>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            var characterType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;character_type&quot;</span>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            var localeOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;locale_opt&quot;</span>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            var encodingOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;encoding_opt&quot;</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            var booleanType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;boolean_type&quot;</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            var integerType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;integer_type&quot;</span>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            var decimalType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;decimal_type&quot;</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            var floatType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;float_type&quot;</span>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            var dateType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;date_type&quot;</span>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            var intervalType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;interval_type&quot;</span>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            var intervalFormatOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;interval_format_opt&quot;</span>);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            var datatypeSize = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;datatype_size&quot;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            var longVarchar = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;long_varchar&quot;</span>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            var binaryType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;binary_type&quot;</span>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            var longVarbinary = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;long_varbinary&quot;</span>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            var userType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;user_type&quot;</span>);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            var rowType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;row_type&quot;</span>);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            var userTypeMetaOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;user_type_meta_opt&quot;</span>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            var userTypeMetaList = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;user_type_meta_list&quot;</span>);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            var userTypeMeta = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;user_type_meta&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeMetaNode.htm">DataTypeMetaNode</a>));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            datatype.Rule = characterType |</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                            booleanType |</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                            dateType |</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            integerType |</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            decimalType |</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                            floatType |</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                            binaryType |</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                            rowType |</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                            userType;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            characterType.Rule = Key(<span class="stringliteral">&quot;CHAR&quot;</span>) + datatypeSize + localeOpt + encodingOp |</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                 Key(<span class="stringliteral">&quot;VARCHAR&quot;</span>) + datatypeSize + localeOpt + encodingOp |</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                 longVarchar + datatypeSize + localeOpt + encodingOp;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            localeOpt.Rule = Empty | Key(<span class="stringliteral">&quot;LOCALE&quot;</span>) + StringLiteral;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            encodingOp.Rule = Empty | Key(<span class="stringliteral">&quot;ENCODING&quot;</span>) + StringLiteral;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            dateType.Rule = Key(<span class="stringliteral">&quot;DATE&quot;</span>) | Key(<span class="stringliteral">&quot;TIME&quot;</span>) | Key(<span class="stringliteral">&quot;TIMESTAMP&quot;</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            booleanType.Rule = Key(<span class="stringliteral">&quot;BOOLEAN&quot;</span>) | Key(<span class="stringliteral">&quot;BIT&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            integerType.Rule = Key(<span class="stringliteral">&quot;INT&quot;</span>) |</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                               Key(<span class="stringliteral">&quot;INTEGER&quot;</span>) |</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                               Key(<span class="stringliteral">&quot;BIGINT&quot;</span>) |</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                               Key(<span class="stringliteral">&quot;SMALLINT&quot;</span>) |</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                               Key(<span class="stringliteral">&quot;TINYINT&quot;</span>);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            decimalType.Rule = Key(<span class="stringliteral">&quot;DECIMAL&quot;</span>) + numberPrecision |</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                               Key(<span class="stringliteral">&quot;NUMERIC&quot;</span>) + numberPrecision |</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                               Key(<span class="stringliteral">&quot;NUMBER&quot;</span>) + numberPrecision;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            floatType.Rule = Key(<span class="stringliteral">&quot;FLOAT&quot;</span>) |</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                             Key(<span class="stringliteral">&quot;REAL&quot;</span>) |</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                             Key(<span class="stringliteral">&quot;DOUBLE&quot;</span>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            binaryType.Rule = Key(<span class="stringliteral">&quot;BINARY&quot;</span>) + datatypeSize |</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                              Key(<span class="stringliteral">&quot;VARBINARY&quot;</span>) + datatypeSize |</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                              Key(<span class="stringliteral">&quot;BLOB&quot;</span>) |</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                              longVarbinary + datatypeSize;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            longVarchar.Rule = Key(<span class="stringliteral">&quot;LONG&quot;</span>) + Key(<span class="stringliteral">&quot;VARCHAR&quot;</span>);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            longVarbinary.Rule = Key(<span class="stringliteral">&quot;LONG&quot;</span>) + Key(<span class="stringliteral">&quot;VARBINARY&quot;</span>);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            rowType.Rule = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>() + <span class="stringliteral">&quot;%&quot;</span> + Key(<span class="stringliteral">&quot;ROWTYPE&quot;</span>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            userType.Rule = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>() + userTypeMetaOpt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            userTypeMetaOpt.Rule = Empty | <span class="stringliteral">&quot;(&quot;</span> + userTypeMetaList + <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            userTypeMetaList.Rule = MakeStarRule(userTypeMetaList, Comma, userTypeMeta);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            userTypeMeta.Rule = Identifier + <span class="stringliteral">&quot;=&quot;</span> + StringLiteral;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            intervalType.Rule = Key(<span class="stringliteral">&quot;INTERVAL&quot;</span>) + intervalFormatOpt;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            intervalFormatOpt.Rule = Key(<span class="stringliteral">&quot;YEAR&quot;</span>) + Key(<span class="stringliteral">&quot;TO&quot;</span>) + Key(<span class="stringliteral">&quot;MONTH&quot;</span>) |</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                     Key(<span class="stringliteral">&quot;DAY&quot;</span>) + Key(<span class="stringliteral">&quot;TO&quot;</span>) + Key(<span class="stringliteral">&quot;SECOND&quot;</span>);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            datatypeSize.Rule = Empty | <span class="stringliteral">&quot;(&quot;</span> + PositiveLiteral + <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            numberPrecision.Rule = Empty |</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                   <span class="stringliteral">&quot;(&quot;</span> + PositiveLiteral + <span class="stringliteral">&quot;)&quot;</span> |</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                   <span class="stringliteral">&quot;(&quot;</span> + PositiveLiteral + <span class="stringliteral">&quot;,&quot;</span> + PositiveLiteral + <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">return</span> datatype;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a8d4ea87190e59d18c5deb7ef2ea7b1f7">  208</a></span>&#160;        <span class="keyword">protected</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a8d4ea87190e59d18c5deb7ef2ea7b1f7">SqlExpressionList</a>() {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var list = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_expression_list&quot;</span>);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            list.Rule = MakePlusRule(list, Comma, SqlExpression());</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a071ccc33e79434d233434dc008b221b6">  214</a></span>&#160;        <span class="keyword">protected</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a071ccc33e79434d233434dc008b221b6">SqlQueryExpression</a>() {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            var selectIntoOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_into_opt&quot;</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            var selectSet = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_set&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            var selectRestrictOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_restrict_opt&quot;</span>);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            var selectItem = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_item&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SelectItemNode.htm">SelectItemNode</a>));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            var selectAsOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_as_opt&quot;</span>);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            var selectSource = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_source&quot;</span>);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            var selectItemList = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;select_item_list&quot;</span>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            var fromClauseOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;from_clause_opt&quot;</span>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            var fromClause = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;from_clause&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromClauseNode.htm">FromClauseNode</a>));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            var fromSource = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;from_source&quot;</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            var fromTableSource = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;from_table_source&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromTableSourceNode.htm">FromTableSourceNode</a>));</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            var fromQuerySource = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;from_query_source&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromQuerySourceNode.htm">FromQuerySourceNode</a>));</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            var joinOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;join_opt&quot;</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            var joinType = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;join_type&quot;</span>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            var join = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;join&quot;</span>, typeof (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1JoinNode.htm">JoinNode</a>));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            var onOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;on_opt&quot;</span>);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            var whereClauseOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;where_clause_opt&quot;</span>);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            var groupByOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;group_by_opt&quot;</span>);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            var groupBy = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;group_by&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1GroupByNode.htm">GroupByNode</a>));</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            var havingClauseOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;having_clause_opt&quot;</span>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            var queryCompositeOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;query_composite_opt&quot;</span>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            var queryComposite = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;query_composite&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1QueryCompositeNode.htm">QueryCompositeNode</a>));</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            var expression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_query_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlQueryExpressionNode.htm">SqlQueryExpressionNode</a>));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            var allOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;all_opt&quot;</span>);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            var asOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;as_opt&quot;</span>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            expression.Rule = Key(<span class="stringliteral">&quot;SELECT&quot;</span>) + selectRestrictOpt +</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                              selectIntoOpt +</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                              selectSet +</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                              fromClauseOpt +</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                              whereClauseOpt +</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                              groupByOpt +</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                              queryCompositeOpt;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            selectRestrictOpt.Rule = Empty | Key(<span class="stringliteral">&quot;ALL&quot;</span>) | Key(<span class="stringliteral">&quot;DISTINCT&quot;</span>);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            selectIntoOpt.Rule = Empty | Key(<span class="stringliteral">&quot;INTO&quot;</span>) + <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            selectSet.Rule = selectItemList | <span class="stringliteral">&quot;*&quot;</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            selectItemList.Rule = MakePlusRule(selectItemList, Comma, selectItem);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            selectItem.Rule = selectSource + selectAsOpt;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            selectAsOpt.Rule = Empty |</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                               As + Identifier |</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                               Identifier;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            selectSource.Rule = SqlExpression() | <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>();</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            fromClauseOpt.Rule = Empty | fromClause;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            fromClause.Rule = Key(<span class="stringliteral">&quot;FROM&quot;</span>) + fromSource + joinOpt;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            fromSource.Rule = fromTableSource |</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                              fromQuerySource;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            fromTableSource.Rule = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>() + selectAsOpt;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            fromQuerySource.Rule = <span class="stringliteral">&quot;(&quot;</span> + expression + <span class="stringliteral">&quot;)&quot;</span> + selectAsOpt;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            joinOpt.Rule = Empty | join;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            join.Rule = joinType + fromSource + onOpt;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            onOpt.Rule = Empty | Key(<span class="stringliteral">&quot;ON&quot;</span>) + SqlExpression() + joinOpt;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            joinType.Rule = Key(<span class="stringliteral">&quot;INNER&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>)|</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                            Key(<span class="stringliteral">&quot;OUTER&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>) |</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                            Key(<span class="stringliteral">&quot;LEFT&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>) |</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                            Key(<span class="stringliteral">&quot;LEFT&quot;</span>) + Key(<span class="stringliteral">&quot;OUTER&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>) |</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                            Key(<span class="stringliteral">&quot;RIGHT&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>) |</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            Key(<span class="stringliteral">&quot;RIGHT&quot;</span>) + Key(<span class="stringliteral">&quot;OUTER&quot;</span>) + Key(<span class="stringliteral">&quot;JOIN&quot;</span>) |</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            Comma;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            whereClauseOpt.Rule = Empty | Key(<span class="stringliteral">&quot;WHERE&quot;</span>) + SqlExpression();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            groupByOpt.Rule = Empty | groupBy;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            groupBy.Rule = Key(<span class="stringliteral">&quot;GROUP&quot;</span>) + Key(<span class="stringliteral">&quot;BY&quot;</span>) + SqlExpressionList() + havingClauseOpt;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            havingClauseOpt.Rule = Empty | Key(<span class="stringliteral">&quot;HAVING&quot;</span>) + SqlExpression();</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            queryCompositeOpt.Rule = Empty | queryComposite;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            queryComposite.Rule = Key(<span class="stringliteral">&quot;UNION&quot;</span>) + allOpt + expression |</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                   Key(<span class="stringliteral">&quot;INTERSECT&quot;</span>) + allOpt + expression |</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                   Key(<span class="stringliteral">&quot;EXCEPT&quot;</span>) + allOpt + expression;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            allOpt.Rule = Empty | Key(<span class="stringliteral">&quot;ALL&quot;</span>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            asOpt.Rule = Empty | As;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            MarkTransient(selectSource);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">return</span> expression;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad5a37020c140b2ff1c2a0368614c3715">  291</a></span>&#160;        <span class="keyword">protected</span> NonTerminal <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad5a37020c140b2ff1c2a0368614c3715">SqlExpression</a>() {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">if</span> (sqlExpression != null)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">return</span> sqlExpression;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            sqlExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_expression&quot;</span>);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            var sqlUnaryExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_unary_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlUnaryExpressionNode.htm">SqlUnaryExpressionNode</a>));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            var sqlBinaryExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_binary_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm">SqlBinaryExpressionNode</a>));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            var sqlBetweenExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_between_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBetweenExpressionNode.htm">SqlBetweenExpressionNode</a>));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            var sqlCaseExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_case_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlCaseExpressionNode.htm">SqlCaseExpressionNode</a>));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            var sqlReferenceExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_reference_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlReferenceExpressionNode.htm">SqlReferenceExpressionNode</a>));</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            var term = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;term&quot;</span>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            var sqlSimpleExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_simple_expression&quot;</span>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            var unaryOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;unary_op&quot;</span>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            var binaryOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;binary_op&quot;</span>);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            var binaryOpSimple = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;binary_op_simple&quot;</span>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            var logicalOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;logical_op&quot;</span>);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            var subqueryOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;subquery_op&quot;</span>);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            var caseTestExpressionOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;case_test_expression_opt&quot;</span>);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            var caseWhenThenList = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;case_when_then_list&quot;</span>);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            var caseWhenThen = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;case_when_then&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1CaseSwitchNode.htm">CaseSwitchNode</a>));</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            var caseElseOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;case_else_opt&quot;</span>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            var sqlVarefExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_varef_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlVariableRefExpressionNode.htm">SqlVariableRefExpressionNode</a>));</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            var sqlConstantExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;sql_constant_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlConstantExpressionNode.htm">SqlConstantExpressionNode</a>));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            var functionCallExpression = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;function_call_expression&quot;</span>, typeof(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlFunctionCallExpressionNode.htm">SqlFunctionCallExpressionNode</a>));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            var functionCallArgsOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;function_call_args_opt&quot;</span>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            var functionCallArgsList = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;function_call_args_list&quot;</span>);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            var notOpt = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;not_opt&quot;</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            var grouped = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;grouped&quot;</span>);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            var anyOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;any_op&quot;</span>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            var allOp = <span class="keyword">new</span> NonTerminal(<span class="stringliteral">&quot;all_op&quot;</span>);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            sqlExpression.Rule = sqlSimpleExpression |</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                  sqlBetweenExpression |</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                  sqlCaseExpression |</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                  SqlQueryExpression();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            sqlConstantExpression.Rule = StringLiteral | NumberLiteral | Key(<span class="stringliteral">&quot;TRUE&quot;</span>) | Key(<span class="stringliteral">&quot;FALSE&quot;</span>) | Key(<span class="stringliteral">&quot;NULL&quot;</span>);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            sqlSimpleExpression.Rule = term  | sqlBinaryExpression | sqlUnaryExpression;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            term.Rule = sqlReferenceExpression |</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        sqlVarefExpression |</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                        sqlConstantExpression |</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        functionCallExpression |</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        grouped;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            sqlReferenceExpression.Rule = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>();</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            grouped.Rule = ImplyPrecedenceHere(30) + <span class="stringliteral">&quot;(&quot;</span> + sqlExpression + <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            sqlUnaryExpression.Rule = unaryOp + term;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            unaryOp.Rule = Key(<span class="stringliteral">&quot;NOT&quot;</span>) | <span class="stringliteral">&quot;+&quot;</span> | <span class="stringliteral">&quot;-&quot;</span> | <span class="stringliteral">&quot;~&quot;</span>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            sqlBinaryExpression.Rule = sqlSimpleExpression + binaryOp + sqlSimpleExpression;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            binaryOpSimple.Rule = ToTerm(<span class="stringliteral">&quot;+&quot;</span>) | <span class="stringliteral">&quot;-&quot;</span> | <span class="stringliteral">&quot;*&quot;</span> | <span class="stringliteral">&quot;/&quot;</span> | <span class="stringliteral">&quot;%&quot;</span> | <span class="stringliteral">&quot;&gt;&quot;</span> | <span class="stringliteral">&quot;&lt;&quot;</span> | <span class="stringliteral">&quot;=&quot;</span> | <span class="stringliteral">&quot;&lt;&gt;&quot;</span>;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            binaryOp.Rule = binaryOpSimple | allOp | anyOp | logicalOp | subqueryOp;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            logicalOp.Rule = Key(<span class="stringliteral">&quot;AND&quot;</span>) | Key(<span class="stringliteral">&quot;OR&quot;</span>) | Key(<span class="stringliteral">&quot;IS&quot;</span>) | Key(<span class="stringliteral">&quot;IS&quot;</span>) + Key(<span class="stringliteral">&quot;NOT&quot;</span>) + <span class="stringliteral">&quot;&amp;&quot;</span> | <span class="stringliteral">&quot;|&quot;</span>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            subqueryOp.Rule = Key(<span class="stringliteral">&quot;IN&quot;</span>) | Key(<span class="stringliteral">&quot;NOT&quot;</span>) + Key(<span class="stringliteral">&quot;IN&quot;</span>);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            anyOp.Rule = Key(<span class="stringliteral">&quot;ANY&quot;</span>) + binaryOpSimple;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            allOp.Rule = Key(<span class="stringliteral">&quot;ALL&quot;</span>) + binaryOpSimple;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            sqlBetweenExpression.Rule = sqlSimpleExpression + notOpt + Key(<span class="stringliteral">&quot;BETWEEN&quot;</span>) + sqlSimpleExpression + Key(<span class="stringliteral">&quot;AND&quot;</span>) +</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                        sqlSimpleExpression;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            sqlCaseExpression.Rule = Key(<span class="stringliteral">&quot;CASE&quot;</span>) + caseTestExpressionOpt + caseWhenThenList + caseElseOpt + Key(<span class="stringliteral">&quot;END&quot;</span>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            caseTestExpressionOpt.Rule = Empty | sqlExpression;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            caseElseOpt.Rule = Empty | Key(<span class="stringliteral">&quot;ELSE&quot;</span>) + sqlExpression;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            caseWhenThenList.Rule = MakePlusRule(caseWhenThenList, caseWhenThen);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            caseWhenThen.Rule = Key(<span class="stringliteral">&quot;WHEN&quot;</span>) + sqlExpression + Key(<span class="stringliteral">&quot;THEN&quot;</span>) + sqlExpression;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            functionCallExpression.Rule = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>() + functionCallArgsOpt;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            functionCallArgsOpt.Rule = Empty | <span class="stringliteral">&quot;(&quot;</span> + functionCallArgsList + <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            functionCallArgsList.Rule = MakeStarRule(functionCallArgsList, Comma, sqlExpression);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            sqlVarefExpression.Rule = Colon + Identifier;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            notOpt.Rule = Empty | Key(<span class="stringliteral">&quot;NOT&quot;</span>);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            MarkTransient(sqlExpression, term, sqlSimpleExpression, grouped, functionCallArgsOpt);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            binaryOp.SetFlag(TermFlags.InheritPrecedence);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            binaryOpSimple.SetFlag(TermFlags.InheritPrecedence);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            logicalOp.SetFlag(TermFlags.InheritPrecedence);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            subqueryOp.SetFlag(TermFlags.InheritPrecedence);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            unaryOp.SetFlag(TermFlags.InheritPrecedence);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">return</span> sqlExpression;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_ab937ee2154f8c90f812c2a1f26a368d2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab937ee2154f8c90f812c2a1f26a368d2">Deveel.Data.Sql.Parser.SqlGrammarBase.SqlGrammarBase</a></div><div class="ttdeci">SqlGrammarBase()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00028">SqlGrammarBase.cs:28</a></div></div>
<div class="ttc" id="namespaceIrony_htm"><div class="ttname"><a href="namespaceIrony.htm">Irony</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a92540e5dece588d0f31b6e9be82fa92b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a92540e5dece588d0f31b6e9be82fa92b">Deveel.Data.Sql.Parser.SqlGrammarBase.datatype</a></div><div class="ttdeci">NonTerminal datatype</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00026">SqlGrammarBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1CaseSwitchNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1CaseSwitchNode.htm">Deveel.Data.Sql.Parser.CaseSwitchNode</a></div><div class="ttdoc">The node that represents a switch in a CASE expression </div><div class="ttdef"><b>Definition:</b> <a href="CaseSwitchNode_8cs_source.htm#l00024">CaseSwitchNode.cs:24</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_ab86787c107d7524e77bbb6ed4cd5351c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ab86787c107d7524e77bbb6ed4cd5351c">Deveel.Data.Sql.Parser.SqlGrammarBase.Keywords</a></div><div class="ttdeci">virtual void Keywords()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00113">SqlGrammarBase.cs:113</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IdentifierNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IdentifierNode.htm">Deveel.Data.Sql.Parser.IdentifierNode</a></div><div class="ttdoc">This is a simple identifier within a SQL grammar. </div><div class="ttdef"><b>Definition:</b> <a href="IdentifierNode_8cs_source.htm#l00028">IdentifierNode.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a7146cc723c81c9d3773fe092f7f71337"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146cc723c81c9d3773fe092f7f71337">Deveel.Data.Sql.Parser.SqlGrammarBase.Literals</a></div><div class="ttdeci">void Literals()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00060">SqlGrammarBase.cs:60</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a7146c832aa0fc1d12dd4933f336e0673"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a7146c832aa0fc1d12dd4933f336e0673">Deveel.Data.Sql.Parser.SqlGrammarBase.ReservedWords</a></div><div class="ttdeci">virtual void ReservedWords()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00117">SqlGrammarBase.cs:117</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_ad5a37020c140b2ff1c2a0368614c3715"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad5a37020c140b2ff1c2a0368614c3715">Deveel.Data.Sql.Parser.SqlGrammarBase.SqlExpression</a></div><div class="ttdeci">NonTerminal SqlExpression()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00291">SqlGrammarBase.cs:291</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1ObjectNameNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1ObjectNameNode.htm">Deveel.Data.Sql.Parser.ObjectNameNode</a></div><div class="ttdoc">Represents a composed name for an object within the system. </div><div class="ttdef"><b>Definition:</b> <a href="ObjectNameNode_8cs_source.htm#l00032">ObjectNameNode.cs:32</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a8d4ea87190e59d18c5deb7ef2ea7b1f7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a8d4ea87190e59d18c5deb7ef2ea7b1f7">Deveel.Data.Sql.Parser.SqlGrammarBase.SqlExpressionList</a></div><div class="ttdeci">NonTerminal SqlExpressionList()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00208">SqlGrammarBase.cs:208</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_af29bdc9da091d64c11ea9092df5cd5b0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#af29bdc9da091d64c11ea9092df5cd5b0">Deveel.Data.Sql.Parser.SqlGrammarBase.sqlExpression</a></div><div class="ttdeci">NonTerminal sqlExpression</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00024">SqlGrammarBase.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlUnaryExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlUnaryExpressionNode.htm">Deveel.Data.Sql.Parser.SqlUnaryExpressionNode</a></div><div class="ttdoc">An expression that encapsulates a unary operator for a given operand. </div><div class="ttdef"><b>Definition:</b> <a href="SqlUnaryExpressionNode_8cs_source.htm#l00025">SqlUnaryExpressionNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBetweenExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBetweenExpressionNode.htm">Deveel.Data.Sql.Parser.SqlBetweenExpressionNode</a></div><div class="ttdoc">An SQL BETWEEN expression node that evaluates to true if the Expression given is between MinValue (in...</div><div class="ttdef"><b>Definition:</b> <a href="SqlBetweenExpressionNode_8cs_source.htm#l00026">SqlBetweenExpressionNode.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1ObjectName_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">Deveel.Data.Sql.ObjectName</a></div><div class="ttdoc">Describes the name of an object within a database. </div><div class="ttdef"><b>Definition:</b> <a href="ObjectName_8cs_source.htm#l00044">ObjectName.cs:44</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromClauseNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromClauseNode.htm">Deveel.Data.Sql.Parser.FromClauseNode</a></div><div class="ttdoc">The node in an SQL query that defines the sources from which to retrieve the data queried...</div><div class="ttdef"><b>Definition:</b> <a href="FromClauseNode_8cs_source.htm#l00026">FromClauseNode.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromQuerySourceNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromQuerySourceNode.htm">Deveel.Data.Sql.Parser.FromQuerySourceNode</a></div><div class="ttdoc">A node in the grammar tree that defines a sub-query in a FROM clause. </div><div class="ttdef"><b>Definition:</b> <a href="FromQuerySourceNode_8cs_source.htm#l00026">FromQuerySourceNode.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1NumberLiteralNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1NumberLiteralNode.htm">Deveel.Data.Sql.Parser.NumberLiteralNode</a></div><div class="ttdoc">Handles a numeric literal value, belonging to a wider group than integer numbers, spanning from real ...</div><div class="ttdef"><b>Definition:</b> <a href="NumerLiteralNode_8cs_source.htm#l00028">NumerLiteralNode.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm">Deveel.Data.Sql.Parser.SqlGrammarBase</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00022">SqlGrammarBase.cs:22</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a2b4c6a59b503587a5eedb0bddffe8838"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2b4c6a59b503587a5eedb0bddffe8838">Deveel.Data.Sql.Parser.SqlGrammarBase.Operators</a></div><div class="ttdeci">void Operators()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00074">SqlGrammarBase.cs:74</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromTableSourceNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1FromTableSourceNode.htm">Deveel.Data.Sql.Parser.FromTableSourceNode</a></div><div class="ttdoc">Represents the node that is a database table as source of a query. </div><div class="ttdef"><b>Definition:</b> <a href="FromTableSourceNode_8cs_source.htm#l00025">FromTableSourceNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlQueryExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlQueryExpressionNode.htm">Deveel.Data.Sql.Parser.SqlQueryExpressionNode</a></div><div class="ttdoc">The root node of an expression used to select a set of items from a set of sources defined...</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpressionNode_8cs_source.htm#l00026">SqlQueryExpressionNode.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlReferenceExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlReferenceExpressionNode.htm">Deveel.Data.Sql.Parser.SqlReferenceExpressionNode</a></div><div class="ttdoc">An expression node that references an object within the database context (such as a table...</div><div class="ttdef"><b>Definition:</b> <a href="SqlReferenceExpressionNode_8cs_source.htm#l00024">SqlReferenceExpressionNode.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a4ec575b8f41f9f53db1a305dbde0b31a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a4ec575b8f41f9f53db1a305dbde0b31a">Deveel.Data.Sql.Parser.SqlGrammarBase.MakeSimpleId</a></div><div class="ttdeci">void MakeSimpleId()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00066">SqlGrammarBase.cs:66</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1StringLiteralNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1StringLiteralNode.htm">Deveel.Data.Sql.Parser.StringLiteralNode</a></div><div class="ttdoc">A node containing a constant literal string passed within an SQL command. </div><div class="ttdef"><b>Definition:</b> <a href="StringLiteralNode_8cs_source.htm#l00025">StringLiteralNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlVariableRefExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlVariableRefExpressionNode.htm">Deveel.Data.Sql.Parser.SqlVariableRefExpressionNode</a></div><div class="ttdoc">References a variable within a SQL execution context. </div><div class="ttdef"><b>Definition:</b> <a href="SqlVariableRefExpressionNode_8cs_source.htm#l00023">SqlVariableRefExpressionNode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SelectItemNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SelectItemNode.htm">Deveel.Data.Sql.Parser.SelectItemNode</a></div><div class="ttdoc">A single item selected within a query node tree. </div><div class="ttdef"><b>Definition:</b> <a href="SelectItemNode_8cs_source.htm#l00024">SelectItemNode.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a1daa718b544a6900c341acafa797594c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a1daa718b544a6900c341acafa797594c">Deveel.Data.Sql.Parser.SqlGrammarBase.Comments</a></div><div class="ttdeci">void Comments()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00053">SqlGrammarBase.cs:53</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a071ccc33e79434d233434dc008b221b6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a071ccc33e79434d233434dc008b221b6">Deveel.Data.Sql.Parser.SqlGrammarBase.SqlQueryExpression</a></div><div class="ttdeci">NonTerminal SqlQueryExpression()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00214">SqlGrammarBase.cs:214</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeMetaNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeMetaNode.htm">Deveel.Data.Sql.Parser.DataTypeMetaNode</a></div><div class="ttdef"><b>Definition:</b> <a href="DataTypeMetaNode_8cs_source.htm#l00020">DataTypeMetaNode.cs:20</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1JoinNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1JoinNode.htm">Deveel.Data.Sql.Parser.JoinNode</a></div><div class="ttdoc">A node describing the JOIN between two sources within a query. </div><div class="ttdef"><b>Definition:</b> <a href="Deveel_8Data_8Sql_8Parser_2JoinNode_8cs_source.htm#l00029">JoinNode.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a2ae88dbf338ac38961efa95dc3f5cd92"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a2ae88dbf338ac38961efa95dc3f5cd92">Deveel.Data.Sql.Parser.SqlGrammarBase.ObjectName</a></div><div class="ttdeci">NonTerminal ObjectName()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00121">SqlGrammarBase.cs:121</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_ad208eef98f4305948f795a35e0eedfb0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#ad208eef98f4305948f795a35e0eedfb0">Deveel.Data.Sql.Parser.SqlGrammarBase.objectname</a></div><div class="ttdeci">NonTerminal objectname</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00025">SqlGrammarBase.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1GroupByNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1GroupByNode.htm">Deveel.Data.Sql.Parser.GroupByNode</a></div><div class="ttdoc">A node that describes the GROUP BY clause in a SQL query. </div><div class="ttdef"><b>Definition:</b> <a href="GroupByNode_8cs_source.htm#l00025">GroupByNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlConstantExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlConstantExpressionNode.htm">Deveel.Data.Sql.Parser.SqlConstantExpressionNode</a></div><div class="ttdoc">An node that represents a constant value set within a context of an SQL command. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpressionNode_8cs_source.htm#l00026">SqlConstantExpressionNode.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a91a64ffe32f048bf8b00b8aea49b76c6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a91a64ffe32f048bf8b00b8aea49b76c6">Deveel.Data.Sql.Parser.SqlGrammarBase.SetupGrammar</a></div><div class="ttdeci">void SetupGrammar()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00085">SqlGrammarBase.cs:85</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1DataTypeNode.htm">Deveel.Data.Sql.Parser.DataTypeNode</a></div><div class="ttdoc">Describes the information of a data type as found in a SQL string. </div><div class="ttdef"><b>Definition:</b> <a href="DataTypeNode_8cs_source.htm#l00028">DataTypeNode.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1QueryCompositeNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1QueryCompositeNode.htm">Deveel.Data.Sql.Parser.QueryCompositeNode</a></div><div class="ttdoc">Composes two queries to obtain a set that is the result of a given composition function. </div><div class="ttdef"><b>Definition:</b> <a href="QueryCompositeNode_8cs_source.htm#l00024">QueryCompositeNode.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode</a></div><div class="ttdoc">Represents an expression that evaluates between two other expressions. </div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00025">SqlBinaryExpressionNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a5806c1c2cd82e427830e1e6a9f67ddce"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a5806c1c2cd82e427830e1e6a9f67ddce">Deveel.Data.Sql.Parser.SqlGrammarBase.DataType</a></div><div class="ttdeci">NonTerminal DataType()</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00130">SqlGrammarBase.cs:130</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlFunctionCallExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlFunctionCallExpressionNode.htm">Deveel.Data.Sql.Parser.SqlFunctionCallExpressionNode</a></div><div class="ttdoc">A node in a SQL command tree that is used to request a function. </div><div class="ttdef"><b>Definition:</b> <a href="SqlFunctionCallExpressionNode_8cs_source.htm#l00024">SqlFunctionCallExpressionNode.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase_htm_a120d6e4b2982c01ae2b284610bd1493d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlGrammarBase.htm#a120d6e4b2982c01ae2b284610bd1493d">Deveel.Data.Sql.Parser.SqlGrammarBase.Key</a></div><div class="ttdeci">KeyTerm Key(string term)</div><div class="ttdef"><b>Definition:</b> <a href="SqlGrammarBase_8cs_source.htm#l00105">SqlGrammarBase.cs:105</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IntegerLiteralNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1IntegerLiteralNode.htm">Deveel.Data.Sql.Parser.IntegerLiteralNode</a></div><div class="ttdoc">Encapsulates a number that is any falling in the group of integers. </div><div class="ttdef"><b>Definition:</b> <a href="IntegerLiteralNode_8cs_source.htm#l00030">IntegerLiteralNode.cs:30</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlCaseExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlCaseExpressionNode.htm">Deveel.Data.Sql.Parser.SqlCaseExpressionNode</a></div><div class="ttdoc">An SQL node describing an in-line CASE conditional expression. </div><div class="ttdef"><b>Definition:</b> <a href="SqlCaseExpressionNode_8cs_source.htm#l00025">SqlCaseExpressionNode.cs:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
