<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Text.PatternSearch Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Text.htm">Text</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm">PatternSearch</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Text.PatternSearch Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is a static class that performs the operations to do a pattern search on a given column of a table.  
 <a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:abfdce6e3cf7fefd107f9e87d68778938"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">IsWildCard</a> (char ch)</td></tr>
<tr class="memdesc:abfdce6e3cf7fefd107f9e87d68778938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the given character is a wild card (unknown).  <a href="#abfdce6e3cf7fefd107f9e87d68778938">More...</a><br /></td></tr>
<tr class="separator:abfdce6e3cf7fefd107f9e87d68778938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a868442691a1169a294f7fbcd67f0feee"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a868442691a1169a294f7fbcd67f0feee">FullPatternMatch</a> (string pattern, string str, char escapeChar)</td></tr>
<tr class="memdesc:a868442691a1169a294f7fbcd67f0feee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matches a pattern against a string and returns true if it matches or false otherwise.  <a href="#a868442691a1169a294f7fbcd67f0feee">More...</a><br /></td></tr>
<tr class="separator:a868442691a1169a294f7fbcd67f0feee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed33226a41a4d06ff2764611e736fa7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">PatternMatch</a> (string pattern, string expression, char escapeChar)</td></tr>
<tr class="memdesc:a9ed33226a41a4d06ff2764611e736fa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the pattern match recurrsive method.  <a href="#a9ed33226a41a4d06ff2764611e736fa7">More...</a><br /></td></tr>
<tr class="separator:a9ed33226a41a4d06ff2764611e736fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ad6d0602fa9de97ff42ae2e10406f7143"><td class="memItemLeft" align="right" valign="top">const char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#ad6d0602fa9de97ff42ae2e10406f7143">ZeroOrMoreChars</a> = '%'</td></tr>
<tr class="separator:ad6d0602fa9de97ff42ae2e10406f7143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac1a084f67609fe3cc6bc8d816561037"><td class="memItemLeft" align="right" valign="top">const char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#aac1a084f67609fe3cc6bc8d816561037">OneChar</a> = '_'</td></tr>
<tr class="separator:aac1a084f67609fe3cc6bc8d816561037"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is a static class that performs the operations to do a pattern search on a given column of a table. </p>
<p>The pattern syntax is very simple and follows that of the SQL standard. </p>
<p>It works as follows: The '' character represents any sequence of characters. The '_' character represents some character. </p>
<p>Therefore, the pattern search <code>Anto%</code> will find all rows that start with the string <code>Anto</code> and end with any sequence of characters. The pattern <code>A% Proven%</code> will find all names starting with <em>A</em> and containing <em>Proven</em> somewhere in the end. The pattern <em>_at</em> will find all three letter words ending with <em>at</em>. </p>
<p><b>Note</b> A <code>ab%</code> type search is faster than a <code>bc</code> type search. If the start of the search pattern is unknown then the entire contents of the column need to be accessed. </p>

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00045">45</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a868442691a1169a294f7fbcd67f0feee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Text.PatternSearch.FullPatternMatch </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>escapeChar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Matches a pattern against a string and returns true if it matches or false otherwise. </p>
<p>This matches patterns that do not necessarily start with a wild card unlike the <a class="el" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7" title="This is the pattern match recurrsive method. ">PatternMatch</a> method. </p>

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00067">67</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                                                                         {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            StringBuilder start = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a> rezt = null;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordtype">int</span> len = pattern.Length;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordtype">bool</span> lastEscapeChar = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">for</span> (; i &lt; len &amp;&amp; rezt == null; ++i) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordtype">char</span> c = pattern[i];</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordflow">if</span> (lastEscapeChar) {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    lastEscapeChar = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    start.Append(c);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c == escapeChar) {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    lastEscapeChar = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">IsWildCard</a>(c)) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    rezt = pattern.Substring(i);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    start.Append(c);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">if</span> (rezt == null)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                rezt = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordtype">string</span> st = start.ToString();</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">if</span> (str.StartsWith(st)) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordtype">string</span> strRezt = str.Substring(st.Length); <span class="comment">// (i)</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">return</span> rezt.Length &gt; 0 ? <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">PatternMatch</a>(rezt, strRezt, escapeChar) : strRezt.Length == 0;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_a9ed33226a41a4d06ff2764611e736fa7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">Deveel.Data.Text.PatternSearch.PatternMatch</a></div><div class="ttdeci">static bool PatternMatch(string pattern, string expression, char escapeChar)</div><div class="ttdoc">This is the pattern match recurrsive method. </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00129">PatternSearch.cs:129</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_abfdce6e3cf7fefd107f9e87d68778938"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">Deveel.Data.Text.PatternSearch.IsWildCard</a></div><div class="ttdeci">static bool IsWildCard(char ch)</div><div class="ttdoc">Returns true if the given character is a wild card (unknown). </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00055">PatternSearch.cs:55</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abfdce6e3cf7fefd107f9e87d68778938"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Text.PatternSearch.IsWildCard </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the given character is a wild card (unknown). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ch</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00055">55</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                               {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">return</span> (ch == <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#aac1a084f67609fe3cc6bc8d816561037">OneChar</a> || ch == <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#ad6d0602fa9de97ff42ae2e10406f7143">ZeroOrMoreChars</a>);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_aac1a084f67609fe3cc6bc8d816561037"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#aac1a084f67609fe3cc6bc8d816561037">Deveel.Data.Text.PatternSearch.OneChar</a></div><div class="ttdeci">const char OneChar</div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00048">PatternSearch.cs:48</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_ad6d0602fa9de97ff42ae2e10406f7143"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#ad6d0602fa9de97ff42ae2e10406f7143">Deveel.Data.Text.PatternSearch.ZeroOrMoreChars</a></div><div class="ttdeci">const char ZeroOrMoreChars</div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00047">PatternSearch.cs:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9ed33226a41a4d06ff2764611e736fa7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Text.PatternSearch.PatternMatch </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>expression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>escapeChar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This is the pattern match recurrsive method. </p>
<p>It recurses on each wildcard expression in the pattern which makes for slightly better efficiency than a character recurse algorithm. However, patterns such as <code>__a</code> will result in many recursive calls. </p>
<p><b>Note</b> That <code>__</code> will be less efficient than <code>__%</code> and will produce the same result. </p>
<p><b>Note</b> It requires that a wild card character is the first character in the expression. </p>
<p><b>Issue</b> Pattern optimiser, we should optimize wild cards of type <code>__</code> to <code>__%</code>, or <code>____%</code> to <code>____%</code>. Optimised forms are identical in result and more efficient. This optimization could be performed by the client during parsing of the <em>LIKE</em> statement. </p>
<p><b>Hacking Issue</b> Badly formed wild cards may result in hogging of server side resources. </p>

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00129">129</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                                                                            {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">// Look at first character in pattern, if it&#39;s a ONE_CHAR wildcard then</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="comment">// check expression and pattern match until next wild card.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">if</span> (pattern[0] == <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#aac1a084f67609fe3cc6bc8d816561037">OneChar</a>) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="comment">// Else step through each character in pattern and see if it matches up</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="comment">// with the expression until a wild card is found or the end is reached.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="comment">// When the end of the pattern is reached, &#39;finished&#39; is set to true.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keywordtype">int</span> i = 1;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordtype">bool</span> finished = (i &gt;= pattern.Length || expression.Length &lt; 1);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordtype">bool</span> lastWasEscape = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordtype">int</span> checkd = 0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">while</span> (!finished) {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keywordtype">char</span> c = pattern[i];</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="keywordflow">if</span> (!lastWasEscape &amp;&amp; c == escapeChar) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        lastWasEscape = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        <span class="keywordflow">if</span> (i &gt;= expression.Length) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        ++i;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lastWasEscape || !<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">IsWildCard</a>(c)) {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        lastWasEscape = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        <span class="comment">// If expression and pattern character doesn&#39;t match or end of</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <span class="comment">// expression reached, search has failed.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="keywordflow">if</span> (i &gt;= expression.Length || c != expression[i]) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        ++i;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        ++checkd;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        <span class="comment">// found a wildcard, so recurse on this wildcard</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">PatternMatch</a>(pattern.Substring(i), expression.Substring(i), escapeChar);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    finished = (i &gt;= pattern.Length);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="comment">// The pattern length minus any escaped characters</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordtype">int</span> realPatternLength = 0;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordtype">int</span> sz = pattern.Length;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; sz; ++n) {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">if</span> (pattern[n] != escapeChar) {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        ++realPatternLength;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        ++n;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="comment">// If pattern and expression lengths match then we have walked through</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="comment">// the expression and found a match, otherwise no match.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">return</span> realPatternLength == expression.Length;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// Therefore we are doing a ZERO_OR_MORE_CHARS wildcard check.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="comment">// If the pattern is &#39;%&#39; (ie. pattern.Length == 1 because it&#39;s only 1</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// character in length (the &#39;%&#39; character)) then it doesn&#39;t matter what the</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">// expression is, we have found a match.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">if</span> (pattern.Length == 1)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="comment">// Look at following character in pattern, and extract all the characters</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="comment">// before the next wild card.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            var nextString = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordtype">int</span> i1 = 1;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordtype">bool</span> finished1 = (i1 &gt;= pattern.Length);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordtype">bool</span> lastWasEscape1 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">while</span> (!finished1) {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordtype">char</span> nextChar = pattern[i1];</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">if</span> (!lastWasEscape1 &amp;&amp; nextChar == escapeChar) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    lastWasEscape1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    ++i1;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="keywordflow">if</span> (i1 &gt;= pattern.Length) {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                        finished1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lastWasEscape1 || !<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">IsWildCard</a>(nextChar)) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    lastWasEscape1 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    nextString.Append(nextChar);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    ++i1;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">if</span> (i1 &gt;= pattern.Length) {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        finished1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    finished1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordtype">string</span> findString = nextString.ToString();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="comment">// Special case optimisation if we have found the end of the pattern, all</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="comment">// we need to do is check if &#39;find_string&#39; is on the end of the expression.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="comment">// eg. pattern = &quot;%er&quot;, will have a &#39;find_string&#39; of &quot;er&quot; and it is saying</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="comment">// &#39;does the expression end with &#39;er&#39;&#39;.</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span> (i1 &gt;= pattern.Length)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordflow">return</span> (expression.EndsWith(findString));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="comment">// Otherwise we must have finished with another wild card.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="comment">// Try and find &#39;next_string&#39; in the expression.  If its found then</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="comment">// recurse over the next pattern.</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordtype">int</span> findStrLength = findString.Length;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordtype">int</span> strIndex = expression.IndexOf(findString, 0);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">while</span> (strIndex != -1) {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordtype">bool</span> matched = <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">PatternMatch</a>(</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                pattern.Substring(1 + findStrLength),</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                expression.Substring(strIndex + findStrLength),</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                escapeChar);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">if</span> (matched)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                strIndex = expression.IndexOf(findString, strIndex + 1);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_aac1a084f67609fe3cc6bc8d816561037"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#aac1a084f67609fe3cc6bc8d816561037">Deveel.Data.Text.PatternSearch.OneChar</a></div><div class="ttdeci">const char OneChar</div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00048">PatternSearch.cs:48</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_a9ed33226a41a4d06ff2764611e736fa7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">Deveel.Data.Text.PatternSearch.PatternMatch</a></div><div class="ttdeci">static bool PatternMatch(string pattern, string expression, char escapeChar)</div><div class="ttdoc">This is the pattern match recurrsive method. </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00129">PatternSearch.cs:129</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_abfdce6e3cf7fefd107f9e87d68778938"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">Deveel.Data.Text.PatternSearch.IsWildCard</a></div><div class="ttdeci">static bool IsWildCard(char ch)</div><div class="ttdoc">Returns true if the given character is a wild card (unknown). </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00055">PatternSearch.cs:55</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="aac1a084f67609fe3cc6bc8d816561037"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char Deveel.Data.Text.PatternSearch.OneChar = '_'</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00048">48</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ad6d0602fa9de97ff42ae2e10406f7143"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char Deveel.Data.Text.PatternSearch.ZeroOrMoreChars = '%'</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="PatternSearch_8cs_source.htm#l00047">47</a> of file <a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Text/<a class="el" href="PatternSearch_8cs_source.htm">PatternSearch.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
