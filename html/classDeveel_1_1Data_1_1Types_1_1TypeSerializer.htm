<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Types.TypeSerializer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Types.htm">Types</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm">TypeSerializer</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Types.TypeSerializer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af4e1af3879f04eec02583b2909e337c0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#af4e1af3879f04eec02583b2909e337c0">SerializeTo</a> (BinaryWriter writer, <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a> type)</td></tr>
<tr class="separator:af4e1af3879f04eec02583b2909e337c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0cc9e27239dfb8486e8bec1cc958fe5"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#ae0cc9e27239dfb8486e8bec1cc958fe5">SerializeTo</a> (Stream stream, <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a> type)</td></tr>
<tr class="separator:ae0cc9e27239dfb8486e8bec1cc958fe5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3952a3f93d1aa17d914f9d397033709f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#a3952a3f93d1aa17d914f9d397033709f">Deserialize</a> (BinaryReader reader, <a class="el" href="interfaceDeveel_1_1Data_1_1Types_1_1ITypeResolver.htm">ITypeResolver</a> resolver)</td></tr>
<tr class="separator:a3952a3f93d1aa17d914f9d397033709f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adffdb959fdb75862f298197bf49cf360"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#adffdb959fdb75862f298197bf49cf360">Deserialize</a> (Stream stream, <a class="el" href="interfaceDeveel_1_1Data_1_1Types_1_1ITypeResolver.htm">ITypeResolver</a> typeResolver)</td></tr>
<tr class="separator:adffdb959fdb75862f298197bf49cf360"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="TypeSerializer_8cs_source.htm#l00025">25</a> of file <a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a3952a3f93d1aa17d914f9d397033709f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a> Deveel.Data.Types.TypeSerializer.Deserialize </td>
          <td>(</td>
          <td class="paramtype">BinaryReader&#160;</td>
          <td class="paramname"><em>reader</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Types_1_1ITypeResolver.htm">ITypeResolver</a>&#160;</td>
          <td class="paramname"><em>resolver</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TypeSerializer_8cs_source.htm#l00075">75</a> of file <a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                                                                       {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            var typeCode = (<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>)reader.ReadByte();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">if</span> (BooleanType.IsBooleanType(typeCode))</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.Boolean(typeCode);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">if</span> (IntervalType.IsIntervalType(typeCode))</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.Interval(typeCode);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span> (DateType.IsDateType(typeCode))</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.DateTime(typeCode);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">if</span> (StringType.IsStringType(typeCode)) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                var maxSize = reader.ReadInt32();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                CultureInfo locale = null;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                var hasLocale = reader.ReadByte() == 1;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">if</span> (hasLocale) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    var name = reader.ReadString();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    locale = <span class="keyword">new</span> CultureInfo(name);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="comment">// TODO: Get the encoding from the serialization...</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.String(typeCode, maxSize, Encoding.Unicode, locale);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">if</span> (NumericType.IsNumericType(typeCode)) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                var size = reader.ReadInt32();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                var scale = reader.ReadByte();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.Numeric(typeCode, size, scale);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span> (BinaryType.IsBinaryType(typeCode)) {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                var size = reader.ReadInt32();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.Binary(typeCode, size);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">if</span> (typeCode == <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Type) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="comment">// TODO:</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span> (typeCode == <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.QueryPlan)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> QueryType();</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">if</span> (typeCode == <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Array) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                var size = reader.ReadInt32();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> ArrayType(size);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">if</span> (typeCode == <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Null)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">return</span> PrimitiveTypes.Null();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException();          </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adffdb959fdb75862f298197bf49cf360"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a> Deveel.Data.Types.TypeSerializer.Deserialize </td>
          <td>(</td>
          <td class="paramtype">Stream&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Types_1_1ITypeResolver.htm">ITypeResolver</a>&#160;</td>
          <td class="paramname"><em>typeResolver</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TypeSerializer_8cs_source.htm#l00130">130</a> of file <a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                                                                     {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            var reader = <span class="keyword">new</span> BinaryReader(stream, Encoding.Unicode);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#a3952a3f93d1aa17d914f9d397033709f">Deserialize</a>(reader, typeResolver);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1TypeSerializer_htm_a3952a3f93d1aa17d914f9d397033709f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#a3952a3f93d1aa17d914f9d397033709f">Deveel.Data.Types.TypeSerializer.Deserialize</a></div><div class="ttdeci">static SqlType Deserialize(BinaryReader reader, ITypeResolver resolver)</div><div class="ttdef"><b>Definition:</b> <a href="TypeSerializer_8cs_source.htm#l00075">TypeSerializer.cs:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af4e1af3879f04eec02583b2909e337c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Deveel.Data.Types.TypeSerializer.SerializeTo </td>
          <td>(</td>
          <td class="paramtype">BinaryWriter&#160;</td>
          <td class="paramname"><em>writer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TypeSerializer_8cs_source.htm#l00026">26</a> of file <a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                                                          {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            writer.Write((byte) type.TypeCode);</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keywordflow">if</span> (type.IsPrimitive) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                <span class="keywordflow">if</span> (type is NumericType) {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                    var numericType = (NumericType) type;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                    writer.Write(numericType.Size);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                    writer.Write(numericType.Scale);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is StringType) {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                    var stringType = (StringType) type;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                    writer.Write(stringType.MaxSize);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                    <span class="keywordflow">if</span> (stringType.Locale != null) {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                        writer.Write((byte) 1);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                        writer.Write(stringType.Locale.Name);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                        writer.Write((byte) 0);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is BinaryType) {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                    var binaryType = (BinaryType) type;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    writer.Write(binaryType.MaxSize);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is BooleanType ||</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                           type is IntervalType ||</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                           type is DateType ||</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                           type is NullType) {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    <span class="comment">// nothing to add to the SQL Type Code</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The data type &#39;{0}&#39; cannot be serialized.&quot;</span>, type.GetType().FullName));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is UserType) {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                var userType = (UserType) type;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                writer.Write((byte) 1); <span class="comment">// The code of custom type</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                writer.Write(userType.FullName.FullName);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is QueryType) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="comment">// nothing to do for the Query Type here</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type is ArrayType) {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                var arrayType = (ArrayType) type;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                writer.Write(arrayType.Length);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae0cc9e27239dfb8486e8bec1cc958fe5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Deveel.Data.Types.TypeSerializer.SerializeTo </td>
          <td>(</td>
          <td class="paramtype">Stream&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm">SqlType</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TypeSerializer_8cs_source.htm#l00070">70</a> of file <a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                                    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            var writer = <span class="keyword">new</span> BinaryWriter(stream, Encoding.Unicode);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#af4e1af3879f04eec02583b2909e337c0">SerializeTo</a>(writer, type);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1TypeSerializer_htm_af4e1af3879f04eec02583b2909e337c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1TypeSerializer.htm#af4e1af3879f04eec02583b2909e337c0">Deveel.Data.Types.TypeSerializer.SerializeTo</a></div><div class="ttdeci">static void SerializeTo(BinaryWriter writer, SqlType type)</div><div class="ttdef"><b>Definition:</b> <a href="TypeSerializer_8cs_source.htm#l00026">TypeSerializer.cs:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Types/<a class="el" href="TypeSerializer_8cs_source.htm">TypeSerializer.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
