<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Sql.Query.QueryPlanner Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Query.htm">Query</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm">QueryPlanner</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Sql.Query.QueryPlanner Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for Deveel.Data.Sql.Query.QueryPlanner:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.png" usemap="#Deveel.Data.Sql.Query.QueryPlanner_map" alt=""/>
  <map id="Deveel.Data.Sql.Query.QueryPlanner_map" name="Deveel.Data.Sql.Query.QueryPlanner_map">
<area href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanner.htm" alt="Deveel.Data.Sql.Query.IQueryPlanner" shape="rect" coords="0,0,230,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_1_1GroupInfo.htm">GroupInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_1_1QueryExpressionPreparer.htm">QueryExpressionPreparer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_1_1VariableReplacer.htm">VariableReplacer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8e9d841a56e6ecb9d6dccc6267474714"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">PlanQuery</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryInfo.htm">QueryInfo</a> queryInfo)</td></tr>
<tr class="separator:a8e9d841a56e6ecb9d6dccc6267474714"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a64b7215f33b29288fd705b2dfd83bdb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a64b7215f33b29288fd705b2dfd83bdb0">PrepareSearchExpression</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:a64b7215f33b29288fd705b2dfd83bdb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae329f40ecfefa0fa45e678ddade9e141"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QuerySelectColumns.htm">QuerySelectColumns</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae329f40ecfefa0fa45e678ddade9e141">BuildSelectColumns</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a> expression, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom)</td></tr>
<tr class="separator:ae329f40ecfefa0fa45e678ddade9e141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2ce5638af504d9a5ac91d2a74721cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a9a2ce5638af504d9a5ac91d2a74721cc">PlanGroup</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> node, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_1_1GroupInfo.htm">GroupInfo</a> groupInfo)</td></tr>
<tr class="separator:a9a2ce5638af504d9a5ac91d2a74721cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5982dacfe57dd40bbfd2819050a4f04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5982dacfe57dd40bbfd2819050a4f04">CreateTablePlanner</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom)</td></tr>
<tr class="separator:ac5982dacfe57dd40bbfd2819050a4f04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a361f8279ce11664ac0cec79e5d5dd348"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a361f8279ce11664ac0cec79e5d5dd348">PrepareJoins</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a> tablePlanner, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a> queryExpression, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom, ref <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> searchExpression)</td></tr>
<tr class="separator:a361f8279ce11664ac0cec79e5d5dd348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a993fdf803effe4c97d692c3175f8c5af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">FilterHaving</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> havingExpression, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt; aggregates, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context)</td></tr>
<tr class="separator:a993fdf803effe4c97d692c3175f8c5af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d4273eb9f7da5510407bc6a736fca3d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a0d4273eb9f7da5510407bc6a736fca3d">ResolveGroupBy</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a> queryExpression, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, out <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] columnNames, out IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt; expressions)</td></tr>
<tr class="separator:a0d4273eb9f7da5510407bc6a736fca3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa61611228b4eac395e0ad3cb6a9a2eaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#aa61611228b4eac395e0ad3cb6a9a2eaa">ResolveGroupMax</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a> queryExpression, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom)</td></tr>
<tr class="separator:aa61611228b4eac395e0ad3cb6a9a2eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06914f16d3a1719c2a3451de2178e973"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a06914f16d3a1719c2a3451de2178e973">EvaluateToSingle</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a> columns)</td></tr>
<tr class="separator:a06914f16d3a1719c2a3451de2178e973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e240773ff62560af8e67d2318959888"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a0e240773ff62560af8e67d2318959888">PlanQuery</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a> queryExpression, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt; sortColumns, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1QueryLimit.htm">QueryLimit</a> limit)</td></tr>
<tr class="separator:a0e240773ff62560af8e67d2318959888"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:ac5c7cd7fd859fd7b8b0b74ca60f9722b"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5c7cd7fd859fd7b8b0b74ca60f9722b">MakeupFunctions</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a> columnSet, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt; aggregateFunctions, out <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[] defFunList, out string[] defFunNames)</td></tr>
<tr class="separator:ac5c7cd7fd859fd7b8b0b74ca60f9722b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a13370c683380d559f4c133dbb163b4"><td class="memItemLeft" align="right" valign="top">static IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8a13370c683380d559f4c133dbb163b4">ResolveOrderByRefs</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a> columnSet, IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt; orderBy)</td></tr>
<tr class="separator:a8a13370c683380d559f4c133dbb163b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5363f806a670a5582e519a8d50c63ad"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae5363f806a670a5582e519a8d50c63ad">PlanForOrderBy</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> plan, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt; orderBy, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a> queryFrom, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt; selectedColumns)</td></tr>
<tr class="separator:ae5363f806a670a5582e519a8d50c63ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfabe8d8f571e1cd15b92814ab1e9f4f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#adfabe8d8f571e1cd15b92814ab1e9f4f">ReplaceAliasedVariables</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression, IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt; selectedColumns)</td></tr>
<tr class="separator:adfabe8d8f571e1cd15b92814ab1e9f4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31b4124c6c4f3ab12ee7d6ace35e693e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a31b4124c6c4f3ab12ee7d6ace35e693e">ReplaceAliasedVariable</a> (<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> variableName, IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt; selectColumns)</td></tr>
<tr class="separator:a31b4124c6c4f3ab12ee7d6ace35e693e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr class="memitem:a13910661e43e9cfebef44ea51b811d03"><td class="memItemLeft" align="right" valign="top">static readonly <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">FunctionTableName</a> = new <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>(&quot;FUNCTIONTABLE&quot;)</td></tr>
<tr class="separator:a13910661e43e9cfebef44ea51b811d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00027">27</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae329f40ecfefa0fa45e678ddade9e141"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QuerySelectColumns.htm">QuerySelectColumns</a> Deveel.Data.Sql.Query.QueryPlanner.BuildSelectColumns </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00048">48</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                                                                                    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            var selectColumns = <span class="keyword">new</span> QuerySelectColumns(queryFrom);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">foreach</span> (var column <span class="keywordflow">in</span> expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aa3d8c6d5a2944ff392c73183f62019e7">SelectColumns</a>) {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="comment">// Is this a glob?  (eg. Part.* )</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">if</span> (column.IsGlob) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    <span class="comment">// Find the columns globbed and add to the &#39;selectedColumns&#39; result.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    <span class="keywordflow">if</span> (column.IsAll) {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        selectColumns.SelectAllColumnsFromAllSources();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                        <span class="comment">// Otherwise the glob must be of the form &#39;[table name].*&#39;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        selectColumns.SelectAllColumnsFromSource(column.TableName);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                    <span class="comment">// Otherwise must be a standard column reference.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                    selectColumns.SelectSingleColumn(column);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">return</span> selectColumns;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_aa3d8c6d5a2944ff392c73183f62019e7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aa3d8c6d5a2944ff392c73183f62019e7">Deveel.Data.Sql.Expressions.SqlQueryExpression.SelectColumns</a></div><div class="ttdeci">IEnumerable&lt; SelectColumn &gt; SelectColumns</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00049">SqlQueryExpression.cs:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac5982dacfe57dd40bbfd2819050a4f04"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a> Deveel.Data.Sql.Query.QueryPlanner.CreateTablePlanner </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00157">157</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                                                                                      {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="comment">// Set up plans for each table in the from clause of the command.  For</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="comment">// sub-queries, we recurse.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            var tablePlanner = <span class="keyword">new</span> QueryTablePlanner();</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; queryFrom.SourceCount; i++) {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                var tableSource = queryFrom.GetTableSource(i);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                IQueryPlanNode plan;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">if</span> (tableSource is FromTableSubQuerySource) {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    var subQuerySource = (FromTableSubQuerySource) tableSource;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    var subQueryExpr = subQuerySource.QueryExpression;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    var subQueryFrom = subQuerySource.QueryFrom;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    plan = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">PlanQuery</a>(context, subQueryExpr, subQueryFrom, null, null);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="keywordflow">if</span> (!(plan is SubsetNode))</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;The root node of a sub-query plan must be a subset.&quot;</span>);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    var subsetNode = (SubsetNode) plan;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    subsetNode.SetAliasParentName(subQuerySource.AliasName);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tableSource is FromTableDirectSource) {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    var directSource = (FromTableDirectSource) tableSource;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    plan = directSource.QueryPlan;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The type of FROM source &#39;{0}&#39; is not supported.&quot;</span>, tableSource.GetType()));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                tablePlanner.AddPlan(plan, tableSource);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> tablePlanner;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a8e9d841a56e6ecb9d6dccc6267474714"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">Deveel.Data.Sql.Query.QueryPlanner.PlanQuery</a></div><div class="ttdeci">IQueryPlanNode PlanQuery(QueryInfo queryInfo)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00358">QueryPlanner.cs:358</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a06914f16d3a1719c2a3451de2178e973"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryPlanner.EvaluateToSingle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a>&#160;</td>
          <td class="paramname"><em>columns</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00302">302</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                                                    {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">if</span> (columns.AggregateCount &gt; 0)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Invalid use of aggregate function in select with no FROM clause&quot;</span>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="comment">// Make up the lists</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            var selectedColumns = columns.SelectedColumns.ToList();</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordtype">int</span> colCount = selectedColumns.Count;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            var colNames = <span class="keyword">new</span> <span class="keywordtype">string</span>[colCount];</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            var expList = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[colCount];</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            var subsetVars = <span class="keyword">new</span> ObjectName[colCount];</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            var aliases1 = <span class="keyword">new</span> ObjectName[colCount];</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; colCount; ++i) {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> scol = selectedColumns[i];</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                expList[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a0ae70410bfad728e2d7114c54be4f03f">Expression</a>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                colNames[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a8ec85ba0c93f9dcec1ad06f910ed41a3">InternalName</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm#a68683242303d4743d20210e3c2db8db1">Name</a>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                subsetVars[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a8ec85ba0c93f9dcec1ad06f910ed41a3">InternalName</a>;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                aliases1[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#adde61bdf62cb7b837de6373901da104e">ResolvedName</a>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> SubsetNode(<span class="keyword">new</span> CreateFunctionsNode(<span class="keyword">new</span> SingleRowTableNode(), expList, colNames), subsetVars, aliases1);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">Deveel.Data.Sql.Expressions.SelectColumn</a></div><div class="ttdoc">Represents a column selected to be in the output of a select statement. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00031">SelectColumn.cs:31</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm_a0ae70410bfad728e2d7114c54be4f03f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a0ae70410bfad728e2d7114c54be4f03f">Deveel.Data.Sql.Expressions.SelectColumn.Expression</a></div><div class="ttdeci">SqlExpression Expression</div><div class="ttdoc">Gets the expression used to select the column. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00065">SelectColumn.cs:65</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1ObjectName_htm_a68683242303d4743d20210e3c2db8db1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm#a68683242303d4743d20210e3c2db8db1">Deveel.Data.Sql.ObjectName.Name</a></div><div class="ttdeci">string Name</div><div class="ttdoc">Gets the name of the object being referenced. </div><div class="ttdef"><b>Definition:</b> <a href="ObjectName_8cs_source.htm#l00108">ObjectName.cs:108</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm_a8ec85ba0c93f9dcec1ad06f910ed41a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a8ec85ba0c93f9dcec1ad06f910ed41a3">Deveel.Data.Sql.Expressions.SelectColumn.InternalName</a></div><div class="ttdeci">ObjectName InternalName</div><div class="ttdoc">The name of this column used internally to reference it. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00110">SelectColumn.cs:110</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm_adde61bdf62cb7b837de6373901da104e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#adde61bdf62cb7b837de6373901da104e">Deveel.Data.Sql.Expressions.SelectColumn.ResolvedName</a></div><div class="ttdeci">ObjectName ResolvedName</div><div class="ttdoc">The fully resolved name that this column is given in the resulting table. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00115">SelectColumn.cs:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a993fdf803effe4c97d692c3175f8c5af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> Deveel.Data.Sql.Query.QueryPlanner.FilterHaving </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>havingExpression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>aggregates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00233">233</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                                                                                              {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">if</span> (havingExpression is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                var binary = (SqlBinaryExpression) havingExpression;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                var expType = binary.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                var newLeft = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">FilterHaving</a>(binary.Left, aggregates, context);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                var newRight = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">FilterHaving</a>(binary.Right, aggregates, context);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Binary</a>(newLeft, expType, newRight);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="comment">// Not logical so determine if the expression is an aggregate or not</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">if</span> (havingExpression.HasAggregate(context)) {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="comment">// Has aggregate functions so we must WriteByte this expression on the</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="comment">// aggregate list.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                aggregates.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Add</a>(havingExpression);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                var name = <span class="keyword">new</span> ObjectName(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">FunctionTableName</a>, <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;HAVINGAGG_{0}&quot;</span>, aggregates.Count));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(name);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">return</span> havingExpression;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a993fdf803effe4c97d692c3175f8c5af"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">Deveel.Data.Sql.Query.QueryPlanner.FilterHaving</a></div><div class="ttdeci">SqlExpression FilterHaving(SqlExpression havingExpression, IList&lt; SqlExpression &gt; aggregates, IRequest context)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00233">QueryPlanner.cs:233</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">Deveel.Data.Sql.Expressions.SqlBinaryExpression</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00023">SqlBinaryExpression.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a63b97ab28cd81777112d58f6821e5d49"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a63b97ab28cd81777112d58f6821e5d49">Deveel.Data.Sql.Expressions.SqlExpression.Add</a></div><div class="ttdeci">static SqlBinaryExpression Add(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00405">SqlExpression.cs:405</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a13910661e43e9cfebef44ea51b811d03"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">Deveel.Data.Sql.Query.QueryPlanner.FunctionTableName</a></div><div class="ttdeci">static readonly ObjectName FunctionTableName</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00028">QueryPlanner.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ae3792af713778beb017f2ed55e219e86"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Deveel.Data.Sql.Expressions.SqlExpression.Reference</a></div><div class="ttdeci">static SqlReferenceExpression Reference(ObjectName objectName)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00284">SqlExpression.cs:284</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ad5bd15eb16058f78c184625a44fffde8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Deveel.Data.Sql.Expressions.SqlExpression.Binary</a></div><div class="ttdeci">static SqlBinaryExpression Binary(SqlExpression left, SqlExpressionType expressionType, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00304">SqlExpression.cs:304</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a3f022885e573e9111024b4392237d255"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">Deveel.Data.Sql.Expressions.SqlExpression.ExpressionType</a></div><div class="ttdeci">abstract SqlExpressionType ExpressionType</div><div class="ttdoc">Gets the type code of this SQL expression. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00051">SqlExpression.cs:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac5c7cd7fd859fd7b8b0b74ca60f9722b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int Deveel.Data.Sql.Query.QueryPlanner.MakeupFunctions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a>&#160;</td>
          <td class="paramname"><em>columnSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>aggregateFunctions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[]&#160;</td>
          <td class="paramname"><em>defFunList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out string[]&#160;</td>
          <td class="paramname"><em>defFunNames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00071">71</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                                                                                                                                                    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="comment">// Make up the functions list,</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            var functionsList = columnSet.FunctionColumns.ToList();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordtype">int</span> fsz = functionsList.Count;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            var completeFunList = <span class="keyword">new</span> List&lt;object&gt;();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; fsz; ++i) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                var scol = functionsList[i];</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                completeFunList.Add(scol.Expression);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                completeFunList.Add(scol.InternalName.Name);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; aggregateFunctions.Count; ++i) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                completeFunList.Add(aggregateFunctions[i]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                completeFunList.Add(<span class="stringliteral">&quot;HAVINGAGG_&quot;</span> + (i + 1));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordtype">int</span> fsz2 = completeFunList.Count / 2;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            defFunList = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[fsz2];</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            defFunNames = <span class="keyword">new</span> <span class="keywordtype">string</span>[fsz2];</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; fsz2; ++i) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                defFunList[i] = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>)completeFunList[i * 2];</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                defFunNames[i] = (string)completeFunList[(i * 2) + 1];</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">return</span> fsz;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae5363f806a670a5582e519a8d50c63ad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryPlanner.PlanForOrderBy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td>
          <td class="paramname"><em>plan</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>orderBy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>selectedColumns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00537">537</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                                                                                                                                         {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            <span class="comment">// Sort on the ORDER BY clause</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">if</span> (orderBy.Count &gt; 0) {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keywordtype">int</span> sz = orderBy.Count;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                var orderList = <span class="keyword">new</span> ObjectName[sz];</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                var ascendingList = <span class="keyword">new</span> <span class="keywordtype">bool</span>[sz];</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                var functionOrders = <span class="keyword">new</span> List&lt;SqlExpression&gt;();</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    var column = orderBy[i];</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> exp = column.Expression;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    ascendingList[i] = column.Ascending;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                    var v = exp.AsReferenceName();</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                    <span class="keywordflow">if</span> (v != null) {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                        var newV = queryFrom.ResolveReference(v);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                        <span class="keywordflow">if</span> (newV == null)</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Could not resolve ORDER BY column &#39;{0}&#39; in expression&quot;</span>, v));</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        newV = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a31b4124c6c4f3ab12ee7d6ace35e693e">ReplaceAliasedVariable</a>(newV, selectedColumns);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                        orderList[i] = newV;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                        <span class="comment">// Otherwise we must be ordering by an expression such as</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        <span class="comment">// &#39;0 - a&#39;.</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                        <span class="comment">// Resolve the expression,</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                        exp = exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Prepare</a>(queryFrom.ExpressionPreparer);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        <span class="comment">// Make sure we substitute any aliased columns in the order by</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                        <span class="comment">// columns.</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                        exp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#adfabe8d8f571e1cd15b92814ab1e9f4f">ReplaceAliasedVariables</a>(exp, selectedColumns);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                        <span class="comment">// The new ordering functions are called &#39;FUNCTIONTABLE.#ORDER-n&#39;</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                        <span class="comment">// where n is the number of the ordering expression.</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                        orderList[i] = <span class="keyword">new</span> ObjectName(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">FunctionTableName</a>, <span class="stringliteral">&quot;#ORDER-&quot;</span> + functionOrders.Count);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                        functionOrders.Add(exp);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                    }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                <span class="comment">// If there are functional orderings,</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                <span class="comment">// For this we must define a new FunctionTable with the expressions,</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                <span class="comment">// then order by those columns, and then use another SubsetNode</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="comment">// command node.</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                <span class="keywordtype">int</span> fsz = functionOrders.Count;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                <span class="keywordflow">if</span> (fsz &gt; 0) {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    var funs = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[fsz];</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    var fnames = <span class="keyword">new</span> <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>[fsz];</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; fsz; ++n) {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                        funs[n] = functionOrders[n];</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                        fnames[n] = <span class="stringliteral">&quot;#ORDER-&quot;</span> + n;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                    <span class="keywordflow">if</span> (plan is SubsetNode) {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                        <span class="comment">// If the top plan is a SubsetNode then we use the</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                        <span class="comment">//   information from it to create a new SubsetNode that</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                        <span class="comment">//   doesn&#39;t include the functional orders we have attached here.</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                        var topSubsetNode = (SubsetNode)plan;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                        var mappedNames = topSubsetNode.AliasColumnNames;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                        <span class="comment">// Defines the sort functions</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                        plan = <span class="keyword">new</span> CreateFunctionsNode(plan, funs, fnames);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                        <span class="comment">// Then plan the sort</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                        plan = <span class="keyword">new</span> SortNode(plan, orderList, ascendingList);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                        <span class="comment">// Then plan the subset</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                        plan = <span class="keyword">new</span> SubsetNode(plan, mappedNames, mappedNames);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                        <span class="comment">// Defines the sort functions</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                        plan = <span class="keyword">new</span> CreateFunctionsNode(plan, funs, fnames);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                        <span class="comment">// Plan the sort</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                        plan = <span class="keyword">new</span> SortNode(plan, orderList, ascendingList);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                    }</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                    <span class="comment">// No functional orders so we only need to sort by the columns</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                    <span class="comment">// defined.</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                    plan = <span class="keyword">new</span> SortNode(plan, orderList, ascendingList);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            }</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <span class="keywordflow">return</span> plan;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_adfabe8d8f571e1cd15b92814ab1e9f4f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#adfabe8d8f571e1cd15b92814ab1e9f4f">Deveel.Data.Sql.Query.QueryPlanner.ReplaceAliasedVariables</a></div><div class="ttdeci">static SqlExpression ReplaceAliasedVariables(SqlExpression expression, IList&lt; SelectColumn &gt; selectedColumns)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00620">QueryPlanner.cs:620</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a13910661e43e9cfebef44ea51b811d03"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">Deveel.Data.Sql.Query.QueryPlanner.FunctionTableName</a></div><div class="ttdeci">static readonly ObjectName FunctionTableName</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00028">QueryPlanner.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ab57334fc234b6c7b5eca0f706406d06e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Deveel.Data.Sql.Expressions.SqlExpression.Prepare</a></div><div class="ttdeci">virtual SqlExpression Prepare(IExpressionPreparer preparer)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00132">SqlExpression.cs:132</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a31b4124c6c4f3ab12ee7d6ace35e693e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a31b4124c6c4f3ab12ee7d6ace35e693e">Deveel.Data.Sql.Query.QueryPlanner.ReplaceAliasedVariable</a></div><div class="ttdeci">static ObjectName ReplaceAliasedVariable(ObjectName variableName, IEnumerable&lt; SelectColumn &gt; selectColumns)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00625">QueryPlanner.cs:625</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9a2ce5638af504d9a5ac91d2a74721cc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryPlanner.PlanGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a>&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_1_1GroupInfo.htm">GroupInfo</a>&#160;</td>
          <td class="paramname"><em>groupInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00098">98</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                                                   {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">// If there is more than 1 aggregate function or there is a group by</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// clause, then we must add a grouping plan.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">if</span> (groupInfo.Columns.AggregateCount &gt; 0 || </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                groupInfo.GroupByCount &gt; 0) {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="comment">// If there is no GROUP BY clause then assume the entire result is the</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="comment">// group.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">if</span> (groupInfo.GroupByCount == 0) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    node = <span class="keyword">new</span> GroupNode(node, groupInfo.GroupMax, groupInfo.FunctionExpressions, groupInfo.FunctionNames);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="comment">// Do we have any group by functions that need to be planned first?</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordtype">int</span> gfsz = groupInfo.GroupByExpressions.Length;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">if</span> (gfsz &gt; 0) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        var groupFunList = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[gfsz];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        var groupFunName = <span class="keyword">new</span> <span class="keywordtype">string</span>[gfsz];</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; gfsz; ++i) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                            groupFunList[i] = groupInfo.GroupByExpressions[i];</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                            groupFunName[i] = <span class="stringliteral">&quot;#GROUPBY-&quot;</span> + i;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        node = <span class="keyword">new</span> CreateFunctionsNode(node, groupFunList, groupFunName);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="comment">// Otherwise we provide the &#39;group_by_list&#39; argument</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    node = <span class="keyword">new</span> GroupNode(node, groupInfo.GroupByNames, groupInfo.GroupMax, groupInfo.FunctionExpressions, groupInfo.FunctionNames);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="comment">// Otherwise no grouping is occurring.  We simply need create a function</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="comment">// node with any functions defined in the SELECT.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="comment">// Plan a FunctionsNode with the functions defined in the SELECT.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">if</span> (groupInfo.FunctionCount &gt; 0)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    node = <span class="keyword">new</span> CreateFunctionsNode(node, groupInfo.FunctionExpressions, groupInfo.FunctionNames);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> node;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8e9d841a56e6ecb9d6dccc6267474714"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryPlanner.PlanQuery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryInfo.htm">QueryInfo</a>&#160;</td>
          <td class="paramname"><em>queryInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanner.htm#a71a7d124751bbbae7a13a3ec580ec675">Deveel.Data.Sql.Query.IQueryPlanner</a>.</p>

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00358">358</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                             {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="keywordflow">if</span> (queryInfo == null)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="stringliteral">&quot;queryInfo&quot;</span>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            var context = queryInfo.Request;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            var queryExpression = queryInfo.Expression;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            var sortColumns = queryInfo.SortColumns;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            var limit = queryInfo.Limit;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            var queryFrom = QueryExpressionFrom.Create(context, queryExpression);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            var orderBy = <span class="keyword">new</span> List&lt;SortColumn&gt;();</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">if</span> (sortColumns != null)</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                orderBy.AddRange(sortColumns);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">PlanQuery</a>(context, queryExpression, queryFrom, orderBy, limit);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a8e9d841a56e6ecb9d6dccc6267474714"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">Deveel.Data.Sql.Query.QueryPlanner.PlanQuery</a></div><div class="ttdeci">IQueryPlanNode PlanQuery(QueryInfo queryInfo)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00358">QueryPlanner.cs:358</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0e240773ff62560af8e67d2318959888"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Query_1_1IQueryPlanNode.htm">IQueryPlanNode</a> Deveel.Data.Sql.Query.QueryPlanner.PlanQuery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a>&#160;</td>
          <td class="paramname"><em>queryExpression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>sortColumns</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1QueryLimit.htm">QueryLimit</a>&#160;</td>
          <td class="paramname"><em>limit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00375">375</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                                                            {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="comment">// ----- Resolve the SELECT list</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="comment">// If there are 0 columns selected, then we assume the result should</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="comment">// show all of the columns in the result.</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordtype">bool</span> doSubsetColumn = (queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aa3d8c6d5a2944ff392c73183f62019e7">SelectColumns</a>.Any());</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="comment">// What we are selecting</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            var columns = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae329f40ecfefa0fa45e678ddade9e141">BuildSelectColumns</a>(queryExpression, queryFrom);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="comment">// Prepare the column_set,</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            var preparedColumns = columns.Prepare(context);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            sortColumns = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8a13370c683380d559f4c133dbb163b4">ResolveOrderByRefs</a>(preparedColumns, sortColumns);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="comment">// -----</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <span class="comment">// Set up plans for each table in the from clause of the command.  For</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="comment">// sub-queries, we recurse.</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            var tablePlanner = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5982dacfe57dd40bbfd2819050a4f04">CreateTablePlanner</a>(context, queryFrom);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="comment">// -----</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="comment">// The WHERE and HAVING clauses</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            var whereClause = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a7ea1af0cc2c73803822c5f3e16d6756c">WhereExpression</a>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            var havingClause = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a9ce82e73c35b93c50afcf6b3aca3406e">HavingExpression</a>;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a361f8279ce11664ac0cec79e5d5dd348">PrepareJoins</a>(tablePlanner, queryExpression, queryFrom, ref whereClause);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="comment">// Prepare the WHERE and HAVING clause, qualifies all variables and</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="comment">// prepares sub-queries.</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            whereClause = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a64b7215f33b29288fd705b2dfd83bdb0">PrepareSearchExpression</a>(context, queryFrom, whereClause);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            havingClause = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a64b7215f33b29288fd705b2dfd83bdb0">PrepareSearchExpression</a>(context, queryFrom, havingClause);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="comment">// Any extra Aggregate functions that are part of the HAVING clause that</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="comment">// we need to add.  This is a list of a name followed by the expression</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// that contains the aggregate function.</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            var extraAggregateFunctions = <span class="keyword">new</span> List&lt;SqlExpression&gt;();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">if</span> (havingClause != null)</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                havingClause = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">FilterHaving</a>(havingClause, extraAggregateFunctions, context);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="comment">// Any GROUP BY functions,</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            ObjectName[] groupByList;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            IList&lt;SqlExpression&gt; groupByFunctions;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            var gsz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a0d4273eb9f7da5510407bc6a736fca3d">ResolveGroupBy</a>(queryExpression, queryFrom, context, out groupByList, out groupByFunctions);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="comment">// Resolve GROUP MAX variable to a reference in this from set</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            var groupmaxColumn = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#aa61611228b4eac395e0ad3cb6a9a2eaa">ResolveGroupMax</a>(queryExpression, queryFrom);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// -----</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="comment">// Now all the variables should be resolved and correlated variables set</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="comment">// up as appropriate.</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="comment">// If nothing in the FROM clause then simply evaluate the result of the</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="comment">// select</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordflow">if</span> (queryFrom.SourceCount == 0)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a06914f16d3a1719c2a3451de2178e973">EvaluateToSingle</a>(preparedColumns);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">// Plan the where clause.  The returned node is the plan to evaluate the</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="comment">// WHERE clause.</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            var node = tablePlanner.PlanSearchExpression(whereClause);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>[] defFunList;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordtype">string</span>[] defFunNames;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            var fsz = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5c7cd7fd859fd7b8b0b74ca60f9722b">MakeupFunctions</a>(preparedColumns, extraAggregateFunctions, out defFunList, out defFunNames);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            var groupInfo = <span class="keyword">new</span> GroupInfo {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                Columns = preparedColumns,</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                FunctionCount = fsz,</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                FunctionNames = defFunNames,</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                FunctionExpressions = defFunList,</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                GroupByCount = gsz,</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                GroupByNames = groupByList,</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                GroupByExpressions = groupByFunctions.ToArray(),</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                GroupMax = groupmaxColumn</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            };</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            node = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a9a2ce5638af504d9a5ac91d2a74721cc">PlanGroup</a>(node, groupInfo);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="comment">// The result column list</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            var selectColumns = preparedColumns.SelectedColumns.ToList();</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordtype">int</span> sz = selectColumns.Count;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="comment">// Evaluate the having clause if necessary</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordflow">if</span> (havingClause != null) {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                <span class="comment">// Before we evaluate the having expression we must substitute all the</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                <span class="comment">// aliased variables.</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                var havingExpr = havingClause;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                <span class="comment">// TODO: this requires a visitor to modify the having expression</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                havingExpr = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#adfabe8d8f571e1cd15b92814ab1e9f4f">ReplaceAliasedVariables</a>(havingExpr, selectColumns);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                var source = tablePlanner.SinglePlan;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                source.UpdatePlan(node);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                node = tablePlanner.PlanSearchExpression(havingExpr);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="comment">// Do we have a composite select expression to process?</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            IQueryPlanNode rightComposite = null;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keywordflow">if</span> (queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#abe1b81e2e57ef1144a23cfbef643a27a">NextComposite</a> != null) {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                var compositeExpr = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#abe1b81e2e57ef1144a23cfbef643a27a">NextComposite</a>;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                var compositeFrom = QueryExpressionFrom.Create(context, compositeExpr);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                <span class="comment">// Form the right plan</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                rightComposite = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">PlanQuery</a>(context, compositeExpr, compositeFrom, null, null);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            }</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="comment">// Do we do a final subset column?</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            ObjectName[] aliases = null;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">if</span> (doSubsetColumn) {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                <span class="comment">// Make up the lists</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                var subsetVars = <span class="keyword">new</span> ObjectName[sz];</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                aliases = <span class="keyword">new</span> ObjectName[sz];</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> scol = selectColumns[i];</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    subsetVars[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a8ec85ba0c93f9dcec1ad06f910ed41a3">InternalName</a>;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    aliases[i] = scol.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#adde61bdf62cb7b837de6373901da104e">ResolvedName</a>;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="comment">// If we are distinct then add the DistinctNode here</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                <span class="keywordflow">if</span> (queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a2a92bb78a2f7e0cc07950989175fb3b2">Distinct</a>)</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                    node = <span class="keyword">new</span> DistinctNode(node, subsetVars);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="comment">// Process the ORDER BY?</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                <span class="comment">// Note that the ORDER BY has to occur before the subset call, but</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="comment">// after the distinct because distinct can affect the ordering of the</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="comment">// result.</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keywordflow">if</span> (rightComposite == null &amp;&amp; sortColumns != null)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                    node = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae5363f806a670a5582e519a8d50c63ad">PlanForOrderBy</a>(node, sortColumns, queryFrom, selectColumns);</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="comment">// Rename the columns as specified in the SELECT</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                node = <span class="keyword">new</span> SubsetNode(node, subsetVars, aliases);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <span class="comment">// Process the ORDER BY?</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordflow">if</span> (rightComposite == null &amp;&amp; sortColumns != null)</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    node = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae5363f806a670a5582e519a8d50c63ad">PlanForOrderBy</a>(node, sortColumns, queryFrom, selectColumns);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="comment">// Do we have a composite to merge in?</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            <span class="keywordflow">if</span> (rightComposite != null) {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// For the composite</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                node = <span class="keyword">new</span> CompositeNode(node, rightComposite, queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a5d5622018f2370d9c08f227b210d293c">CompositeFunction</a>, queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#ac7cbbc395bfc2dffe1a492c0cafaf062">IsCompositeAll</a>);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="comment">// Final order by?</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">if</span> (sortColumns != null)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    node = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae5363f806a670a5582e519a8d50c63ad">PlanForOrderBy</a>(node, sortColumns, queryFrom, selectColumns);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <span class="comment">// Ensure a final subset node</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <span class="keywordflow">if</span> (!(node is SubsetNode) &amp;&amp; aliases != null) {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    node = <span class="keyword">new</span> SubsetNode(node, aliases, aliases);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            }</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            <span class="keywordflow">if</span> (limit != null)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                node = <span class="keyword">new</span> LimitNode(node, limit.Offset, limit.Count);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="keywordflow">return</span> node;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_ac5982dacfe57dd40bbfd2819050a4f04"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5982dacfe57dd40bbfd2819050a4f04">Deveel.Data.Sql.Query.QueryPlanner.CreateTablePlanner</a></div><div class="ttdeci">QueryTablePlanner CreateTablePlanner(IRequest context, QueryExpressionFrom queryFrom)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00157">QueryPlanner.cs:157</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a361f8279ce11664ac0cec79e5d5dd348"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a361f8279ce11664ac0cec79e5d5dd348">Deveel.Data.Sql.Query.QueryPlanner.PrepareJoins</a></div><div class="ttdeci">void PrepareJoins(QueryTablePlanner tablePlanner, SqlQueryExpression queryExpression, QueryExpressionFrom queryFrom, ref SqlExpression searchExpression)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00193">QueryPlanner.cs:193</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a64b7215f33b29288fd705b2dfd83bdb0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a64b7215f33b29288fd705b2dfd83bdb0">Deveel.Data.Sql.Query.QueryPlanner.PrepareSearchExpression</a></div><div class="ttdeci">SqlExpression PrepareSearchExpression(IRequest context, QueryExpressionFrom queryFrom, SqlExpression expression)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00030">QueryPlanner.cs:30</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_aa3d8c6d5a2944ff392c73183f62019e7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aa3d8c6d5a2944ff392c73183f62019e7">Deveel.Data.Sql.Expressions.SqlQueryExpression.SelectColumns</a></div><div class="ttdeci">IEnumerable&lt; SelectColumn &gt; SelectColumns</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00049">SqlQueryExpression.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_ae329f40ecfefa0fa45e678ddade9e141"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae329f40ecfefa0fa45e678ddade9e141">Deveel.Data.Sql.Query.QueryPlanner.BuildSelectColumns</a></div><div class="ttdeci">QuerySelectColumns BuildSelectColumns(SqlQueryExpression expression, QueryExpressionFrom queryFrom)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00048">QueryPlanner.cs:48</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a993fdf803effe4c97d692c3175f8c5af"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a993fdf803effe4c97d692c3175f8c5af">Deveel.Data.Sql.Query.QueryPlanner.FilterHaving</a></div><div class="ttdeci">SqlExpression FilterHaving(SqlExpression havingExpression, IList&lt; SqlExpression &gt; aggregates, IRequest context)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00233">QueryPlanner.cs:233</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_ac7cbbc395bfc2dffe1a492c0cafaf062"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#ac7cbbc395bfc2dffe1a492c0cafaf062">Deveel.Data.Sql.Expressions.SqlQueryExpression.IsCompositeAll</a></div><div class="ttdeci">bool IsCompositeAll</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00073">SqlQueryExpression.cs:73</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_abe1b81e2e57ef1144a23cfbef643a27a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#abe1b81e2e57ef1144a23cfbef643a27a">Deveel.Data.Sql.Expressions.SqlQueryExpression.NextComposite</a></div><div class="ttdeci">SqlQueryExpression NextComposite</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00061">SqlQueryExpression.cs:61</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a0d4273eb9f7da5510407bc6a736fca3d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a0d4273eb9f7da5510407bc6a736fca3d">Deveel.Data.Sql.Query.QueryPlanner.ResolveGroupBy</a></div><div class="ttdeci">int ResolveGroupBy(SqlQueryExpression queryExpression, QueryExpressionFrom queryFrom, IRequest context, out ObjectName[] columnNames, out IList&lt; SqlExpression &gt; expressions)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00256">QueryPlanner.cs:256</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_ac5c7cd7fd859fd7b8b0b74ca60f9722b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ac5c7cd7fd859fd7b8b0b74ca60f9722b">Deveel.Data.Sql.Query.QueryPlanner.MakeupFunctions</a></div><div class="ttdeci">static int MakeupFunctions(PreparedQuerySelectColumns columnSet, IList&lt; SqlExpression &gt; aggregateFunctions, out SqlExpression[] defFunList, out string[] defFunNames)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00071">QueryPlanner.cs:71</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a9a2ce5638af504d9a5ac91d2a74721cc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a9a2ce5638af504d9a5ac91d2a74721cc">Deveel.Data.Sql.Query.QueryPlanner.PlanGroup</a></div><div class="ttdeci">IQueryPlanNode PlanGroup(IQueryPlanNode node, GroupInfo groupInfo)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00098">QueryPlanner.cs:98</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a5d5622018f2370d9c08f227b210d293c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a5d5622018f2370d9c08f227b210d293c">Deveel.Data.Sql.Expressions.SqlQueryExpression.CompositeFunction</a></div><div class="ttdeci">CompositeFunction CompositeFunction</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00071">SqlQueryExpression.cs:71</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a06914f16d3a1719c2a3451de2178e973"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a06914f16d3a1719c2a3451de2178e973">Deveel.Data.Sql.Query.QueryPlanner.EvaluateToSingle</a></div><div class="ttdeci">IQueryPlanNode EvaluateToSingle(PreparedQuerySelectColumns columns)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00302">QueryPlanner.cs:302</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a8a13370c683380d559f4c133dbb163b4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8a13370c683380d559f4c133dbb163b4">Deveel.Data.Sql.Query.QueryPlanner.ResolveOrderByRefs</a></div><div class="ttdeci">static IList&lt; SortColumn &gt; ResolveOrderByRefs(PreparedQuerySelectColumns columnSet, IEnumerable&lt; SortColumn &gt; orderBy)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00324">QueryPlanner.cs:324</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_adfabe8d8f571e1cd15b92814ab1e9f4f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#adfabe8d8f571e1cd15b92814ab1e9f4f">Deveel.Data.Sql.Query.QueryPlanner.ReplaceAliasedVariables</a></div><div class="ttdeci">static SqlExpression ReplaceAliasedVariables(SqlExpression expression, IList&lt; SelectColumn &gt; selectedColumns)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00620">QueryPlanner.cs:620</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">Deveel.Data.Sql.Expressions.SelectColumn</a></div><div class="ttdoc">Represents a column selected to be in the output of a select statement. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00031">SelectColumn.cs:31</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm_a8ec85ba0c93f9dcec1ad06f910ed41a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#a8ec85ba0c93f9dcec1ad06f910ed41a3">Deveel.Data.Sql.Expressions.SelectColumn.InternalName</a></div><div class="ttdeci">ObjectName InternalName</div><div class="ttdoc">The name of this column used internally to reference it. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00110">SelectColumn.cs:110</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a2a92bb78a2f7e0cc07950989175fb3b2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a2a92bb78a2f7e0cc07950989175fb3b2">Deveel.Data.Sql.Expressions.SqlQueryExpression.Distinct</a></div><div class="ttdeci">bool Distinct</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00075">SqlQueryExpression.cs:75</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_ae5363f806a670a5582e519a8d50c63ad"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#ae5363f806a670a5582e519a8d50c63ad">Deveel.Data.Sql.Query.QueryPlanner.PlanForOrderBy</a></div><div class="ttdeci">static IQueryPlanNode PlanForOrderBy(IQueryPlanNode plan, IList&lt; SortColumn &gt; orderBy, QueryExpressionFrom queryFrom, IList&lt; SelectColumn &gt; selectedColumns)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00537">QueryPlanner.cs:537</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_aa61611228b4eac395e0ad3cb6a9a2eaa"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#aa61611228b4eac395e0ad3cb6a9a2eaa">Deveel.Data.Sql.Query.QueryPlanner.ResolveGroupMax</a></div><div class="ttdeci">ObjectName ResolveGroupMax(SqlQueryExpression queryExpression, QueryExpressionFrom queryFrom)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00289">QueryPlanner.cs:289</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a8e9d841a56e6ecb9d6dccc6267474714"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a8e9d841a56e6ecb9d6dccc6267474714">Deveel.Data.Sql.Query.QueryPlanner.PlanQuery</a></div><div class="ttdeci">IQueryPlanNode PlanQuery(QueryInfo queryInfo)</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00358">QueryPlanner.cs:358</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn_htm_adde61bdf62cb7b837de6373901da104e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm#adde61bdf62cb7b837de6373901da104e">Deveel.Data.Sql.Expressions.SelectColumn.ResolvedName</a></div><div class="ttdeci">ObjectName ResolvedName</div><div class="ttdoc">The fully resolved name that this column is given in the resulting table. </div><div class="ttdef"><b>Definition:</b> <a href="SelectColumn_8cs_source.htm#l00115">SelectColumn.cs:115</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a9ce82e73c35b93c50afcf6b3aca3406e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a9ce82e73c35b93c50afcf6b3aca3406e">Deveel.Data.Sql.Expressions.SqlQueryExpression.HavingExpression</a></div><div class="ttdeci">SqlExpression HavingExpression</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00055">SqlQueryExpression.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a7ea1af0cc2c73803822c5f3e16d6756c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a7ea1af0cc2c73803822c5f3e16d6756c">Deveel.Data.Sql.Expressions.SqlQueryExpression.WhereExpression</a></div><div class="ttdeci">SqlExpression WhereExpression</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00053">SqlQueryExpression.cs:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a361f8279ce11664ac0cec79e5d5dd348"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Query.QueryPlanner.PrepareJoins </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryTablePlanner.htm">QueryTablePlanner</a>&#160;</td>
          <td class="paramname"><em>tablePlanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a>&#160;</td>
          <td class="paramname"><em>queryExpression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ref <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>searchExpression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00193">193</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                                                                                                                                                         {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            var fromClause = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a663061803d75005ce99c1a9ddfdb4566">FromClause</a>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordtype">bool</span> allInner = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; fromClause.JoinPartCount; i++) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                var joinPart = fromClause.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1FromClause.htm#aa2ae4f23d44b1184b9983d253107b158">GetJoinPart</a>(i);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">if</span> (joinPart.JoinType != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>.Inner)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    allInner = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; fromClause.JoinPartCount; i++) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                var joinPart = fromClause.GetJoinPart(i);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                var joinType = joinPart.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1JoinPart.htm#a569eb13308564023ddc6a3b98e406a5f">JoinType</a>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                var onExpression = joinPart.OnExpression;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">if</span> (allInner) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="comment">// If the whole join set is inner joins then simply move the on</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="comment">// expression (if there is one) to the WHERE clause.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keywordflow">if</span> (searchExpression != null &amp;&amp; onExpression != null)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        searchExpression = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(searchExpression, onExpression);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="comment">// Not all inner joins,</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">if</span> (joinType == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">JoinType</a>.Inner &amp;&amp; onExpression == null) {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <span class="comment">// Regular join with no ON expression, so no preparation necessary</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        <span class="comment">// Either an inner join with an ON expression, or an outer join with</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        <span class="comment">// ON expression</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        <span class="keywordflow">if</span> (onExpression == null)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Join of type {0} requires ON expression.&quot;</span>, joinType));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        <span class="comment">// Resolve the on_expression</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        onExpression = onExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Prepare</a>(queryFrom.ExpressionPreparer);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="comment">// And set it in the planner</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        tablePlanner.JoinAt(i, joinType, onExpression);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a190b32bbe269e178bb69866170e55441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">Deveel.Data.Sql.Expressions.SqlExpression.And</a></div><div class="ttdeci">static SqlBinaryExpression And(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00393">SqlExpression.cs:393</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_adb07f7a341b1eda61ff53ddf48cfec81"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#adb07f7a341b1eda61ff53ddf48cfec81">Deveel.Data.Sql.Expressions.JoinType</a></div><div class="ttdeci">JoinType</div><div class="ttdoc">Enumerates the kind of group join in a selection query. </div><div class="ttdef"><b>Definition:</b> <a href="JoinType_8cs_source.htm#l00023">JoinType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1FromClause_htm_aa2ae4f23d44b1184b9983d253107b158"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1FromClause.htm#aa2ae4f23d44b1184b9983d253107b158">Deveel.Data.Sql.Expressions.FromClause.GetJoinPart</a></div><div class="ttdeci">JoinPart GetJoinPart(int offset)</div><div class="ttdoc">Gets the descriptor of the join at the given offset. </div><div class="ttdef"><b>Definition:</b> <a href="FromClause_8cs_source.htm#l00174">FromClause.cs:174</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1JoinPart_htm_a569eb13308564023ddc6a3b98e406a5f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1JoinPart.htm#a569eb13308564023ddc6a3b98e406a5f">Deveel.Data.Sql.Expressions.JoinPart.JoinType</a></div><div class="ttdeci">JoinType JoinType</div><div class="ttdef"><b>Definition:</b> <a href="JoinPart_8cs_source.htm#l00050">JoinPart.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ab57334fc234b6c7b5eca0f706406d06e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Deveel.Data.Sql.Expressions.SqlExpression.Prepare</a></div><div class="ttdeci">virtual SqlExpression Prepare(IExpressionPreparer preparer)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00132">SqlExpression.cs:132</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a663061803d75005ce99c1a9ddfdb4566"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a663061803d75005ce99c1a9ddfdb4566">Deveel.Data.Sql.Expressions.SqlQueryExpression.FromClause</a></div><div class="ttdeci">FromClause FromClause</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00051">SqlQueryExpression.cs:51</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a64b7215f33b29288fd705b2dfd83bdb0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> Deveel.Data.Sql.Query.QueryPlanner.PrepareSearchExpression </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00030">30</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                                                                                                                 {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="comment">// first check the expression is not null</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <span class="keywordflow">if</span> (expression == null)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="comment">// This is used to prepare sub-queries and qualify variables in a</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="comment">// search expression such as WHERE or HAVING.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="comment">// Prepare the sub-queries first</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            expression = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Prepare</a>(<span class="keyword">new</span> QueryExpressionPreparer(<span class="keyword">this</span>, queryFrom, context));</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="comment">// Then qualify all the variables.  Note that this will not qualify</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="comment">// variables in the sub-queries.</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            expression = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Prepare</a>(queryFrom.ExpressionPreparer);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">return</span> expression;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ab57334fc234b6c7b5eca0f706406d06e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ab57334fc234b6c7b5eca0f706406d06e">Deveel.Data.Sql.Expressions.SqlExpression.Prepare</a></div><div class="ttdeci">virtual SqlExpression Prepare(IExpressionPreparer preparer)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00132">SqlExpression.cs:132</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a31b4124c6c4f3ab12ee7d6ace35e693e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> Deveel.Data.Sql.Query.QueryPlanner.ReplaceAliasedVariable </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>variableName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>selectColumns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00625">625</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                                                                                                           {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <span class="keywordflow">foreach</span> (var column <span class="keywordflow">in</span> selectColumns) {</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="keywordflow">if</span> (column.ResolvedName.Equals(variableName))</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                    <span class="keywordflow">return</span> column.InternalName;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <span class="keywordflow">return</span> variableName;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adfabe8d8f571e1cd15b92814ab1e9f4f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> Deveel.Data.Sql.Query.QueryPlanner.ReplaceAliasedVariables </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SelectColumn.htm">SelectColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>selectedColumns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00620">620</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                                                                                                            {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            var replacer = <span class="keyword">new</span> VariableReplacer(selectedColumns);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <span class="keywordflow">return</span> replacer.Visit(expression);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0d4273eb9f7da5510407bc6a736fca3d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Deveel.Data.Sql.Query.QueryPlanner.ResolveGroupBy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a>&#160;</td>
          <td class="paramname"><em>queryExpression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>columnNames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out IList&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> &gt;&#160;</td>
          <td class="paramname"><em>expressions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00256">256</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                                                                                                                                                            {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            var groupBy = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a442655c17816538b2cc630d120a69d95">GroupBy</a> == null</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                ? <span class="keyword">new</span> List&lt;SqlExpression&gt;(0)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                : queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a442655c17816538b2cc630d120a69d95">GroupBy</a>.ToList();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            var groupBySize = groupBy.Count;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            expressions = <span class="keyword">new</span> List&lt;SqlExpression&gt;();</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            columnNames = <span class="keyword">new</span> ObjectName[groupBySize];</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; groupBySize; i++) {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                var expression = groupBy[i];</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="comment">// Prepare the group by expression</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                expression = expression.Prepare(queryFrom.ExpressionPreparer);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                var columnName = expression.AsReferenceName();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keywordflow">if</span> (columnName != null)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    expression = queryFrom.FindExpression(columnName);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordflow">if</span> (expression != null) {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keywordflow">if</span> (expression.HasAggregate(context))</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Aggregate expression &#39;{0}&#39; is not allowed in a GROUP BY clause&quot;</span>, expression));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    expressions.Add(expression);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    columnName = <span class="keyword">new</span> ObjectName(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">FunctionTableName</a>, <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;#GROUPBY-{0}&quot;</span>, expressions.Count -1));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                columnNames[i] = columnName;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">return</span> groupBySize;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_a442655c17816538b2cc630d120a69d95"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#a442655c17816538b2cc630d120a69d95">Deveel.Data.Sql.Expressions.SqlQueryExpression.GroupBy</a></div><div class="ttdeci">IEnumerable&lt; SqlExpression &gt; GroupBy</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00057">SqlQueryExpression.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner_htm_a13910661e43e9cfebef44ea51b811d03"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryPlanner.htm#a13910661e43e9cfebef44ea51b811d03">Deveel.Data.Sql.Query.QueryPlanner.FunctionTableName</a></div><div class="ttdeci">static readonly ObjectName FunctionTableName</div><div class="ttdef"><b>Definition:</b> <a href="QueryPlanner_8cs_source.htm#l00028">QueryPlanner.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa61611228b4eac395e0ad3cb6a9a2eaa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> Deveel.Data.Sql.Query.QueryPlanner.ResolveGroupMax </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm">SqlQueryExpression</a>&#160;</td>
          <td class="paramname"><em>queryExpression</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1QueryExpressionFrom.htm">QueryExpressionFrom</a>&#160;</td>
          <td class="paramname"><em>queryFrom</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00289">289</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                                                                              {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            var groupMax = queryExpression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aaed6f2791b405e4d631b9424c76bdc2b">GroupMax</a>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">if</span> (groupMax != null) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                var variable = queryFrom.ResolveReference(groupMax);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">if</span> (variable == null)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The GROUP MAX column &#39;{0}&#39; was not found.&quot;</span>, groupMax));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                groupMax = variable;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">return</span> groupMax;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression_htm_aaed6f2791b405e4d631b9424c76bdc2b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlQueryExpression.htm#aaed6f2791b405e4d631b9424c76bdc2b">Deveel.Data.Sql.Expressions.SqlQueryExpression.GroupMax</a></div><div class="ttdeci">ObjectName GroupMax</div><div class="ttdef"><b>Definition:</b> <a href="SqlQueryExpression_8cs_source.htm#l00059">SqlQueryExpression.cs:59</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8a13370c683380d559f4c133dbb163b4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IList&lt;<a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a>&gt; Deveel.Data.Sql.Query.QueryPlanner.ResolveOrderByRefs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Query_1_1PreparedQuerySelectColumns.htm">PreparedQuerySelectColumns</a>&#160;</td>
          <td class="paramname"><em>columnSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1SortColumn.htm">SortColumn</a> &gt;&#160;</td>
          <td class="paramname"><em>orderBy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00324">324</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                             {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="comment">// Resolve any numerical references in the ORDER BY list (eg.</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="comment">// &#39;1&#39; will be a reference to column 1.</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">if</span> (orderBy == null)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            var columnCount = columnSet.SelectedColumns.Count();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            var resolvedColumns = <span class="keyword">new</span> List&lt;SortColumn&gt;();</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">foreach</span> (var column <span class="keywordflow">in</span> orderBy) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                var resolved = column;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                var expression = column.Expression;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keywordflow">if</span> (expression.ExpressionType == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    var value = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) expression).Value;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <span class="keywordflow">if</span> (value.Type is <a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a> &amp;&amp;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        !value.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a60b7ba0e65d9303fc9af858c5ae199af">IsNull</a>) {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        var colRef = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>) value.Value).ToInt32() - 1;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                        <span class="keywordflow">if</span> (colRef &gt;= 0 &amp;&amp; colRef &lt; columnCount) {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            var funArray = columnSet.FunctionColumns.ToArray();</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                            var refExp = funArray[colRef];</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            resolved = <span class="keyword">new</span> SortColumn(refExp.Expression, column.Ascending);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                resolvedColumns.Add(resolved);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordflow">return</span> resolvedColumns.ToArray();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1SqlType_htm_a60b7ba0e65d9303fc9af858c5ae199af"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a60b7ba0e65d9303fc9af858c5ae199af">Deveel.Data.Types.SqlType.IsNull</a></div><div class="ttdeci">bool IsNull</div><div class="ttdef"><b>Definition:</b> <a href="SqlType_8cs_source.htm#l00111">SqlType.cs:111</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">Deveel.Data.Sql.Expressions.SqlConstantExpression</a></div><div class="ttdoc">An expression that holds a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpression_8cs_source.htm#l00033">SqlConstantExpression.cs:33</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a13910661e43e9cfebef44ea51b811d03"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> Deveel.Data.Sql.Query.QueryPlanner.FunctionTableName = new <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>(&quot;FUNCTIONTABLE&quot;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="QueryPlanner_8cs_source.htm#l00028">28</a> of file <a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Sql.Query/<a class="el" href="QueryPlanner_8cs_source.htm">QueryPlanner.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
