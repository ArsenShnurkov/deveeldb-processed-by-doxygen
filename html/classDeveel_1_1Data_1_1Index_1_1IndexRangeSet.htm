<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Index.IndexRangeSet Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Index.htm">Index</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Index.IndexRangeSet Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af68199bad4448ae8daa1c3bbf6da040c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">IndexRangeSet</a> ()</td></tr>
<tr class="separator:af68199bad4448ae8daa1c3bbf6da040c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe7ec1b62e129b96caf153baf8076ce4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#abe7ec1b62e129b96caf153baf8076ce4">Intersect</a> (<a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:abe7ec1b62e129b96caf153baf8076ce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c49d3d933629e5dfc4f37468860f9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a78c49d3d933629e5dfc4f37468860f9b">Union</a> (<a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a> unionTo)</td></tr>
<tr class="memdesc:a78c49d3d933629e5dfc4f37468860f9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unions the current range set with the given range set.  <a href="#a78c49d3d933629e5dfc4f37468860f9b">More...</a><br /></td></tr>
<tr class="separator:a78c49d3d933629e5dfc4f37468860f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a864851f90cff86308b3fa8a59ce34dbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a864851f90cff86308b3fa8a59ce34dbe">ToArray</a> ()</td></tr>
<tr class="separator:a864851f90cff86308b3fa8a59ce34dbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a83462769db900276a3a4fac81e827ffd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a83462769db900276a3a4fac81e827ffd">IndexRangeSet</a> (IEnumerable&lt; <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> &gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>)</td></tr>
<tr class="separator:a83462769db900276a3a4fac81e827ffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:ab49a5a432d0530db33c0a480218d06e1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ab49a5a432d0530db33c0a480218d06e1">IntersectOn</a> (<a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> range, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value, bool nullCheck)</td></tr>
<tr class="separator:ab49a5a432d0530db33c0a480218d06e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac367a911e625c70e8764c86e77e5fb78"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ac367a911e625c70e8764c86e77e5fb78">IntersectedBy</a> (<a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> range1, <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> range2)</td></tr>
<tr class="memdesc:ac367a911e625c70e8764c86e77e5fb78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the two SelectableRange ranges intersect.  <a href="#ac367a911e625c70e8764c86e77e5fb78">More...</a><br /></td></tr>
<tr class="separator:ac367a911e625c70e8764c86e77e5fb78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16b7892110992d5326e28c5da1d9e4f8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a16b7892110992d5326e28c5da1d9e4f8">ChangeRangeSizeToEncompass</a> (<a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> range1, <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> range2)</td></tr>
<tr class="memdesc:a16b7892110992d5326e28c5da1d9e4f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alters the first range so it encompasses the second range.  <a href="#a16b7892110992d5326e28c5da1d9e4f8">More...</a><br /></td></tr>
<tr class="separator:a16b7892110992d5326e28c5da1d9e4f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a1cb9a9cec7c864e4e79fc9b2dfce2b17"><td class="memItemLeft" align="right" valign="top">readonly List&lt; <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a></td></tr>
<tr class="separator:a1cb9a9cec7c864e4e79fc9b2dfce2b17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00024">24</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af68199bad4448ae8daa1c3bbf6da040c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Index.IndexRangeSet.IndexRangeSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00027">27</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            : <span class="keyword">this</span>(<span class="keyword">new</span>[] {IndexRange.FullRange}) {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a83462769db900276a3a4fac81e827ffd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Index.IndexRangeSet.IndexRangeSet </td>
          <td>(</td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> &gt;&#160;</td>
          <td class="paramname"><em>ranges</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00031">31</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                                              {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            this.<a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a> = <span class="keyword">new</span> List&lt;IndexRange&gt;(<a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_a1cb9a9cec7c864e4e79fc9b2dfce2b17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">Deveel.Data.Index.IndexRangeSet.ranges</a></div><div class="ttdeci">readonly List&lt; IndexRange &gt; ranges</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00025">IndexRangeSet.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a16b7892110992d5326e28c5da1d9e4f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> Deveel.Data.Index.IndexRangeSet.ChangeRangeSizeToEncompass </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td>
          <td class="paramname"><em>range1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td>
          <td class="paramname"><em>range2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alters the first range so it encompasses the second range. </p>
<p>This assumes that range1 intersects range2. </p>

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00163">163</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                                                                                   {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            var startPosition1 = range1.StartOffset;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            var start1 = range1.StartValue;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            var endPosition1 = range1.EndOffset;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            var end1 = range1.EndValue;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            var startPosition2 = range2.StartOffset;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            var start2 = range2.StartValue;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            var endPosition2 = range2.EndOffset;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            var end2 = range2.EndValue;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">if</span> (!start1.Equals(IndexRange.FirstInSet)) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">if</span> (!start2.Equals(IndexRange.FirstInSet)) {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    var cell = start1;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordtype">int</span> c = cell.CompareTo(start2);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">if</span> (c &gt; 0 ||</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        c == 0 &amp;&amp; startPosition1 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.AfterLastValue &amp;&amp;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        startPosition2 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue) {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        start1 = start2;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        startPosition1 = startPosition2;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    start1 = start2;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    startPosition1 = startPosition2;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">if</span> (!end1.Equals(IndexRange.LastInSet)) {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">if</span> (!end2.Equals(IndexRange.LastInSet)) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    var cell = end1;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="keywordtype">int</span> c = cell.CompareTo(end2);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keywordflow">if</span> (c &lt; 0 ||</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        c == 0 &amp;&amp; endPosition1 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.BeforeFirstValue &amp;&amp;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        endPosition2 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        end1 = end2;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        endPosition1 = endPosition2;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    end1 = end2;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    endPosition1 = endPosition2;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> IndexRange(startPosition1, start1, endPosition1, end1);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Index_htm_a9004fa02174076840b6c401b13bed07b"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">Deveel.Data.Index.RangeFieldOffset</a></div><div class="ttdeci">RangeFieldOffset</div><div class="ttdoc">The absolute offset of a field in a range of a selection. </div><div class="ttdef"><b>Definition:</b> <a href="RangeFieldOffset_8cs_source.htm#l00024">RangeFieldOffset.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abe7ec1b62e129b96caf153baf8076ce4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a> Deveel.Data.Index.IndexRangeSet.Intersect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00209">209</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                                                               {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordtype">int</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>.Count;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                var list = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>.GetRange(0, sz);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">if</span> (op.IsSubQuery())</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    op = op.SubQueryPlainType();</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotEqual ||</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.IsNot) {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordtype">bool</span> nullCheck = op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotEqual;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="keywordflow">while</span> (j &lt; sz) {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        var range = list[j];</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        var leftRange = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ab49a5a432d0530db33c0a480218d06e1">IntersectOn</a>(range, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerThan, value, nullCheck);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        var rightRange = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ab49a5a432d0530db33c0a480218d06e1">IntersectOn</a>(range, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterThan, value, nullCheck);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        list.RemoveAt(j);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keywordflow">if</span> (leftRange != IndexRange.Null) {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            list.Add(leftRange);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        <span class="keywordflow">if</span> (rightRange != IndexRange.Null) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                            list.Add(rightRange);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        j++;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">IndexRangeSet</a>(list);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <span class="keywordtype">bool</span> nullCheck = op != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Is;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keywordflow">while</span> (j &lt; sz) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        var range = list[j];</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        range = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ab49a5a432d0530db33c0a480218d06e1">IntersectOn</a>(range, op, value, nullCheck);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        <span class="keywordflow">if</span> (range == IndexRange.Null) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                            list.RemoveAt(j);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                            list[j] = range;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        j++;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">IndexRangeSet</a>(list);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_ab49a5a432d0530db33c0a480218d06e1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ab49a5a432d0530db33c0a480218d06e1">Deveel.Data.Index.IndexRangeSet.IntersectOn</a></div><div class="ttdeci">static IndexRange IntersectOn(IndexRange range, SqlExpressionType op, DataObject value, bool nullCheck)</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00035">IndexRangeSet.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_a1cb9a9cec7c864e4e79fc9b2dfce2b17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">Deveel.Data.Index.IndexRangeSet.ranges</a></div><div class="ttdeci">readonly List&lt; IndexRange &gt; ranges</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00025">IndexRangeSet.cs:25</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_af68199bad4448ae8daa1c3bbf6da040c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">Deveel.Data.Index.IndexRangeSet.IndexRangeSet</a></div><div class="ttdeci">IndexRangeSet()</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00027">IndexRangeSet.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac367a911e625c70e8764c86e77e5fb78"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Index.IndexRangeSet.IntersectedBy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td>
          <td class="paramname"><em>range1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td>
          <td class="paramname"><em>range2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the two SelectableRange ranges intersect. </p>

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00114">114</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                                                {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            var startFlag1 = range1.StartOffset;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            var start1 = range1.StartValue;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            var endFlag1 = range1.EndOffset;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            var end1 = range1.EndValue;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            var startFlag2 = range2.StartOffset;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            var start2 = range2.StartValue;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            var endFlag2 = range2.EndOffset;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            var end2 = range2.EndValue;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            var startCell1 = start1.Equals(IndexRange.FirstInSet) ? null : start1;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            var endCell1 = end1.Equals(IndexRange.LastInSet) ? null : end1;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            var startCell2 = start2.Equals(IndexRange.FirstInSet) ? null : start2;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            var endCell2 = end2.Equals(IndexRange.LastInSet) ? null : end2;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordtype">bool</span> intersect1 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span> (startCell1 != null &amp;&amp; endCell2 != null) {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordtype">int</span> c = startCell1.CompareTo(endCell2);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">if</span> (c &lt; 0 ||</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    (c == 0 &amp;&amp; (startFlag1 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue ||</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                endFlag2 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue))) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    intersect1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                intersect1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">bool</span> intersect2 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">if</span> (startCell2 != null &amp;&amp; endCell1 != null) {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordtype">int</span> c = startCell2.CompareTo(endCell1);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">if</span> (c &lt; 0 ||</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    (c == 0 &amp;&amp; (startFlag2 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue ||</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                endFlag1 == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue))) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    intersect2 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                intersect2 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> (intersect1 &amp;&amp; intersect2);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Index_htm_a9004fa02174076840b6c401b13bed07b"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">Deveel.Data.Index.RangeFieldOffset</a></div><div class="ttdeci">RangeFieldOffset</div><div class="ttdoc">The absolute offset of a field in a range of a selection. </div><div class="ttdef"><b>Definition:</b> <a href="RangeFieldOffset_8cs_source.htm#l00024">RangeFieldOffset.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab49a5a432d0530db33c0a480218d06e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> Deveel.Data.Index.IndexRangeSet.IntersectOn </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&#160;</td>
          <td class="paramname"><em>range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>nullCheck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00035">35</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                                                                                        {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            var start = range.StartValue;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            var startPosition = range.StartOffset;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            var end = range.EndValue;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            var endPosition = range.EndOffset;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordtype">bool</span> inclusive = op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Is ||</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                             op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal ||</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                             op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterOrEqualThan ||</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                             op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerOrEqualThan;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Is ||</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal ||</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterThan ||</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterOrEqualThan) {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="comment">// With this operator, NULL values must return null.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="keywordflow">if</span> (nullCheck &amp;&amp; value.IsNull) {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    <span class="keywordflow">return</span> IndexRange.Null;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keywordflow">if</span> (start.Equals(IndexRange.FirstInSet)) {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                    start = value;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    startPosition = inclusive ? <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue : <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.AfterLastValue;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    <span class="keywordtype">int</span> c = value.CompareTo(start);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    <span class="keywordflow">if</span> ((c == 0 &amp;&amp; startPosition == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue) || c &gt; 0) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                        start = value;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        startPosition = inclusive ? <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.FirstValue : <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.AfterLastValue;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Is ||</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal ||</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerThan ||</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerOrEqualThan) {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="comment">// With this operator, NULL values must return null.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">if</span> (nullCheck &amp;&amp; value.IsNull) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                    <span class="keywordflow">return</span> IndexRange.Null;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="comment">// If start is first in set, then we have to change it to after NULL</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordflow">if</span> (nullCheck &amp;&amp; start.Equals(IndexRange.FirstInSet)) {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    start = DataObject.Null();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    startPosition = <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.AfterLastValue;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">if</span> (end.Equals(IndexRange.LastInSet)) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    end = value;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    endPosition = inclusive ? <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue : <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.BeforeFirstValue;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordtype">int</span> c = value.CompareTo(end);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordflow">if</span> ((c == 0 &amp;&amp; endPosition == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue) || c &lt; 0) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        end = value;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        endPosition = inclusive ? <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.LastValue : <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.BeforeFirstValue;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="comment">// If start and end are not null types (if either are, then it means it</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// is a placeholder value meaning start or end of set).</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">if</span> (!start.Equals(IndexRange.FirstInSet) &amp;&amp; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                !end.Equals(IndexRange.LastInSet)) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="comment">// If start is higher than end, return null</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordtype">int</span> c = start.CompareTo(end);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keywordflow">if</span> ((c == 0 &amp;&amp; (startPosition == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.AfterLastValue ||</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                endPosition == <a class="code" href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">RangeFieldOffset</a>.BeforeFirstValue)) ||</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    c &gt; 0) {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keywordflow">return</span> IndexRange.Null;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="comment">// The new intersected range</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> IndexRange(startPosition, start, endPosition, end);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Index_htm_a9004fa02174076840b6c401b13bed07b"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Index.htm#a9004fa02174076840b6c401b13bed07b">Deveel.Data.Index.RangeFieldOffset</a></div><div class="ttdeci">RangeFieldOffset</div><div class="ttdoc">The absolute offset of a field in a range of a selection. </div><div class="ttdef"><b>Definition:</b> <a href="RangeFieldOffset_8cs_source.htm#l00024">RangeFieldOffset.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a864851f90cff86308b3fa8a59ce34dbe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a> [] Deveel.Data.Index.IndexRangeSet.ToArray </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00311">311</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                      {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>.ToArray();</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_a1cb9a9cec7c864e4e79fc9b2dfce2b17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">Deveel.Data.Index.IndexRangeSet.ranges</a></div><div class="ttdeci">readonly List&lt; IndexRange &gt; ranges</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00025">IndexRangeSet.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a78c49d3d933629e5dfc4f37468860f9b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a> Deveel.Data.Index.IndexRangeSet.Union </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a>&#160;</td>
          <td class="paramname"><em>unionTo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unions the current range set with the given range set. </p>

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00258">258</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                          {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                var rangeSet = <span class="keyword">new</span> List&lt;IndexRange&gt;(<a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">ranges</a>);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                var inputSet = unionTo.ranges;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordtype">int</span> inSz = inputSet.Count;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keywordtype">int</span> n = 0;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <span class="keywordflow">while</span> (n &lt; inSz) {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    var inRange = inputSet[n];</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keywordtype">int</span> sz = rangeSet.Count;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    var i = rangeSet.GetRange(0, sz);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keywordflow">while</span> (j &lt; i.Count) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        var range = i[j];</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ac367a911e625c70e8764c86e77e5fb78">IntersectedBy</a>(inRange, range)) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            i.RemoveAt(j);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            inRange = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a16b7892110992d5326e28c5da1d9e4f8">ChangeRangeSizeToEncompass</a>(inRange, range);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        j++;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="comment">// Insert into sorted position</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    var startPoint = inRange.StartOffset;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    var start = inRange.StartValue;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    var endPoint = inRange.EndOffset;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    var end = inRange.EndValue;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">if</span> (start == IndexRange.FirstInSet) {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        rangeSet.Insert(0, inRange);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        var startCell = start;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        i = rangeSet.GetRange(0, rangeSet.Count);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        j = 0;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        <span class="keywordflow">while</span> (j &lt; i.Count) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                            var range = i[j];</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            var curStart = range.StartValue;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                            <span class="keywordflow">if</span> (!curStart.Equals(IndexRange.FirstInSet)) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                <span class="keywordflow">if</span> (curStart.CompareTo(startCell) &gt; 0) {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                    i[j] = i[j - 1];</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                            }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                            j++;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        i.Add(inRange);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    n++;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">IndexRangeSet</a>(rangeSet);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_a16b7892110992d5326e28c5da1d9e4f8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a16b7892110992d5326e28c5da1d9e4f8">Deveel.Data.Index.IndexRangeSet.ChangeRangeSizeToEncompass</a></div><div class="ttdeci">static IndexRange ChangeRangeSizeToEncompass(IndexRange range1, IndexRange range2)</div><div class="ttdoc">Alters the first range so it encompasses the second range. </div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00163">IndexRangeSet.cs:163</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_a1cb9a9cec7c864e4e79fc9b2dfce2b17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#a1cb9a9cec7c864e4e79fc9b2dfce2b17">Deveel.Data.Index.IndexRangeSet.ranges</a></div><div class="ttdeci">readonly List&lt; IndexRange &gt; ranges</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00025">IndexRangeSet.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_af68199bad4448ae8daa1c3bbf6da040c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#af68199bad4448ae8daa1c3bbf6da040c">Deveel.Data.Index.IndexRangeSet.IndexRangeSet</a></div><div class="ttdeci">IndexRangeSet()</div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00027">IndexRangeSet.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm_ac367a911e625c70e8764c86e77e5fb78"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm#ac367a911e625c70e8764c86e77e5fb78">Deveel.Data.Index.IndexRangeSet.IntersectedBy</a></div><div class="ttdeci">static bool IntersectedBy(IndexRange range1, IndexRange range2)</div><div class="ttdoc">Returns true if the two SelectableRange ranges intersect. </div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00114">IndexRangeSet.cs:114</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a1cb9a9cec7c864e4e79fc9b2dfce2b17"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly List&lt;<a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>&gt; Deveel.Data.Index.IndexRangeSet.ranges</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="IndexRangeSet_8cs_source.htm#l00025">25</a> of file <a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Index/<a class="el" href="IndexRangeSet_8cs_source.htm">IndexRangeSet.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
