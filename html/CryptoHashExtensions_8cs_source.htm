<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Security/CryptoHashExtensions.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_e89509ae8478da394c26e35ab2fcc693.htm">Deveel.Data.Security</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CryptoHashExtensions.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="CryptoHashExtensions_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.IO;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Security.Cryptography;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Text;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Security {</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm">   23</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm">CryptoHashExtenions</a> {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">        #region Pbkdf2</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a13a23daf713f02e17e85512180b403d4">   26</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> DefaultIterationCount = 10000;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa9cc750984f797915f813a12a44073fd">   28</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa9cc750984f797915f813a12a44073fd">MakePbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> input, <span class="keywordtype">string</span> salt, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keywordflow">return</span> MakePbkdf2String(hash, input, salt, length, DefaultIterationCount);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4e0b170bbcb112f9e52b77ee03199354">   32</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4e0b170bbcb112f9e52b77ee03199354">MakePbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> input, <span class="keywordtype">string</span> salt, <span class="keywordtype">int</span> length, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="keywordflow">return</span> hash.MakePbkdf2String(input, Convert.FromBase64String(salt), length, iterationCount);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a00d9bc4546d2c336c81911faeffb4ae5">   36</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a00d9bc4546d2c336c81911faeffb4ae5">MakePbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> input, byte[] salt, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">return</span> MakePbkdf2String(hash, input, salt, length, DefaultIterationCount);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ac51f54f5719cd65f94750ff5280a285d">   40</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ac51f54f5719cd65f94750ff5280a285d">MakePbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> input, byte[] salt, <span class="keywordtype">int</span> length, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            var data = Encoding.UTF8.GetBytes(input);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            var result = hash.MakePbkdf2(data, salt, length, iterationCount);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> Convert.ToBase64String(result);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a0b6d682a6b3a8e1abd6262df6774f2c0">   46</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> byte[] <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a0b6d682a6b3a8e1abd6262df6774f2c0">MakePbkdf2</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, byte[] salt, <span class="keywordtype">int</span> length, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            var hashKey = hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm#a8ef05e4bb3a9437e9b14be63703c56bb">Key</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">if</span> (hashKey == null || hashKey.Length == 0)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Key was not specified for the hash.&quot;</span>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> MakePbkdf2(hash, hashKey, salt, length, iterationCount);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a7b47a48dc30cf6bb7ceb1949db18377b">   54</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> byte[] <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a7b47a48dc30cf6bb7ceb1949db18377b">MakePbkdf2</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, byte[] data, byte[] salt, <span class="keywordtype">int</span> length) {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> MakePbkdf2(hash, data, salt, length, DefaultIterationCount);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4928a4a092f6595932f74c748e300c6f">   58</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> byte[] <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4928a4a092f6595932f74c748e300c6f">MakePbkdf2</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, byte[] data, byte[] salt, <span class="keywordtype">int</span> length, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm#a8ef05e4bb3a9437e9b14be63703c56bb">Key</a> = data;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordtype">int</span> hashLength = hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#a93841e5e4638c7ac35bd269692960f51">HashSize</a>/8;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">if</span> ((hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#a93841e5e4638c7ac35bd269692960f51">HashSize</a> &amp; 7) != 0)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                hashLength++;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordtype">int</span> keyLength = length/hashLength;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">if</span> (length &gt; (0xFFFFFFFFL*hashLength) || length &lt; 0)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;length&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">if</span> (length%hashLength != 0)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                keyLength++;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            byte[] extendedkey = <span class="keyword">new</span> byte[salt.Length + 4];</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            Buffer.BlockCopy(salt, 0, extendedkey, 0, salt.Length);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keyword">using</span> (var ms = <span class="keyword">new</span> MemoryStream()) {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; keyLength; i++) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    extendedkey[salt.Length] = (byte) (((i + 1) &gt;&gt; 24) &amp; 0xFF);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    extendedkey[salt.Length + 1] = (byte) (((i + 1) &gt;&gt; 16) &amp; 0xFF);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    extendedkey[salt.Length + 2] = (byte) (((i + 1) &gt;&gt; 8) &amp; 0xFF);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    extendedkey[salt.Length + 3] = (byte) (((i + 1)) &amp; 0xFF);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    byte[] u = hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#ac0eeab35a7ac9dda8e9966fc1bc480f5">Compute</a>(extendedkey);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    Array.Clear(extendedkey, salt.Length, 4);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    byte[] f = u;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; iterationCount; j++) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        u = hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#ac0eeab35a7ac9dda8e9966fc1bc480f5">Compute</a>(u);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; f.Length; k++) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                            f[k] ^= u[k];</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    ms.Write(f, 0, f.Length);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    Array.Clear(u, 0, u.Length);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    Array.Clear(f, 0, f.Length);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                byte[] dk = <span class="keyword">new</span> byte[length];</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                ms.Position = 0;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                ms.Read(dk, 0, length);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                ms.Position = 0;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">long</span> i = 0; i &lt; ms.Length; i++) {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    ms.WriteByte(0);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                Array.Clear(extendedkey, 0, extendedkey.Length);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">return</span> dk;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a074329b1cf7115d5f1507e1c6397f53a">  112</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a074329b1cf7115d5f1507e1c6397f53a">VerifyPbkdf2</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, byte[] hashed, byte[] otherData, byte[] salt) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">return</span> VerifyPbkdf2(hash, hashed, otherData, salt, DefaultIterationCount);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a953e19a6f5c1fe84d42fcf6ddabe3d1f">  116</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a953e19a6f5c1fe84d42fcf6ddabe3d1f">VerifyPbkdf2</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, byte[] hashed, byte[] otherData, byte[] salt, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordtype">int</span> length = hashed.Length;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            var otherHashed = hash.MakePbkdf2(otherData, salt, length, iterationCount);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (otherHashed.Length != hashed.Length)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">return</span> ByteArraysEqual(hashed, otherHashed);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa7df347d81d1582f089523fba60c2e31">  127</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa7df347d81d1582f089523fba60c2e31">VerifyPbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> hashedString, <span class="keywordtype">string</span> otherString, byte[] salt) {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">return</span> VerifyPbkdf2String(hash, hashedString, otherString, salt, DefaultIterationCount);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a87620e6321e6e714e64c1ecd31ba3f0c">  131</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a87620e6321e6e714e64c1ecd31ba3f0c">VerifyPbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> hashedString, <span class="keywordtype">string</span> otherString, byte[] salt, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> hash.VerifyPbkdf2String(hashedString, otherString, Convert.ToBase64String(salt), iterationCount);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa8165460bc7fcf7420401e9dd6dc3be0">  135</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa8165460bc7fcf7420401e9dd6dc3be0">VerifyPbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> hashedString, <span class="keywordtype">string</span> otherString, <span class="keywordtype">string</span> saltString) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> VerifyPbkdf2String(hash, hashedString, otherString, saltString, DefaultIterationCount);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ae1fb384226d5247de63715f1b07f4029">  139</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ae1fb384226d5247de63715f1b07f4029">VerifyPbkdf2String</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">IKeyedHashFunction</a> hash, <span class="keywordtype">string</span> hashedString, <span class="keywordtype">string</span> otherString, <span class="keywordtype">string</span> saltString, <span class="keywordtype">int</span> iterationCount) {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            var hashed = Convert.FromBase64String(hashedString);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            var otherData = Encoding.UTF8.GetBytes(otherString);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            var salt = Convert.FromBase64String(saltString);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> hash.VerifyPbkdf2(hashed, otherData, salt, iterationCount);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a842919c9bb41140b518e3421f6b6e3d2">  147</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a842919c9bb41140b518e3421f6b6e3d2">ByteArraysEqual</a>(byte[] a, byte[] b) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (ReferenceEquals(a, b)) {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">if</span> (a == null || b == null || a.Length != b.Length) {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordtype">bool</span> areSame = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; a.Length; i++) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                areSame &amp;= (a[i] == b[i]);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> areSame;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">        #endregion</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a6bcc1cdea7c96cb3685df909d2bc154a">  165</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a6bcc1cdea7c96cb3685df909d2bc154a">ComputeString</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm">IHashFunction</a> hash, <span class="keywordtype">string</span> s) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            var data = Encoding.UTF8.GetBytes(s);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">return</span> BinaryToHex(hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#ac0eeab35a7ac9dda8e9966fc1bc480f5">Compute</a>(data));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a5cbc98183111d08ff420bf8dc81ee31f">  170</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> byte[] <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a5cbc98183111d08ff420bf8dc81ee31f">GenerateSalt</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm">IHashFunction</a> hash) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordtype">int</span> byteLength = (hash.<a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#a93841e5e4638c7ac35bd269692960f51">HashSize</a> / 2) / 8;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            byte[] buf = <span class="keyword">new</span> byte[byteLength];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            var rng = <span class="keyword">new</span> RNGCryptoServiceProvider();</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            rng.GetBytes(buf);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> buf;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a99b6cdf1f0574af31b756c3ebd6974fd">  178</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a99b6cdf1f0574af31b756c3ebd6974fd">GenerateSaltString</a>(<span class="keyword">this</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm">IHashFunction</a> hash) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">return</span> Convert.ToBase64String(hash.GenerateSalt());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a8729e01f9f8e2ef8d2cd950a4b6bbaf2">  182</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a8729e01f9f8e2ef8d2cd950a4b6bbaf2">BinaryToHex</a>(byte[] data) {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordtype">char</span>[] hex = <span class="keyword">new</span> <span class="keywordtype">char</span>[data.Length * 2];</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> iter = 0; iter &lt; data.Length; iter++) {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                byte hexChar = ((byte)(data[iter] &gt;&gt; 4));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                hex[iter * 2] = (char)(hexChar &gt; 9 ? hexChar + 0x37 : hexChar + 0x30);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                hexChar = ((byte)(data[iter] &amp; 0xF));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                hex[(iter * 2) + 1] = (<span class="keywordtype">char</span>)(hexChar &gt; 9 ? hexChar + 0x37 : hexChar + 0x30);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> string(hex);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a0b6d682a6b3a8e1abd6262df6774f2c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a0b6d682a6b3a8e1abd6262df6774f2c0">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2</a></div><div class="ttdeci">static byte[] MakePbkdf2(this IKeyedHashFunction hash, byte[] salt, int length, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00046">CryptoHashExtensions.cs:46</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_aa9cc750984f797915f813a12a44073fd"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa9cc750984f797915f813a12a44073fd">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2String</a></div><div class="ttdeci">static string MakePbkdf2String(this IKeyedHashFunction hash, string input, string salt, int length)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00028">CryptoHashExtensions.cs:28</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_ac51f54f5719cd65f94750ff5280a285d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ac51f54f5719cd65f94750ff5280a285d">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2String</a></div><div class="ttdeci">static string MakePbkdf2String(this IKeyedHashFunction hash, string input, byte[] salt, int length, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00040">CryptoHashExtensions.cs:40</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_aa7df347d81d1582f089523fba60c2e31"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa7df347d81d1582f089523fba60c2e31">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2String</a></div><div class="ttdeci">static bool VerifyPbkdf2String(this IKeyedHashFunction hash, string hashedString, string otherString, byte[] salt)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00127">CryptoHashExtensions.cs:127</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction_htm_a93841e5e4638c7ac35bd269692960f51"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#a93841e5e4638c7ac35bd269692960f51">Deveel.Data.Security.IHashFunction.HashSize</a></div><div class="ttdeci">int HashSize</div><div class="ttdoc">Gets the size of the hash to generate. </div><div class="ttdef"><b>Definition:</b> <a href="IHashFunction_8cs_source.htm#l00027">IHashFunction.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a842919c9bb41140b518e3421f6b6e3d2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a842919c9bb41140b518e3421f6b6e3d2">Deveel.Data.Security.CryptoHashExtenions.ByteArraysEqual</a></div><div class="ttdeci">static bool ByteArraysEqual(byte[] a, byte[] b)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00147">CryptoHashExtensions.cs:147</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a6bcc1cdea7c96cb3685df909d2bc154a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a6bcc1cdea7c96cb3685df909d2bc154a">Deveel.Data.Security.CryptoHashExtenions.ComputeString</a></div><div class="ttdeci">static string ComputeString(this IHashFunction hash, string s)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00165">CryptoHashExtensions.cs:165</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a4e0b170bbcb112f9e52b77ee03199354"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4e0b170bbcb112f9e52b77ee03199354">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2String</a></div><div class="ttdeci">static string MakePbkdf2String(this IKeyedHashFunction hash, string input, string salt, int length, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00032">CryptoHashExtensions.cs:32</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_aa8165460bc7fcf7420401e9dd6dc3be0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#aa8165460bc7fcf7420401e9dd6dc3be0">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2String</a></div><div class="ttdeci">static bool VerifyPbkdf2String(this IKeyedHashFunction hash, string hashedString, string otherString, string saltString)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00135">CryptoHashExtensions.cs:135</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm">Deveel.Data.Security.IHashFunction</a></div><div class="ttdoc">Defines a function to hash as user provided password </div><div class="ttdef"><b>Definition:</b> <a href="IHashFunction_8cs_source.htm#l00023">IHashFunction.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm">Deveel.Data.Security.CryptoHashExtenions</a></div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00023">CryptoHashExtensions.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a4928a4a092f6595932f74c748e300c6f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a4928a4a092f6595932f74c748e300c6f">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2</a></div><div class="ttdeci">static byte[] MakePbkdf2(this IKeyedHashFunction hash, byte[] data, byte[] salt, int length, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00058">CryptoHashExtensions.cs:58</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a7b47a48dc30cf6bb7ceb1949db18377b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a7b47a48dc30cf6bb7ceb1949db18377b">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2</a></div><div class="ttdeci">static byte[] MakePbkdf2(this IKeyedHashFunction hash, byte[] data, byte[] salt, int length)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00054">CryptoHashExtensions.cs:54</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a8729e01f9f8e2ef8d2cd950a4b6bbaf2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a8729e01f9f8e2ef8d2cd950a4b6bbaf2">Deveel.Data.Security.CryptoHashExtenions.BinaryToHex</a></div><div class="ttdeci">static string BinaryToHex(byte[] data)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00182">CryptoHashExtensions.cs:182</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a99b6cdf1f0574af31b756c3ebd6974fd"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a99b6cdf1f0574af31b756c3ebd6974fd">Deveel.Data.Security.CryptoHashExtenions.GenerateSaltString</a></div><div class="ttdeci">static string GenerateSaltString(this IHashFunction hash)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00178">CryptoHashExtensions.cs:178</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_ae1fb384226d5247de63715f1b07f4029"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#ae1fb384226d5247de63715f1b07f4029">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2String</a></div><div class="ttdeci">static bool VerifyPbkdf2String(this IKeyedHashFunction hash, string hashedString, string otherString, string saltString, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00139">CryptoHashExtensions.cs:139</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a87620e6321e6e714e64c1ecd31ba3f0c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a87620e6321e6e714e64c1ecd31ba3f0c">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2String</a></div><div class="ttdeci">static bool VerifyPbkdf2String(this IKeyedHashFunction hash, string hashedString, string otherString, byte[] salt, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00131">CryptoHashExtensions.cs:131</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm">Deveel.Data.Security.IKeyedHashFunction</a></div><div class="ttdoc">An hash function that requires a private key to compute the final result. </div><div class="ttdef"><b>Definition:</b> <a href="IKeyedHashFunction_8cs_source.htm#l00024">IKeyedHashFunction.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a074329b1cf7115d5f1507e1c6397f53a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a074329b1cf7115d5f1507e1c6397f53a">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2</a></div><div class="ttdeci">static bool VerifyPbkdf2(this IKeyedHashFunction hash, byte[] hashed, byte[] otherData, byte[] salt)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00112">CryptoHashExtensions.cs:112</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction_htm_a8ef05e4bb3a9437e9b14be63703c56bb"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Security_1_1IKeyedHashFunction.htm#a8ef05e4bb3a9437e9b14be63703c56bb">Deveel.Data.Security.IKeyedHashFunction.Key</a></div><div class="ttdeci">byte[] Key</div><div class="ttdoc">Gets or sets the private key to use for computing the hash. </div><div class="ttdef"><b>Definition:</b> <a href="IKeyedHashFunction_8cs_source.htm#l00028">IKeyedHashFunction.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a5cbc98183111d08ff420bf8dc81ee31f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a5cbc98183111d08ff420bf8dc81ee31f">Deveel.Data.Security.CryptoHashExtenions.GenerateSalt</a></div><div class="ttdeci">static byte[] GenerateSalt(this IHashFunction hash)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00170">CryptoHashExtensions.cs:170</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction_htm_ac0eeab35a7ac9dda8e9966fc1bc480f5"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Security_1_1IHashFunction.htm#ac0eeab35a7ac9dda8e9966fc1bc480f5">Deveel.Data.Security.IHashFunction.Compute</a></div><div class="ttdeci">byte[] Compute(byte[] data)</div><div class="ttdoc">Computes the hash from the given input. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a953e19a6f5c1fe84d42fcf6ddabe3d1f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a953e19a6f5c1fe84d42fcf6ddabe3d1f">Deveel.Data.Security.CryptoHashExtenions.VerifyPbkdf2</a></div><div class="ttdeci">static bool VerifyPbkdf2(this IKeyedHashFunction hash, byte[] hashed, byte[] otherData, byte[] salt, int iterationCount)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00116">CryptoHashExtensions.cs:116</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions_htm_a00d9bc4546d2c336c81911faeffb4ae5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Security_1_1CryptoHashExtenions.htm#a00d9bc4546d2c336c81911faeffb4ae5">Deveel.Data.Security.CryptoHashExtenions.MakePbkdf2String</a></div><div class="ttdeci">static string MakePbkdf2String(this IKeyedHashFunction hash, string input, byte[] salt, int length)</div><div class="ttdef"><b>Definition:</b> <a href="CryptoHashExtensions_8cs_source.htm#l00036">CryptoHashExtensions.cs:36</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
