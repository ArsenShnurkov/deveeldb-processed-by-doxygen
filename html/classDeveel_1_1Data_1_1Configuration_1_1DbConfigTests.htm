<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Configuration.DbConfigTests Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Configuration.htm">Configuration</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm">DbConfigTests</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Configuration.DbConfigTests Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2c3b4753b28c295a9db5fff9b482f61e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">TestEnum</a> { <a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61ea06c2cea18679d64399783748fa367bdd">TestEnum.One</a> = 1, 
<a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61eaaada29daee1d64ed0fe907043855cb7e">TestEnum.Two</a> = 2, 
<a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61ea7a1920d61156abc05a60135aefe8bc67">TestEnum.Default</a> = 0
 }<tr class="separator:a2c3b4753b28c295a9db5fff9b482f61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8331ce9c3a44372aed65285ad4acfb8f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a8331ce9c3a44372aed65285ad4acfb8f">DefaultConfig</a> ()</td></tr>
<tr class="separator:a8331ce9c3a44372aed65285ad4acfb8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76a76a5831501aea5cb02544fee4e63d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a76a76a5831501aea5cb02544fee4e63d">GetValuesFromRoot</a> ()</td></tr>
<tr class="separator:a76a76a5831501aea5cb02544fee4e63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae16f72c81a680533ce8bbe72c6bbeb7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#ae16f72c81a680533ce8bbe72c6bbeb7e">GetValuesFromChild</a> ()</td></tr>
<tr class="separator:ae16f72c81a680533ce8bbe72c6bbeb7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ca668420c63ba80e62e84bb5c924145"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a0ca668420c63ba80e62e84bb5c924145">GetValueAsInt32</a> ()</td></tr>
<tr class="separator:a0ca668420c63ba80e62e84bb5c924145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad62385cbf70b7c91e078e8af4788a4fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#ad62385cbf70b7c91e078e8af4788a4fa">GetBooleanValue</a> (string key, string value, bool expected)</td></tr>
<tr class="separator:ad62385cbf70b7c91e078e8af4788a4fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208f009f702acc3e44ee1dc041eeb7cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a208f009f702acc3e44ee1dc041eeb7cf">GetEnumValue</a> (object value, <a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">TestEnum</a> expected)</td></tr>
<tr class="separator:a208f009f702acc3e44ee1dc041eeb7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa23d72547431750a1490b9d7b2f20f90"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#aa23d72547431750a1490b9d7b2f20f90">Extensions_LoadFromProperties</a> ()</td></tr>
<tr class="separator:aa23d72547431750a1490b9d7b2f20f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00023">23</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="a2c3b4753b28c295a9db5fff9b482f61e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">Deveel.Data.Configuration.DbConfigTests.TestEnum</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a2c3b4753b28c295a9db5fff9b482f61ea06c2cea18679d64399783748fa367bdd"></a>One&#160;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a2c3b4753b28c295a9db5fff9b482f61eaaada29daee1d64ed0fe907043855cb7e"></a>Two&#160;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a2c3b4753b28c295a9db5fff9b482f61ea7a1920d61156abc05a60135aefe8bc67"></a>Default&#160;</td><td class="fielddoc">
</td></tr>
</table>

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00131">131</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                             {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            One = 1,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            Two = 2,</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <a class="code" href="namespaceDeveel_1_1Data_1_1Sql.htm#a3f41adf2ae023b6ec661173e43611b42a7a1920d61156abc05a60135aefe8bc67">Default</a> = 0</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_htm_a3f41adf2ae023b6ec661173e43611b42a7a1920d61156abc05a60135aefe8bc67"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql.htm#a3f41adf2ae023b6ec661173e43611b42a7a1920d61156abc05a60135aefe8bc67">Deveel.Data.Sql.QueryParameterStyle.Default</a></div><div class="ttdoc">No specific form of the parameter was given: this default to the system default parameter style confi...</div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a8331ce9c3a44372aed65285ad4acfb8f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.DefaultConfig </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00025">25</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                    {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            Assert.IsNull(config.Parent);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            Assert.IsNull(config.Source);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa23d72547431750a1490b9d7b2f20f90"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.Extensions_LoadFromProperties </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00138">138</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                    {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            var properties = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            properties.AppendLine(<span class="stringliteral">&quot;system.readOnly = false&quot;</span>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            properties.AppendLine(<span class="stringliteral">&quot;caching.type = Memory&quot;</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            IConfiguration configuration = null;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            Assert.DoesNotThrow(() =&gt; configuration = <span class="keyword">new</span> Configuration(<span class="keyword">new</span> StringConfigSource(properties.ToString())));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            Assert.IsNotNull(configuration);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            Assert.DoesNotThrow(() =&gt; configuration.Load(<span class="keyword">new</span> PropertiesConfigFormatter()));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            Assert.DoesNotThrow(() =&gt; Assert.IsNotNull(configuration.GetValue(<span class="stringliteral">&quot;system.readOnly&quot;</span>)));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordtype">bool</span> readOnly = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            Assert.DoesNotThrow(() =&gt; readOnly = configuration.GetBoolean(<span class="stringliteral">&quot;system.readOnly&quot;</span>));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            Assert.IsFalse(readOnly);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad62385cbf70b7c91e078e8af4788a4fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.GetBooleanValue </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00100">100</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                                             {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(key, value));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">object</span> configValue = null;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            Assert.DoesNotThrow(() =&gt; configValue = config.GetBoolean(key));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            Assert.IsNotNull(configValue);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            Assert.IsInstanceOf&lt;<span class="keywordtype">bool</span>&gt;(configValue);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            Assert.AreEqual(expected, configValue);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a208f009f702acc3e44ee1dc041eeb7cf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.GetEnumValue </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">TestEnum</a>&#160;</td>
          <td class="paramname"><em>expected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00118">118</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                                  {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(<span class="stringliteral">&quot;test&quot;</span>, value));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordtype">object</span> configValue = null;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            Assert.DoesNotThrow(() =&gt; configValue = config.GetValue&lt;<a class="code" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">TestEnum</a>&gt;(<span class="stringliteral">&quot;test&quot;</span>));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">TestEnum</a>&gt;(configValue);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            Assert.AreEqual(expected, configValue);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests_htm_a2c3b4753b28c295a9db5fff9b482f61e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Configuration_1_1DbConfigTests.htm#a2c3b4753b28c295a9db5fff9b482f61e">Deveel.Data.Configuration.DbConfigTests.TestEnum</a></div><div class="ttdeci">TestEnum</div><div class="ttdef"><b>Definition:</b> <a href="DbConfigTests_8cs_source.htm#l00131">DbConfigTests.cs:131</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0ca668420c63ba80e62e84bb5c924145"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.GetValueAsInt32 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00081">81</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                      {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>, <span class="stringliteral">&quot;22&quot;</span>));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordtype">object</span> value = null;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            Assert.DoesNotThrow(() =&gt; value = config.GetInt32(<span class="stringliteral">&quot;test.oneKey&quot;</span>));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            Assert.IsNotNull(value);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            Assert.IsInstanceOf&lt;<span class="keywordtype">int</span>&gt;(value);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            Assert.AreEqual(22, value);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae16f72c81a680533ce8bbe72c6bbeb7e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.GetValuesFromChild </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00054">54</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                         {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>, <span class="stringliteral">&quot;one&quot;</span>));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            IConfiguration child = null;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            Assert.DoesNotThrow(() =&gt; child = <span class="keyword">new</span> Configuration(config));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            Assert.IsNotNull(child);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            Assert.IsNotNull(child.Parent);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            Assert.DoesNotThrow(() =&gt; child.SetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>, 45));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordtype">object</span> value = null;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            Assert.DoesNotThrow(() =&gt; value = child.GetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            Assert.IsNotNull(value);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            Assert.IsInstanceOf&lt;<span class="keywordtype">int</span>&gt;(value);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            Assert.AreEqual(45, value);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            Assert.DoesNotThrow(() =&gt; value = config.GetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>));</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            Assert.IsNotNull(value);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            Assert.IsInstanceOf&lt;<span class="keywordtype">string</span>&gt;(value);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            Assert.AreEqual(<span class="stringliteral">&quot;one&quot;</span>, value);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a76a76a5831501aea5cb02544fee4e63d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Configuration.DbConfigTests.GetValuesFromRoot </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="DbConfigTests_8cs_source.htm#l00034">34</a> of file <a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                        {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            IConfiguration config = null;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            Assert.DoesNotThrow(() =&gt; config = <span class="keyword">new</span> Configuration());</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            Assert.IsNotNull(config);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>, 54));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            Assert.DoesNotThrow(() =&gt; config.SetValue(<span class="stringliteral">&quot;test.twoKeys&quot;</span>, null));</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordtype">object</span> value1 = null;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordtype">object</span> value2 = null;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            Assert.DoesNotThrow(() =&gt; value1 = config.GetValue(<span class="stringliteral">&quot;test.oneKey&quot;</span>));</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            Assert.IsNotNull(value1);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            Assert.IsInstanceOf&lt;<span class="keywordtype">int</span>&gt;(value1);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            Assert.AreEqual(54, value1);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            Assert.DoesNotThrow(() =&gt; value2 = config.GetValue(<span class="stringliteral">&quot;test.twoKeys&quot;</span>));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            Assert.IsNull(value2);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-nunit/Deveel.Data.Configuration/<a class="el" href="DbConfigTests_8cs_source.htm">DbConfigTests.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
