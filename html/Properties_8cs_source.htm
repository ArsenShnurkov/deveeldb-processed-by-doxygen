<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Util/Properties.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_6756c90673132daa25f33a7157eea2eb.htm">Deveel.Data.Util</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Properties.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Properties_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections.Generic;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.IO;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Text;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Util {</div>
<div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">   24</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Properties</a> : Dictionary&lt;string, string&gt; {</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7e84a9e3b1f3e587158f5c0609ecd3b1">   26</a></span>&#160;        <span class="keyword">protected</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Properties</a> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7e84a9e3b1f3e587158f5c0609ecd3b1">defaults</a>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a83db8fdd09b695cb0968bd31a332bbce">   31</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a83db8fdd09b695cb0968bd31a332bbce">Properties</a>() {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        }</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae403cfd6d65e4394e17174e60dff8748">   39</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae403cfd6d65e4394e17174e60dff8748">Properties</a>(<a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Properties</a> defaults) {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            this.defaults = defaults;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aa57388a2f0e002907a5951ca7ee5040a">   56</a></span>&#160;        <span class="keyword">public</span> Object <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aa57388a2f0e002907a5951ca7ee5040a">SetProperty</a>(String key, String value) {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">this</span>[key] = value;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> Load(Stream inStream) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// The spec says that the file must be encoded using ISO-8859-1.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            StreamReader reader = <span class="keyword">new</span> StreamReader(inStream, Encoding.GetEncoding(<span class="stringliteral">&quot;ISO-8859-1&quot;</span>));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            String line;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">while</span> ((line = reader.ReadLine()) != null) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordtype">char</span> c = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordtype">int</span> pos = 0;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="comment">// Leading whitespaces must be deleted first.</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                       &amp;&amp; Char.IsWhiteSpace(c = line[pos]))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    pos++;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="comment">// If empty line or begins with a comment character, skip this line.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">if</span> ((line.Length - pos) == 0</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                || line[pos] == <span class="charliteral">&#39;#&#39;</span> || line[pos] == <span class="charliteral">&#39;!&#39;</span>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="comment">// The characters up to the next Whitespace, &#39;:&#39;, or &#39;=&#39;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="comment">// describe the key.  But look for escape sequences.</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="comment">// Try to short-circuit when there is no escape char.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordtype">int</span> start = pos;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordtype">bool</span> needsEscape = line.IndexOf(<span class="charliteral">&#39;\\&#39;</span>, pos) != -1;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                StringBuilder key = needsEscape ? <span class="keyword">new</span> StringBuilder() : null;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                       &amp;&amp; !Char.IsWhiteSpace(c = line[pos++])</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                       &amp;&amp; c != <span class="charliteral">&#39;=&#39;</span> &amp;&amp; c != <span class="charliteral">&#39;:&#39;</span>) {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">if</span> (needsEscape &amp;&amp; c == <span class="charliteral">&#39;\\&#39;</span>) {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        <span class="keywordflow">if</span> (pos == line.Length) {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            <span class="comment">// The line continues on the next line.  If there</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            <span class="comment">// is no next line, just treat it as a key with an</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                            <span class="comment">// empty value.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                            line = reader.ReadLine();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                            <span class="keywordflow">if</span> (line == null)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                line = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                            pos = 0;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                   &amp;&amp; Char.IsWhiteSpace(c = line[pos]))</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                pos++;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            c = line[pos++];</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            <span class="keywordflow">switch</span> (c) {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                    key.Append(<span class="charliteral">&#39;\n&#39;</span>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                    key.Append(<span class="charliteral">&#39;\t&#39;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                    key.Append(<span class="charliteral">&#39;\r&#39;</span>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;u&#39;</span>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                    <span class="keywordflow">if</span> (pos + 4 &lt;= line.Length) {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                        <span class="keywordtype">char</span> uni = (char)Convert.ToInt32(line.Substring(pos, 4), 16);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                        key.Append(uni);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                        pos += 4;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                    }        <span class="comment">// else throw exception?</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                    key.Append(c);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                            }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (needsEscape)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        key.Append(c);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordtype">bool</span> isDelim = (c == <span class="charliteral">&#39;:&#39;</span> || c == <span class="charliteral">&#39;=&#39;</span>);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a> keyString;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">if</span> (needsEscape)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    keyString = key.ToString();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (isDelim || <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9">Char</a>.IsWhiteSpace(c))</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    keyString = line.Substring(start, (pos - 1) - start);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    keyString = line.Substring(start, pos - start);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                       &amp;&amp; <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9">Char</a>.IsWhiteSpace(c = line[pos]))</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    pos++;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (!isDelim &amp;&amp; (c == <span class="charliteral">&#39;:&#39;</span> || c == <span class="charliteral">&#39;=&#39;</span>)) {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    pos++;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                           &amp;&amp; <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9">Char</a>.IsWhiteSpace(c = line[pos]))</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        pos++;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="comment">// Short-circuit if no escape chars found.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">if</span> (!needsEscape) {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keyword">this</span>[keyString] = line.Substring(pos);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="comment">// Escape char found so iterate through the rest of the line.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                StringBuilder element = <span class="keyword">new</span> StringBuilder(line.Length - pos);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">while</span> (pos &lt; line.Length) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    c = line[pos++];</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;\\&#39;</span>) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        <span class="keywordflow">if</span> (pos == line.Length) {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                            <span class="comment">// The line continues on the next line.</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                            line = reader.ReadLine();</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="comment">// We might have seen a backslash at the end of</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            <span class="comment">// the file.  The JDK ignores the backslash in</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                            <span class="comment">// this case, so we follow for compatibility.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                            <span class="keywordflow">if</span> (line == null)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            pos = 0;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            <span class="keywordflow">while</span> (pos &lt; line.Length</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                   &amp;&amp; <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9">Char</a>.IsWhiteSpace(c = line[pos]))</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                pos++;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                            element.EnsureCapacity(line.Length - pos + element.Length);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            c = line[pos++];</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            <span class="keywordflow">switch</span> (c) {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                    element.Append(<span class="charliteral">&#39;\n&#39;</span>);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                    element.Append(<span class="charliteral">&#39;\t&#39;</span>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                    element.Append(<span class="charliteral">&#39;\r&#39;</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                <span class="keywordflow">case</span> <span class="charliteral">&#39;u&#39;</span>:</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                    <span class="keywordflow">if</span> (pos + 4 &lt;= line.Length) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                        <span class="keywordtype">char</span> uni = (char)Convert.ToInt32(line.Substring(pos, 4), 16);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                        element.Append(uni);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                        pos += 4;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                    }        <span class="comment">// else throw exception?</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                    element.Append(c);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        element.Append(c);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">this</span>[keyString] = element.ToString();</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        [Obsolete(<span class="stringliteral">&quot;Use Store(Stream, string) method instead.&quot;</span>)]</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a038bed4df707aaa92ba3ecd643c281cb">  255</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a038bed4df707aaa92ba3ecd643c281cb">Save</a>(Stream output, String header) {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                Store(output, header);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            } <span class="keywordflow">catch</span> (IOException) {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae2bf261d510bc78f3ab7e69473414083">  296</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae2bf261d510bc78f3ab7e69473414083">Store</a>(Stream output, String header) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">// The spec says that the file must be encoded using ISO-8859-1.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            StreamWriter writer = <span class="keyword">new</span> StreamWriter(output, Encoding.GetEncoding(<span class="stringliteral">&quot;ISO-8859-1&quot;</span>));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">if</span> (header != null)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                writer.WriteLine(<span class="stringliteral">&quot;#&quot;</span> + header);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            writer.WriteLine(<span class="stringliteral">&quot;#&quot;</span> + DateTime.Now);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            StringBuilder s = <span class="keyword">new</span> StringBuilder(); <span class="comment">// Reuse the same buffer.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">foreach</span> (var entry <span class="keywordflow">in</span> <span class="keyword">this</span>) {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                FormatForOutput((String)entry.Key, s, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                s.Append(<span class="charliteral">&#39;=&#39;</span>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                FormatForOutput((String)entry.Value, s, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                writer.WriteLine(s);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            writer.Flush();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ab372de55b61c09f68b5a0added158f42">  328</a></span>&#160;        <span class="keyword">public</span> String <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ab372de55b61c09f68b5a0added158f42">GetProperty</a>(String key) {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Properties</a> prop = <span class="keyword">this</span>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="comment">// Eliminate tail recursion.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                String value = (String)prop[key];</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                <span class="keywordflow">if</span> (value != null)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    <span class="keywordflow">return</span> value;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                prop = prop.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7e84a9e3b1f3e587158f5c0609ecd3b1">defaults</a>;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">while</span> (prop != null);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a01a2834fbadaed3ddd50608c74ed2b6d">  356</a></span>&#160;        <span class="keyword">public</span> String <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a01a2834fbadaed3ddd50608c74ed2b6d">GetProperty</a>(String key, String defaultValue) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            String prop = GetProperty(key);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">if</span> (prop == null)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                prop = defaultValue;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">return</span> prop;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7080b0e9eb760beea06b1aaa0c184f62">  363</a></span>&#160;        <span class="keyword">public</span> ICollection PropertyNames {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keyword">get</span> {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="comment">// We make a new Set that holds all the keys, then return an enumeration</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="comment">// for that. This prevents modifications from ruining the enumeration,</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="comment">// as well as ignoring duplicates.</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Properties</a> prop = <span class="keyword">this</span>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                var s = <span class="keyword">new</span> List&lt;string&gt;();</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                <span class="comment">// Eliminate tail recursion.</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    s.AddRange(prop.Keys);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    prop = prop.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7e84a9e3b1f3e587158f5c0609ecd3b1">defaults</a>;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                } <span class="keywordflow">while</span> (prop != null);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#afc352565fc799945547a42de96a77a86">  390</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#afc352565fc799945547a42de96a77a86">List</a>(Stream output) {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            StreamWriter writer = <span class="keyword">new</span> StreamWriter(output);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            List(writer);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aefd2a4e3e832e83870468d9455ba4efe">  395</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aefd2a4e3e832e83870468d9455ba4efe">List</a>(StreamWriter output) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            output.WriteLine(<span class="stringliteral">&quot;-- listing properties --&quot;</span>);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">foreach</span> (var entry <span class="keywordflow">in</span> <span class="keyword">this</span>) {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                output.Write((String)entry.Key + <span class="stringliteral">&quot;=&quot;</span>);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                String s = (String)entry.Value;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                if (s != null &amp;&amp; s.Length &gt; 40)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    output.WriteLine(s.Substring(0, 37) + <span class="stringliteral">&quot;...&quot;</span>);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    output.WriteLine(s);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            output.Flush();</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a465a5c0fdf7df3941633cd15e65c2568">  420</a></span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a465a5c0fdf7df3941633cd15e65c2568">FormatForOutput</a>(String str, StringBuilder buffer, <span class="keywordtype">bool</span> key) {</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">if</span> (key) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                buffer.Length = 0;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                buffer.EnsureCapacity(str.Length);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                buffer.EnsureCapacity(buffer.Length + str.Length);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="keywordtype">bool</span> head = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordtype">int</span> size = str.Length;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; i++) {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <span class="keywordtype">char</span> c = str[i];</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                <span class="keywordflow">switch</span> (c) {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;\n&#39;</span>:</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                        buffer.Append(<span class="stringliteral">&quot;\\n&quot;</span>);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;\r&#39;</span>:</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                        buffer.Append(<span class="stringliteral">&quot;\\r&quot;</span>);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;\t&#39;</span>:</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                        buffer.Append(<span class="stringliteral">&quot;\\t&quot;</span>);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        buffer.Append(head ? <span class="stringliteral">&quot;\\ &quot;</span> : <span class="stringliteral">&quot; &quot;</span>);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;\\&#39;</span>:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;!&#39;</span>:</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;#&#39;</span>:</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;=&#39;</span>:</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keywordflow">case</span> <span class="charliteral">&#39;:&#39;</span>:</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        buffer.Append(<span class="charliteral">&#39;\\&#39;</span>).Append(c);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="keywordflow">if</span> (c &lt; &#39; &#39; || c &gt; <span class="charliteral">&#39;~&#39;</span>) {</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                            String hex = ((int)c).ToString(<span class="stringliteral">&quot;{0:x4}&quot;</span>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                            buffer.Append(<span class="stringliteral">&quot;\\u0000&quot;</span>.Substring(0, 6 - hex.Length));</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                            buffer.Append(hex);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                            buffer.Append(c);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                <span class="keywordflow">if</span> (c != <span class="charliteral">&#39; &#39;</span>)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    head = key;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">        TODO:</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">        public void storeToXML(Stream os, String comment) {</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">            storeToXML(os, comment, &quot;UTF-8&quot;);</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">        public void storeToXML(Stream os, String comment, String encoding) {</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">            if (os == null)</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">                throw new ArgumentNullException(&quot;os&quot;);</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">            if (encoding == null)</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">                throw new ArgumentNullException(&quot;encoding&quot;);</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">            try {</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment">                DOMImplementationRegistry registry =</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">                  DOMImplementationRegistry.newInstance();</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">                DOMImplementation domImpl = registry.getDOMImplementation(&quot;LS 3.0&quot;);</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">                DocumentType doctype =</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">                  domImpl.createDocumentType(&quot;properties&quot;, null,</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">                                 &quot;http://java.sun.com/dtd/properties.dtd&quot;);</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">                Document doc = domImpl.createDocument(null, &quot;properties&quot;, doctype);</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">                Element root = doc.getDocumentElement();</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">                if (comment != null) {</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">                    Element commentElement = doc.createElement(&quot;comment&quot;);</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">                    commentElement.appendChild(doc.createTextNode(comment));</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">                    root.appendChild(commentElement);</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">                Iterator iterator = entrySet().iterator();</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">                while (iterator.hasNext()) {</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">                    Map.Entry entry = (Map.Entry)iterator.next();</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">                    Element entryElement = doc.createElement(&quot;entry&quot;);</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">                    entryElement.setAttribute(&quot;key&quot;, (String)entry.getKey());</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">                    entryElement.appendChild(doc.createTextNode((String)</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">                                        entry.getValue()));</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">                    root.appendChild(entryElement);</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">                DOMImplementationLS loadAndSave = (DOMImplementationLS)domImpl;</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">                LSSerializer serializer = loadAndSave.createLSSerializer();</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">                LSOutput output = loadAndSave.createLSOutput();</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">                output.setByteStream(os);</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">                output.setEncoding(encoding);</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">                serializer.write(doc, output);</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">            } catch (ClassNotFoundException e) {</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">                throw (IOException)</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">                  new IOException(&quot;The XML classes could not be found.&quot;).initCause(e);</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">            } catch (InstantiationException e) {</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">                throw (IOException)</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">                  new IOException(&quot;The XML classes could not be instantiated.&quot;)</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">                  .initCause(e);</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">            } catch (IllegalAccessException e) {</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">                throw (IOException)</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">                  new IOException(&quot;The XML classes could not be accessed.&quot;)</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">                  .initCause(e);</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">        public void loadFromXML(InputStream input) {</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">            if (input == null)</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">                throw new NullPointerException(&quot;Null input stream supplied.&quot;);</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment">            try {</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">                XMLInputFactory factory = XMLInputFactory.newInstance();</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">                // Don&#39;t resolve external entity references</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">                factory.setProperty(&quot;javax.xml.stream.isSupportingExternalEntities&quot;,</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">                                    Boolean.FALSE);</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">                XMLStreamReader reader = factory.createXMLStreamReader(input);</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">                String name, key = null;</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">                StringBuffer buf = null;</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">                while (reader.hasNext()) {</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">                    switch (reader.next()) {</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">                        case XMLStreamConstants.START_ELEMENT:</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">                            name = reader.getLocalName();</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">                            if (buf == null &amp;&amp; &quot;entry&quot;.equals(name)) {</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">                                key = reader.getAttributeValue(null, &quot;key&quot;);</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">                                if (key == null) {</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">                                    String msg = &quot;missing &#39;key&#39; attribute&quot;;</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">                                    throw new InvalidPropertiesFormatException(msg);</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">                                }</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">                                buf = new StringBuffer();</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">                            } else if (!&quot;properties&quot;.equals(name) &amp;&amp; !&quot;comment&quot;.equals(name)) {</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">                                String msg = &quot;unexpected element name &#39;&quot; + name + &quot;&#39;&quot;;</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">                                throw new InvalidPropertiesFormatException(msg);</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">                            break;</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">                        case XMLStreamConstants.END_ELEMENT:</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">                            name = reader.getLocalName();</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">                            if (buf != null &amp;&amp; &quot;entry&quot;.equals(name)) {</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">                                put(key, buf.toString());</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">                                buf = null;</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">                            } else if (!&quot;properties&quot;.equals(name) &amp;&amp; !&quot;comment&quot;.equals(name)) {</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">                                String msg = &quot;unexpected element name &#39;&quot; + name + &quot;&#39;&quot;;</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">                                throw new InvalidPropertiesFormatException(msg);</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">                            break;</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment">                        case XMLStreamConstants.CHARACTERS:</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment">                        case XMLStreamConstants.SPACE:</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">                        case XMLStreamConstants.CDATA:</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment">                            if (buf != null)</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">                                buf.append(reader.getText());</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">                            break;</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">                reader.close();</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">            } catch (XMLStreamException e) {</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">                throw (InvalidPropertiesFormatException)</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">                  new InvalidPropertiesFormatException(&quot;Error in parsing XML.&quot;).</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">                  initCause(e);</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    } <span class="comment">// class Properties</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;}</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a8e95e84813830072b7516cfaa7dbc1a9">Deveel.Data.Types.SqlTypeCode.Char</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_a7e84a9e3b1f3e587158f5c0609ecd3b1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a7e84a9e3b1f3e587158f5c0609ecd3b1">Deveel.Data.Util.Properties.defaults</a></div><div class="ttdeci">Properties defaults</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00026">Properties.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_aa57388a2f0e002907a5951ca7ee5040a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aa57388a2f0e002907a5951ca7ee5040a">Deveel.Data.Util.Properties.SetProperty</a></div><div class="ttdeci">Object SetProperty(String key, String value)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00056">Properties.cs:56</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_a83db8fdd09b695cb0968bd31a332bbce"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a83db8fdd09b695cb0968bd31a332bbce">Deveel.Data.Util.Properties.Properties</a></div><div class="ttdeci">Properties()</div><div class="ttdoc">Creates a new empty property list with no default values. </div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00031">Properties.cs:31</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_afc352565fc799945547a42de96a77a86"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#afc352565fc799945547a42de96a77a86">Deveel.Data.Util.Properties.List</a></div><div class="ttdeci">void List(Stream output)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00390">Properties.cs:390</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm">Deveel.Data.Util.Properties</a></div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00024">Properties.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_a465a5c0fdf7df3941633cd15e65c2568"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a465a5c0fdf7df3941633cd15e65c2568">Deveel.Data.Util.Properties.FormatForOutput</a></div><div class="ttdeci">static void FormatForOutput(String str, StringBuilder buffer, bool key)</div><div class="ttdoc">Formats a key or value for output in a properties file. </div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00420">Properties.cs:420</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_a01a2834fbadaed3ddd50608c74ed2b6d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a01a2834fbadaed3ddd50608c74ed2b6d">Deveel.Data.Util.Properties.GetProperty</a></div><div class="ttdeci">String GetProperty(String key, String defaultValue)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00356">Properties.cs:356</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_ae2bf261d510bc78f3ab7e69473414083"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae2bf261d510bc78f3ab7e69473414083">Deveel.Data.Util.Properties.Store</a></div><div class="ttdeci">void Store(Stream output, String header)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00296">Properties.cs:296</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_ae403cfd6d65e4394e17174e60dff8748"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ae403cfd6d65e4394e17174e60dff8748">Deveel.Data.Util.Properties.Properties</a></div><div class="ttdeci">Properties(Properties defaults)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00039">Properties.cs:39</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_aefd2a4e3e832e83870468d9455ba4efe"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#aefd2a4e3e832e83870468d9455ba4efe">Deveel.Data.Util.Properties.List</a></div><div class="ttdeci">void List(StreamWriter output)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00395">Properties.cs:395</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_ab372de55b61c09f68b5a0added158f42"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#ab372de55b61c09f68b5a0added158f42">Deveel.Data.Util.Properties.GetProperty</a></div><div class="ttdeci">String GetProperty(String key)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00328">Properties.cs:328</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1Properties_htm_a038bed4df707aaa92ba3ecd643c281cb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1Properties.htm#a038bed4df707aaa92ba3ecd643c281cb">Deveel.Data.Util.Properties.Save</a></div><div class="ttdeci">void Save(Stream output, String header)</div><div class="ttdef"><b>Definition:</b> <a href="Properties_8cs_source.htm#l00255">Properties.cs:255</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
