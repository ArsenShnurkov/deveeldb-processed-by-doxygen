<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-linq/Deveel.Data.Linq/DeveelDbFormatter.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_a60ae0d82e93fd1f12738ee4cd0a5c92.htm">deveeldb-linq</a></li><li class="navelem"><a class="el" href="dir_4918bc2e33a13ceffa9102bc4a67732e.htm">Deveel.Data.Linq</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">DeveelDbFormatter.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="DeveelDbFormatter_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Collections.Generic;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Linq.Expressions;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceIQToolkit.htm">IQToolkit</a>.Data.Common;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Linq {</div>
<div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm">    8</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm">DeveelDbFormatter</a> : SqlFormatter {</div>
<div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#abdaffddf30c9874a2c216aaf2591449b">    9</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#abdaffddf30c9874a2c216aaf2591449b">DeveelDbFormatter</a>(<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbLanguage.htm">DeveelDbLanguage</a> language) </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;            : base(language) {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;        }</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a75321ce80c5fc264824078655c9fd5e5">   13</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">new</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a75321ce80c5fc264824078655c9fd5e5">Format</a>(Expression expression) {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;            <span class="keywordflow">return</span> Format(expression, <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbLanguage.htm">DeveelDbLanguage</a>());</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        }</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#adc5ba72f2a8bcca74b2c223aacf5e2a9">   17</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#adc5ba72f2a8bcca74b2c223aacf5e2a9">Format</a>(Expression expression, <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbLanguage.htm">DeveelDbLanguage</a> language) {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;            var formatter = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm">DeveelDbFormatter</a>(language);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;            formatter.Visit(expression);</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;            <span class="keywordflow">return</span> formatter.ToString();</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        }</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a7a6f73c69da961f48bc538a3c7d13ee7">   23</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">override</span> Expression <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a7a6f73c69da961f48bc538a3c7d13ee7">VisitSelect</a>(SelectExpression @select) {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            AddAliases(select.From);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            Write(<span class="stringliteral">&quot;SELECT &quot;</span>);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <span class="keywordflow">if</span> (select.IsDistinct)</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                Write(<span class="stringliteral">&quot;DISTINCT &quot;</span>);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            WriteColumns(select.Columns);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="keywordflow">if</span> (select.From != null) {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                Write(<span class="stringliteral">&quot;FROM &quot;</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                VisitSource(select.From);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">if</span> (select.Where != null &amp;&amp; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                (select.GroupBy == null || select.GroupBy.Count ==0)) {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                Write(<span class="stringliteral">&quot;WHERE &quot;</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                VisitPredicate(select.Where);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">if</span> (select.GroupBy != null &amp;&amp; select.GroupBy.Count &gt; 0) {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                Write(<span class="stringliteral">&quot;GROUP BY &quot;</span>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = select.GroupBy.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    <span class="keywordflow">if</span> (i &gt; 0) {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                        Write(<span class="stringliteral">&quot;, &quot;</span>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                    }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    VisitValue(select.GroupBy[i]);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="keywordflow">if</span> (select.Where != null) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    Write(<span class="stringliteral">&quot;HAVING &quot;</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                    VisitPredicate(select.Where);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">if</span> (select.OrderBy != null &amp;&amp; select.OrderBy.Count &gt; 0) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                Write(<span class="stringliteral">&quot;ORDER BY &quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = select.OrderBy.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    OrderExpression exp = select.OrderBy[i];</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    <span class="keywordflow">if</span> (i &gt; 0) {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        Write(<span class="stringliteral">&quot;, &quot;</span>);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    VisitValue(exp.Expression);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keywordflow">if</span> (exp.OrderType != OrderType.Ascending)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        Write(<span class="stringliteral">&quot; DESC&quot;</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">if</span> (select.Take != null) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                WriteLine(Indentation.Same);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                Write(<span class="stringliteral">&quot;LIMIT &quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">if</span> (select.Skip == null) {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    Write(<span class="stringliteral">&quot;0&quot;</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    Write(select.Skip);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                Write(<span class="stringliteral">&quot;, &quot;</span>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                Visit(select.Take);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> select;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a1ebb602bcfae9cb7e2bbbc68ef76d1aa">   97</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keywordtype">string</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a1ebb602bcfae9cb7e2bbbc68ef76d1aa">GetOperator</a>(BinaryExpression b) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">if</span> (b.NodeType == ExpressionType.Add &amp;&amp; b.Type == typeof (<span class="keywordtype">string</span>))</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&quot;||&quot;</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">return</span> base.GetOperator(b);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#af1acceab81f2eb78801bcbc747f08818">  104</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">override</span> Expression <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#af1acceab81f2eb78801bcbc747f08818">VisitMethodCall</a>(MethodCallExpression m) {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            var declaringType = m.Method.DeclaringType;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span> (declaringType == typeof (<span class="keywordtype">string</span>)) {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">switch</span> (m.Method.Name) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;StartsWith&quot;</span>: {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        Visit(m.Object);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        Write(<span class="stringliteral">&quot; LIKE &#39;&quot;</span>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        Visit(m.Arguments[0]);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        Write(<span class="stringliteral">&quot;%&#39;&quot;</span>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;EndsWith&quot;</span>: {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        Visit(m.Object);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        Write(<span class="stringliteral">&quot; LIKE &#39;%&quot;</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        Visit(m.Arguments[0]);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        Write(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;Contains&quot;</span>: {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        Visit(m.Object);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        Write(<span class="stringliteral">&quot; LIKE &#39;%&quot;</span>);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        Visit(m.Arguments[0]);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        Write(<span class="stringliteral">&quot;%&#39;&quot;</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;Concat&quot;</span>: {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        IList&lt;Expression&gt; args = m.Arguments;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="keywordflow">if</span> (args.Count == 1 &amp;&amp; args[0].NodeType == ExpressionType.NewArrayInit) {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                            args = ((NewArrayExpression) args[0]).Expressions;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = args.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            <span class="keywordflow">if</span> (i &gt; 0)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                Write(<span class="stringliteral">&quot; || &quot;</span>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            Visit(args[i]);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;IsNullOrEmpty&quot;</span>: {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        Visit(m.Arguments[0]);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        Write(<span class="stringliteral">&quot; IS NULL OR &quot;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        Visit(m.Arguments[0]);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        Write(<span class="stringliteral">&quot; = &#39;&#39;&quot;</span>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> base.VisitMethodCall(m);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a514b2e62bc5f476fb3f0da6e491dee53">  157</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">override</span> Expression <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a514b2e62bc5f476fb3f0da6e491dee53">VisitMemberAccess</a>(MemberExpression m) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            var declaringType = m.Member.DeclaringType;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> (declaringType == typeof (<span class="keywordtype">string</span>)) {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">switch</span> (m.Member.Name) {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;Length&quot;</span>: {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        Write(<span class="stringliteral">&quot;LENGTH(&quot;</span>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        Visit(m.Expression);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        Write(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (declaringType == typeof (DateTime) ||</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                       declaringType == typeof (DateTimeOffset)) {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">switch</span> (m.Member.Name) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;Day&quot;</span>: {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        Write(<span class="stringliteral">&quot;DAY(&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        Visit(m.Expression);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        Write(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordflow">case</span> <span class="stringliteral">&quot;Year&quot;</span>: {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        Write(<span class="stringliteral">&quot;YEAR(&quot;</span>);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        Visit(m.Expression);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        Write(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="comment">// TODO: Continue with date function</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (declaringType == typeof (TimeSpan)) {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">return</span> base.VisitMemberAccess(m);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm">Deveel.Data.Linq.DeveelDbFormatter</a></div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00008">DeveelDbFormatter.cs:8</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_af1acceab81f2eb78801bcbc747f08818"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#af1acceab81f2eb78801bcbc747f08818">Deveel.Data.Linq.DeveelDbFormatter.VisitMethodCall</a></div><div class="ttdeci">override Expression VisitMethodCall(MethodCallExpression m)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00104">DeveelDbFormatter.cs:104</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_a75321ce80c5fc264824078655c9fd5e5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a75321ce80c5fc264824078655c9fd5e5">Deveel.Data.Linq.DeveelDbFormatter.Format</a></div><div class="ttdeci">static new string Format(Expression expression)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00013">DeveelDbFormatter.cs:13</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_adc5ba72f2a8bcca74b2c223aacf5e2a9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#adc5ba72f2a8bcca74b2c223aacf5e2a9">Deveel.Data.Linq.DeveelDbFormatter.Format</a></div><div class="ttdeci">static string Format(Expression expression, DeveelDbLanguage language)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00017">DeveelDbFormatter.cs:17</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_a1ebb602bcfae9cb7e2bbbc68ef76d1aa"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a1ebb602bcfae9cb7e2bbbc68ef76d1aa">Deveel.Data.Linq.DeveelDbFormatter.GetOperator</a></div><div class="ttdeci">override string GetOperator(BinaryExpression b)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00097">DeveelDbFormatter.cs:97</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbLanguage_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbLanguage.htm">Deveel.Data.Linq.DeveelDbLanguage</a></div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbLanguage_8cs_source.htm#l00009">DeveelDbLanguage.cs:9</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_a514b2e62bc5f476fb3f0da6e491dee53"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a514b2e62bc5f476fb3f0da6e491dee53">Deveel.Data.Linq.DeveelDbFormatter.VisitMemberAccess</a></div><div class="ttdeci">override Expression VisitMemberAccess(MemberExpression m)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00157">DeveelDbFormatter.cs:157</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_abdaffddf30c9874a2c216aaf2591449b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#abdaffddf30c9874a2c216aaf2591449b">Deveel.Data.Linq.DeveelDbFormatter.DeveelDbFormatter</a></div><div class="ttdeci">DeveelDbFormatter(DeveelDbLanguage language)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00009">DeveelDbFormatter.cs:9</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter_htm_a7a6f73c69da961f48bc538a3c7d13ee7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1DeveelDbFormatter.htm#a7a6f73c69da961f48bc538a3c7d13ee7">Deveel.Data.Linq.DeveelDbFormatter.VisitSelect</a></div><div class="ttdeci">override Expression VisitSelect(SelectExpression @select)</div><div class="ttdef"><b>Definition:</b> <a href="DeveelDbFormatter_8cs_source.htm#l00023">DeveelDbFormatter.cs:23</a></div></div>
<div class="ttc" id="namespaceIQToolkit_htm"><div class="ttname"><a href="namespaceIQToolkit.htm">IQToolkit</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
