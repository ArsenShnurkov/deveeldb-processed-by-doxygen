<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Sql.Tables.TableQueryExtensions Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Tables.htm">Tables</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm">TableQueryExtensions</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Sql.Tables.TableQueryExtensions Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Provides a set of extension methods to <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm" title="Defines the contract to access the data contained into a table of a database. ">ITable</a> and <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1IMutableTable.htm" title="An interface that defines contracts to alter the contents of a table. ">IMutableTable</a> objects.  
 <a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a806ad98735c23ddf9e797bebdde43168"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a806ad98735c23ddf9e797bebdde43168">GetValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int rowIndex, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName)</td></tr>
<tr class="separator:a806ad98735c23ddf9e797bebdde43168"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ec5b426f23f87237b0ea395b1d8c165"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9ec5b426f23f87237b0ea395b1d8c165">GetValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int rowIndex, string columnName)</td></tr>
<tr class="separator:a9ec5b426f23f87237b0ea395b1d8c165"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb5b2d4a87b8278c1a3edf11407dd8e4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#afb5b2d4a87b8278c1a3edf11407dd8e4">GetLastValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:afb5b2d4a87b8278c1a3edf11407dd8e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60a25b9ba5a3d5ff2e77f709aeb38a15"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a60a25b9ba5a3d5ff2e77f709aeb38a15">GetLastValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName)</td></tr>
<tr class="separator:a60a25b9ba5a3d5ff2e77f709aeb38a15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31579ada80939412539e751e423bfb47"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a31579ada80939412539e751e423bfb47">GetLastValues</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columnOffsets)</td></tr>
<tr class="separator:a31579ada80939412539e751e423bfb47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f43524e054303fb94cf8fdb9e7cac61"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a5f43524e054303fb94cf8fdb9e7cac61">GetFirstValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:a5f43524e054303fb94cf8fdb9e7cac61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d05f117377a1e46ce28ff439e14c1a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a99d05f117377a1e46ce28ff439e14c1a">GetFirstValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName)</td></tr>
<tr class="separator:a99d05f117377a1e46ce28ff439e14c1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71421252d785e25b7ce6c77e4325544d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a71421252d785e25b7ce6c77e4325544d">GetFirstValues</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columnOffsets)</td></tr>
<tr class="separator:a71421252d785e25b7ce6c77e4325544d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad04963b86e87399a58e5f492a0e4bd31"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ad04963b86e87399a58e5f492a0e4bd31">GetSingleValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:ad04963b86e87399a58e5f492a0e4bd31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e2e1af2915a2d9ff88ecf434331e1be"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a0e2e1af2915a2d9ff88ecf434331e1be">GetSingleValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName)</td></tr>
<tr class="separator:a0e2e1af2915a2d9ff88ecf434331e1be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75d6a2f26d25ef0b77256bf08c8e56a0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a75d6a2f26d25ef0b77256bf08c8e56a0">GetSingleValues</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columnOffsets)</td></tr>
<tr class="separator:a75d6a2f26d25ef0b77256bf08c8e56a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac86daa71c79b7982793f218dca7485e4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1Row.htm">Row</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ac86daa71c79b7982793f218dca7485e4">GetRow</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int rowNumber)</td></tr>
<tr class="separator:ac86daa71c79b7982793f218dca7485e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1f68169984bd2d0ddcc01bff393febc"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aa1f68169984bd2d0ddcc01bff393febc">FindKeys</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columnOffsets, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[] keyValue)</td></tr>
<tr class="separator:aa1f68169984bd2d0ddcc01bff393febc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79f3016216f601a10b4fbeb0a4da8178"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a79f3016216f601a10b4fbeb0a4da8178">IndexOfColumn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName)</td></tr>
<tr class="separator:a79f3016216f601a10b4fbeb0a4da8178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0535e809bea5b62a42f0d3af471ca705"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a0535e809bea5b62a42f0d3af471ca705">IndexOfColumn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName)</td></tr>
<tr class="separator:a0535e809bea5b62a42f0d3af471ca705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5aca03fb61e373da5c34eee608f6c924"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a5aca03fb61e373da5c34eee608f6c924">SelectRowsEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnIndex, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a5aca03fb61e373da5c34eee608f6c924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86fdcfd1939aa55154f65d5cea27930"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ae86fdcfd1939aa55154f65d5cea27930">SelectRowsEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:ae86fdcfd1939aa55154f65d5cea27930"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed0914755f51226513a49331474a70a"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aaed0914755f51226513a49331474a70a">SelectNotEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:aaed0914755f51226513a49331474a70a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9976050f66e4b550b7d885dc42554491"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9976050f66e4b550b7d885dc42554491">SelectNotEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:a9976050f66e4b550b7d885dc42554491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bdb07a4f22d66d9a992382ec396a0bd"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a4bdb07a4f22d66d9a992382ec396a0bd">SelectRowsEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnIndex1, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value1, int columnIndex2, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value2)</td></tr>
<tr class="separator:a4bdb07a4f22d66d9a992382ec396a0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a542dd07d85c92f3eb83c12f90fa7953c"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a542dd07d85c92f3eb83c12f90fa7953c">SelectRowsRange</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>[] ranges)</td></tr>
<tr class="separator:a542dd07d85c92f3eb83c12f90fa7953c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a148467c9ec2a70e42fa1811890807e52"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a148467c9ec2a70e42fa1811890807e52">SelectRowsGreater</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a148467c9ec2a70e42fa1811890807e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad374ca715fcfa0e873547a8a58f8ed93"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ad374ca715fcfa0e873547a8a58f8ed93">SelectRowsGreater</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:ad374ca715fcfa0e873547a8a58f8ed93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a925b1ae89e5ab0582b0ec9fbecbc9e4d"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a925b1ae89e5ab0582b0ec9fbecbc9e4d">SelectRowsGreaterOrEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a925b1ae89e5ab0582b0ec9fbecbc9e4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50cb66a1566b3834de2a9212b65e4d27"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a50cb66a1566b3834de2a9212b65e4d27">SelectRowsGreaterOrEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:a50cb66a1566b3834de2a9212b65e4d27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f73d3840ac6ddc9bfdbfea6ddcc0da1"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9f73d3840ac6ddc9bfdbfea6ddcc0da1">SelecRowsLess</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a9f73d3840ac6ddc9bfdbfea6ddcc0da1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9564e4a0184d47861f9a6b740580b219"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9564e4a0184d47861f9a6b740580b219">SelecRowsLess</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:a9564e4a0184d47861f9a6b740580b219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a8affb3702a39a415a90bea0261875c"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a1a8affb3702a39a415a90bea0261875c">SelectRowsLessOrEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a1a8affb3702a39a415a90bea0261875c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ccfb39d5a6400e834009c6ff1664fcb"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a8ccfb39d5a6400e834009c6ff1664fcb">SelectRowsLessOrEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:a8ccfb39d5a6400e834009c6ff1664fcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f71c7a8100f22769b3731eee566c520"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a4f71c7a8100f22769b3731eee566c520">SelectAllRows</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:a4f71c7a8100f22769b3731eee566c520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24dcbead311c2316603d11bc930111f9"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a24dcbead311c2316603d11bc930111f9">SelectAllRows</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table)</td></tr>
<tr class="separator:a24dcbead311c2316603d11bc930111f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7180babccc24c6648a4ebf8c226a9da3"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a7180babccc24c6648a4ebf8c226a9da3">SelectLast</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:a7180babccc24c6648a4ebf8c226a9da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4f63558d40f87426cd3d691123d1527"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aa4f63558d40f87426cd3d691123d1527">SelectFirst</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:aa4f63558d40f87426cd3d691123d1527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad86c70ab0b3832965b5269fe1a4f55a"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aad86c70ab0b3832965b5269fe1a4f55a">SelectRows</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1IVariableResolver.htm">IVariableResolver</a> resolver, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> expression)</td></tr>
<tr class="separator:aad86c70ab0b3832965b5269fe1a4f55a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5556f3264239c27fd6aeea0c940e38a"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ae5556f3264239c27fd6aeea0c940e38a">SelectRows</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columnOffsets, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[] values)</td></tr>
<tr class="separator:ae5556f3264239c27fd6aeea0c940e38a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1ca86afdbe6f4f58d50e7a782db3b1e"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aa1ca86afdbe6f4f58d50e7a782db3b1e">SelectRowsBetween</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> minCell, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> maxCell)</td></tr>
<tr class="separator:aa1ca86afdbe6f4f58d50e7a782db3b1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90c42c86cdc56282982c4453325969af"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a90c42c86cdc56282982c4453325969af">SelectRows</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a90c42c86cdc56282982c4453325969af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f35fbd79614dbe550b4907ac5d877c8"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a2f35fbd79614dbe550b4907ac5d877c8">Search</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, string pattern)</td></tr>
<tr class="separator:a2f35fbd79614dbe550b4907ac5d877c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1856262b257d8e5b2d6dbff40e3061e"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aa1856262b257d8e5b2d6dbff40e3061e">Search</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, string pattern, char escapeChar)</td></tr>
<tr class="separator:aa1856262b257d8e5b2d6dbff40e3061e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebae9fcbd21baf1c28b0ee86ed8508f5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aebae9fcbd21baf1c28b0ee86ed8508f5">SelectEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnIndex, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:aebae9fcbd21baf1c28b0ee86ed8508f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5490c430ba5e75e1798b104db373a09a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a5490c430ba5e75e1798b104db373a09a">SelectEqual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a5490c430ba5e75e1798b104db373a09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab61b513198d998609482a5c37b977e39"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ab61b513198d998609482a5c37b977e39">SelectAll</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset)</td></tr>
<tr class="separator:ab61b513198d998609482a5c37b977e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67f9a1fa15fc6c2c53f86fb99d045be9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a67f9a1fa15fc6c2c53f86fb99d045be9">Select</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:a67f9a1fa15fc6c2c53f86fb99d045be9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7602f8eeae048ddc379cb65ce2542f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a6d7602f8eeae048ddc379cb65ce2542f">SimpleSelect</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> exp)</td></tr>
<tr class="separator:a6d7602f8eeae048ddc379cb65ce2542f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76415ee3f12b561321d92074067202b1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a76415ee3f12b561321d92074067202b1">ExhaustiveSelect</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:a76415ee3f12b561321d92074067202b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae25d596c96619666727409a579a5336a"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ae25d596c96619666727409a579a5336a">SelectFromPattern</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int column, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> ob)</td></tr>
<tr class="separator:ae25d596c96619666727409a579a5336a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa7017752cfdb622cd3e9a0c82a2af18"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aaa7017752cfdb622cd3e9a0c82a2af18">EmptySelect</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table)</td></tr>
<tr class="separator:aaa7017752cfdb622cd3e9a0c82a2af18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dae56a2b19e8ee141bebcec991c6769"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a4dae56a2b19e8ee141bebcec991c6769">DistinctBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columns)</td></tr>
<tr class="separator:a4dae56a2b19e8ee141bebcec991c6769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9df7f3ec94d9fced40abfd3b3274699f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9df7f3ec94d9fced40abfd3b3274699f">DistinctBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] columnNames)</td></tr>
<tr class="separator:a9df7f3ec94d9fced40abfd3b3274699f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada390619fa18ad317c43292a0417c420"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ada390619fa18ad317c43292a0417c420">SelectRange</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> thisTable, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName, <a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>[] ranges)</td></tr>
<tr class="separator:ada390619fa18ad317c43292a0417c420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62508c10461b856e3a461408d4d87b33"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a62508c10461b856e3a461408d4d87b33">AllRowsMatchColumnValue</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:a62508c10461b856e3a461408d4d87b33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13552bff4f020cb1f11ac3023d8b1ea6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a13552bff4f020cb1f11ac3023d8b1ea6">SelectAnyAllNonCorrelated</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] leftColumns, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> op, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> rightTable)</td></tr>
<tr class="separator:a13552bff4f020cb1f11ac3023d8b1ea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a737083a0cfc9e16efa20bd105c06e5c2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a737083a0cfc9e16efa20bd105c06e5c2">Union</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> thisTable, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> otherTable)</td></tr>
<tr class="separator:a737083a0cfc9e16efa20bd105c06e5c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26123947fa64ae7e7449619ef55dd66d"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a26123947fa64ae7e7449619ef55dd66d">SelectRowsIn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, int column1, int column2)</td></tr>
<tr class="memdesc:a26123947fa64ae7e7449619ef55dd66d"><td class="mdescLeft">&#160;</td><td class="mdescRight">This implements the <code>in</code> command.  <a href="#a26123947fa64ae7e7449619ef55dd66d">More...</a><br /></td></tr>
<tr class="separator:a26123947fa64ae7e7449619ef55dd66d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d53a589d8e91917ff4a609232a1b9b4"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a4d53a589d8e91917ff4a609232a1b9b4">SelectRowsIn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, int[] t1Cols, int[] t2Cols)</td></tr>
<tr class="memdesc:a4d53a589d8e91917ff4a609232a1b9b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-column version of <code>IN</code>.  <a href="#a4d53a589d8e91917ff4a609232a1b9b4">More...</a><br /></td></tr>
<tr class="separator:a4d53a589d8e91917ff4a609232a1b9b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18ab02f1cbc2eab43107f52387f685f4"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a18ab02f1cbc2eab43107f52387f685f4">SelectRowsNotIn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, int col1, int col2)</td></tr>
<tr class="memdesc:a18ab02f1cbc2eab43107f52387f685f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This implements the <code>not in</code> command.  <a href="#a18ab02f1cbc2eab43107f52387f685f4">More...</a><br /></td></tr>
<tr class="separator:a18ab02f1cbc2eab43107f52387f685f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56287ac52d6c2704f856d7ef29a5511c"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a56287ac52d6c2704f856d7ef29a5511c">SelectRowsNotIn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, int[] t1Cols, int[] t2Cols)</td></tr>
<tr class="memdesc:a56287ac52d6c2704f856d7ef29a5511c"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-column version of NOT IN.  <a href="#a56287ac52d6c2704f856d7ef29a5511c">More...</a><br /></td></tr>
<tr class="separator:a56287ac52d6c2704f856d7ef29a5511c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff418839e2ef51e7557fae3e1a72175e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aff418839e2ef51e7557fae3e1a72175e">NotIn</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> otherTable, int[] tableColumns, int[] otherColumns)</td></tr>
<tr class="separator:aff418839e2ef51e7557fae3e1a72175e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5e31ec41bfebcc07742c7b3b386365c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#af5e31ec41bfebcc07742c7b3b386365c">Composite</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">CompositeFunction</a> function, bool all)</td></tr>
<tr class="separator:af5e31ec41bfebcc07742c7b3b386365c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1708a496c0860924a3375fba9f0d7855"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a1708a496c0860924a3375fba9f0d7855">Execept</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, bool all)</td></tr>
<tr class="separator:a1708a496c0860924a3375fba9f0d7855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73bbf557559aa58adb87b142c2bf4831"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a73bbf557559aa58adb87b142c2bf4831">Intersect</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, bool all)</td></tr>
<tr class="separator:a73bbf557559aa58adb87b142c2bf4831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a8f3f1a0f8eaad60b0d756f103aa852"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a2a8f3f1a0f8eaad60b0d756f103aa852">Join</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> otherTable, bool quick)</td></tr>
<tr class="separator:a2a8f3f1a0f8eaad60b0d756f103aa852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab03faadd6f1cc6267c3d666f0469c87d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ab03faadd6f1cc6267c3d666f0469c87d">NaturalJoin</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> otherTable)</td></tr>
<tr class="separator:ab03faadd6f1cc6267c3d666f0469c87d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acec41448a50af0ed298ff4e396b18caa"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#acec41448a50af0ed298ff4e396b18caa">Join</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName, <a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a> operatorType, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> expression)</td></tr>
<tr class="separator:acec41448a50af0ed298ff4e396b18caa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bf0a54aa4ed00997b8b50f3cbe230f0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a5bf0a54aa4ed00997b8b50f3cbe230f0">SimpleJoin</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> thisTable, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a> binary)</td></tr>
<tr class="separator:a5bf0a54aa4ed00997b8b50f3cbe230f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8af42e60214625ed261ea0653e791ea"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ad8af42e60214625ed261ea0653e791ea">OuterJoin</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> rightTable)</td></tr>
<tr class="separator:ad8af42e60214625ed261ea0653e791ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6ae1db5a2dcc78eeaa2a9414e31a8df"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aa6ae1db5a2dcc78eeaa2a9414e31a8df">EquiJoin</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a> context, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] leftColumns, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] rightColumns)</td></tr>
<tr class="separator:aa6ae1db5a2dcc78eeaa2a9414e31a8df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54245ba52cc00b30afd461f52660e7a8"><td class="memItemLeft" align="right" valign="top">static IEnumerable&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a54245ba52cc00b30afd461f52660e7a8">OrderRowsByColumns</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columns)</td></tr>
<tr class="separator:a54245ba52cc00b30afd461f52660e7a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a258209508608525eb4b74b77e39b7488"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a258209508608525eb4b74b77e39b7488">OrderBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int[] columns)</td></tr>
<tr class="separator:a258209508608525eb4b74b77e39b7488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a812f403b087f06c22dadfb2269e63a94"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a812f403b087f06c22dadfb2269e63a94">OrderBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnIndex, bool ascending)</td></tr>
<tr class="separator:a812f403b087f06c22dadfb2269e63a94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158541a52c4842b551d3cb32ee044756"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a158541a52c4842b551d3cb32ee044756">OrderBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a> columnName, bool ascending)</td></tr>
<tr class="separator:a158541a52c4842b551d3cb32ee044756"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9da71e5424b896afcdf37926f89cbb43"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a9da71e5424b896afcdf37926f89cbb43">OrderBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] columnNames, bool[] ascending)</td></tr>
<tr class="separator:a9da71e5424b896afcdf37926f89cbb43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a994f46a57ea46fa822af948b7cbd2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a39a994f46a57ea46fa822af948b7cbd2">OrderBy</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, string columnName, bool ascending)</td></tr>
<tr class="separator:a39a994f46a57ea46fa822af948b7cbd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0d58f2ce27ec14886466500db81cb48"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ac0d58f2ce27ec14886466500db81cb48">Subset</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] columnNames, <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[] aliases)</td></tr>
<tr class="separator:ac0d58f2ce27ec14886466500db81cb48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77a7e80be02426bdb679c6dc66a73ad"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#ac77a7e80be02426bdb679c6dc66a73ad">Exists</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value)</td></tr>
<tr class="separator:ac77a7e80be02426bdb679c6dc66a73ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abab8cfdbcff06bd34d338d3878178684"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#abab8cfdbcff06bd34d338d3878178684">Exists</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset1, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value1, int columnOffset2, <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> value2)</td></tr>
<tr class="separator:abab8cfdbcff06bd34d338d3878178684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86affeefdf96b10b4c999184a2a9a04f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a86affeefdf96b10b4c999184a2a9a04f">ColumnMerge</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> other)</td></tr>
<tr class="separator:a86affeefdf96b10b4c999184a2a9a04f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a633d4169fbfe03290b22297bb483738f"><td class="memItemLeft" align="right" valign="top">static Dictionary&lt; string, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a633d4169fbfe03290b22297bb483738f">ToDictionary</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table)</td></tr>
<tr class="separator:a633d4169fbfe03290b22297bb483738f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a3770f694295620e6026d3ed56b97647f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a3770f694295620e6026d3ed56b97647f">MakeObject</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, int columnOffset, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a> value)</td></tr>
<tr class="separator:a3770f694295620e6026d3ed56b97647f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd51e3698050aa328c4578e40672e84f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#afd51e3698050aa328c4578e40672e84f">AsVirtual</a> (this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> table, Func&lt; IEnumerable&lt; int &gt;&gt; selector)</td></tr>
<tr class="separator:afd51e3698050aa328c4578e40672e84f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Provides a set of extension methods to <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm" title="Defines the contract to access the data contained into a table of a database. ">ITable</a> and <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1IMutableTable.htm" title="An interface that defines contracts to alter the contents of a table. ">IMutableTable</a> objects. </p>

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00034">34</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a62508c10461b856e3a461408d4d87b33"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Sql.Tables.TableQueryExtensions.AllRowsMatchColumnValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00747">747</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                                                                                                                {</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            var rows = table.SelectRows(columnOffset, op, value);</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">return</span> rows.Count() == table.RowCount;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afd51e3698050aa328c4578e40672e84f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.AsVirtual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Func&lt; IEnumerable&lt; int &gt;&gt;&#160;</td>
          <td class="paramname"><em>selector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01380">1380</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                                                                            {</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, selector().ToArray());</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a86affeefdf96b10b4c999184a2a9a04f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.ColumnMerge </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01384">1384</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                                                                          {</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;            <span class="keywordflow">if</span> (table.RowCount != other.RowCount)</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Tables have different row counts.&quot;</span>);</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;            <span class="comment">// Create the new VirtualTable with the joined tables.</span></div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;            List&lt;int&gt; allRowSet = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;            <span class="keywordtype">int</span> rcount = table.RowCount;</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; rcount; ++i) {</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                allRowSet.Add(i);</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;            }</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;            var tabs = <span class="keyword">new</span>[] { table, other };</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;            var rowSets = <span class="keyword">new</span> IList&lt;int&gt;[] { allRowSet, allRowSet };</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(tabs, rowSets);</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af5e31ec41bfebcc07742c7b3b386365c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Composite </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">CompositeFunction</a>&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>all</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01067">1067</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                                                                                              {</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> CompositeTable(table, <span class="keyword">new</span>[] { table, other }, <span class="keyword">function</span>, all);</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4dae56a2b19e8ee141bebcec991c6769"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.DistinctBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00662">662</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                                                          {</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            List&lt;int&gt; resultList = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            var rowList = table.OrderRowsByColumns(columns).ToList();</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            <span class="keywordtype">int</span> rowCount = rowList.Count;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            <span class="keywordtype">int</span> previousRow = -1;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; rowCount; ++i) {</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                <span class="keywordtype">int</span> rowIndex = rowList[i];</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                <span class="keywordflow">if</span> (previousRow != -1) {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                    <span class="keywordtype">bool</span> equal = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                    <span class="comment">// Compare cell in column in this row with previous row.</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; columns.Length &amp;&amp; equal; ++n) {</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                        var c1 = table.GetValue(columns[n], rowIndex);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        var c2 = table.GetValue(columns[n], previousRow);</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                        equal = (c1.CompareTo(c2) == 0);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    }</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    <span class="keywordflow">if</span> (!equal) {</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        resultList.Add(rowIndex);</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                    resultList.Add(rowIndex);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                }</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                previousRow = rowIndex;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="comment">// Return the new table with distinct rows only.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, resultList);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9df7f3ec94d9fced40abfd3b3274699f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.DistinctBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>columnNames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00695">695</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                                                                     {</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            var mapSize = columnNames.Length;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            var map = <span class="keyword">new</span> <span class="keywordtype">int</span>[mapSize];</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; mapSize; i++) {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                map[i] = table.IndexOfColumn(columnNames[i]);</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            }</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordflow">return</span> table.DistinctBy(map);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aaa7017752cfdb622cd3e9a0c82a2af18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.EmptySelect </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00655">655</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                                            {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <span class="keywordflow">if</span> (table.RowCount == 0)</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="keywordflow">return</span> table;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, <span class="keyword">new</span> <span class="keywordtype">int</span>[0]);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa6ae1db5a2dcc78eeaa2a9414e31a8df"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.EquiJoin </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>leftColumns</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>rightColumns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01259">1259</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                                                                                                                                              {</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;            <span class="comment">// TODO: This needs to migrate to a better implementation that</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            <span class="comment">//   exploits multi-column indexes if one is defined that can be used.</span></div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            var firstLeft = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(leftColumns[0]);</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;            var firstRight = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(rightColumns[0]);</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;            var onExpression = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Equal</a>(firstLeft, firstRight);</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;            var result = table.SimpleJoin(context, other, onExpression);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;            <span class="keywordtype">int</span> sz = leftColumns.Length;</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;            <span class="comment">// If there are columns left to equi-join, we resolve the rest with a</span></div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;            <span class="comment">// single exhaustive select of the form,</span></div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;            <span class="comment">//   ( table1.col2 = table2.col2 AND table1.col3 = table2.col3 AND ... )</span></div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;            <span class="keywordflow">if</span> (sz &gt; 1) {</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                <span class="comment">// Form the expression</span></div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a> restExpression = null;</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; sz; ++i) {</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                    var left = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(leftColumns[i]);</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                    var right = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(rightColumns[i]);</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                    var equalExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(left, right);</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                    <span class="keywordflow">if</span> (restExpression == null) {</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                        restExpression = equalExp;</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                        restExpression = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">And</a>(restExpression, equalExp);</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                    }</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                }</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                result = result.ExhaustiveSelect(context, restExpression);</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;            }</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a190b32bbe269e178bb69866170e55441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a190b32bbe269e178bb69866170e55441">Deveel.Data.Sql.Expressions.SqlExpression.And</a></div><div class="ttdeci">static SqlBinaryExpression And(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00393">SqlExpression.cs:393</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a1860b79ee4114c0d70d52f42587f6550"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a1860b79ee4114c0d70d52f42587f6550">Deveel.Data.Sql.Expressions.SqlExpression.Equal</a></div><div class="ttdeci">static SqlBinaryExpression Equal(SqlExpression left, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00353">SqlExpression.cs:353</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ae3792af713778beb017f2ed55e219e86"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Deveel.Data.Sql.Expressions.SqlExpression.Reference</a></div><div class="ttdeci">static SqlReferenceExpression Reference(ObjectName objectName)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00284">SqlExpression.cs:284</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1708a496c0860924a3375fba9f0d7855"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Execept </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>all</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01071">1071</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                                                                {</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            <span class="keywordflow">return</span> table.Composite(other, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">CompositeFunction</a>.Except, all);</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_htm_a43a8483ef91b1611fe44f265383656b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">Deveel.Data.Sql.CompositeFunction</a></div><div class="ttdeci">CompositeFunction</div><div class="ttdoc">The kind of composite function in a CompositeTable. </div><div class="ttdef"><b>Definition:</b> <a href="CompositeFunction_8cs_source.htm#l00025">CompositeFunction.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a76415ee3f12b561321d92074067202b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.ExhaustiveSelect </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00586">586</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                                                                                             {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            var result = table;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="comment">// Exit early if there&#39;s nothing in the table to select from</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordtype">int</span> rowCount = table.RowCount;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">if</span> (rowCount &gt; 0) {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                var tableResolver = table.GetVariableResolver();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                List&lt;int&gt; selectedSet = <span class="keyword">new</span> List&lt;int&gt;(rowCount);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <span class="keywordflow">foreach</span> (var row <span class="keywordflow">in</span> table) {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    <span class="keywordtype">int</span> rowIndex = row.RowId.RowNumber;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    var rowResolver = tableResolver.ForRow(rowIndex);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="comment">// Resolve expression into a constant.</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    var exp = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>(context, rowResolver);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="keywordflow">if</span> (exp.ExpressionType != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant)</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException();</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    var value = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) exp).Value;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    <span class="comment">// If resolved to true then include in the selected set.</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    <span class="keywordflow">if</span> (!value.IsNull &amp;&amp; value.Type is <a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a> &amp;&amp;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        value == <span class="keyword">true</span>) {</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                        selectedSet.Add(rowIndex);</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                    }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                result = <span class="keyword">new</span> VirtualTable(table, selectedSet); ;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_af183cbb43972165fd569f3910a46a5d3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Deveel.Data.Sql.Expressions.SqlExpression.Evaluate</a></div><div class="ttdeci">virtual SqlExpression Evaluate(EvaluateContext context)</div><div class="ttdoc">When overridden by a derived class, this method evaluates the expression within the provided context...</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00167">SqlExpression.cs:167</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">Deveel.Data.Sql.Expressions.SqlConstantExpression</a></div><div class="ttdoc">An expression that holds a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpression_8cs_source.htm#l00033">SqlConstantExpression.cs:33</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac77a7e80be02426bdb679c6dc66a73ad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Sql.Tables.TableQueryExtensions.Exists </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01372">1372</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                                                                                         {</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsEqual(columnOffset, value).Any();</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abab8cfdbcff06bd34d338d3878178684"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Sql.Tables.TableQueryExtensions.Exists </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01376">1376</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                                                                                                                 {</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsEqual(columnOffset1, value1, columnOffset2, value2).Any();</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa1f68169984bd2d0ddcc01bff393febc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.FindKeys </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columnOffsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[]&#160;</td>
          <td class="paramname"><em>keyValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00104">104</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                                                                                               {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">int</span> keySize = keyValue.Length;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="comment">// Now command table 2 to determine if the key values are present.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="comment">// Use index scan on first key.</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            var columnIndex = table.GetIndex(columnOffsets[0]);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            var list = columnIndex.SelectEqual(keyValue[0]).ToList();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">if</span> (keySize &lt;= 1)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="comment">// Full scan for the rest of the columns</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordtype">int</span> sz = list.Count;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">// For each element of the list</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = sz - 1; i &gt;= 0; --i) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordtype">int</span> rIndex = list[i];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="comment">// For each key in the column list</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c = 1; c &lt; keySize; ++c) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordtype">int</span> columnOffset = columnOffsets[c];</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    var columnValue = keyValue[c];</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keywordflow">if</span> (columnValue.CompareTo(table.GetValue(rIndex, columnOffset)) != 0) {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        <span class="comment">// If any values in the key are not equal set this flag to false</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="comment">// and remove the index from the list.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        list.RemoveAt(i);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        <span class="comment">// Break the for loop</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5f43524e054303fb94cf8fdb9e7cac61"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetFirstValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00061">61</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                                                                    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            var rows = table.SelectFirst(columnOffset).ToList();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">return</span> rows.Count &gt; 0 ? table.GetValue(rows[0], columnOffset) : null;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a99d05f117377a1e46ce28ff439e14c1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetFirstValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00066">66</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                                                                     {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">return</span> table.GetFirstValue(table.IndexOfColumn(columnName));</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a71421252d785e25b7ce6c77e4325544d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> [] Deveel.Data.Sql.Tables.TableQueryExtensions.GetFirstValues </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columnOffsets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00070">70</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                                                          {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span> (columnOffsets.Length &gt; 1)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<span class="stringliteral">&quot;Multi-column gets not supported.&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span>[] {table.GetFirstValue(columnOffsets[0])};</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afb5b2d4a87b8278c1a3edf11407dd8e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetLastValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00045">45</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                                                                   {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            var rows = table.SelectLast(columnOffset).ToList();</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">return</span> rows.Count &gt; 0 ? table.GetValue(rows[0], columnOffset) : null;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a60a25b9ba5a3d5ff2e77f709aeb38a15"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetLastValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00050">50</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                                                                    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> table.GetLastValue(table.IndexOfColumn(columnName));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a31579ada80939412539e751e423bfb47"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> [] Deveel.Data.Sql.Tables.TableQueryExtensions.GetLastValues </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columnOffsets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00054">54</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                                                                         {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">if</span> (columnOffsets.Length &gt; 1)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<span class="stringliteral">&quot;Multi-column gets not supported.&quot;</span>);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span>[] {table.GetLastValue(columnOffsets[0])};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac86daa71c79b7982793f218dca7485e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1Row.htm">Row</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetRow </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rowNumber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00098">98</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                                   {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="namespaceDeveel_1_1Data_1_1Sql.htm#a782e8984e5e4a6718cff0c8da0777d02aa70367aa7cb74e510f4f9413ccf059d3">Row</a>(table, <span class="keyword">new</span> RowId(table.TableInfo.Id, rowNumber));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_htm_a782e8984e5e4a6718cff0c8da0777d02aa70367aa7cb74e510f4f9413ccf059d3"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql.htm#a782e8984e5e4a6718cff0c8da0777d02aa70367aa7cb74e510f4f9413ccf059d3">Deveel.Data.Sql.DbObjectType.Row</a></div><div class="ttdoc">A single ROW in a database table, that holds tabular data as configured by the table specifications...</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad04963b86e87399a58e5f492a0e4bd31"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetSingleValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00077">77</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                                                     {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            IList&lt;int&gt; rows = table.SelectFirst(columnOffset).ToList();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordtype">int</span> sz = rows.Count;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">return</span> sz == table.RowCount &amp;&amp; sz &gt; 0 ? table.GetValue(rows[0], columnOffset) : null;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0e2e1af2915a2d9ff88ecf434331e1be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetSingleValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00083">83</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                                                      {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">return</span> table.GetSingleValue(table.IndexOfColumn(columnName));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a75d6a2f26d25ef0b77256bf08c8e56a0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> [] Deveel.Data.Sql.Tables.TableQueryExtensions.GetSingleValues </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columnOffsets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00087">87</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                                                           {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">if</span> (columnOffsets.Length &gt; 1)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<span class="stringliteral">&quot;Multi-column gets not supported.&quot;</span>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span>[] {table.GetSingleValue(columnOffsets[0])};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a806ad98735c23ddf9e797bebdde43168"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rowIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00037">37</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                                                                  {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordflow">return</span> table.GetValue(rowIndex, table.IndexOfColumn(columnName));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9ec5b426f23f87237b0ea395b1d8c165"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.GetValue </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rowIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00041">41</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                                                              {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> table.GetValue(rowIndex, table.ResolveColumnName(columnName));</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a79f3016216f601a10b4fbeb0a4da8178"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int Deveel.Data.Sql.Tables.TableQueryExtensions.IndexOfColumn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00146">146</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                                              {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> (table is IQueryTable)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">return</span> ((IQueryTable) table).FindColumn(ObjectName.Parse(columnName));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span> table.TableInfo.IndexOfColumn(columnName);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0535e809bea5b62a42f0d3af471ca705"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int Deveel.Data.Sql.Tables.TableQueryExtensions.IndexOfColumn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00153">153</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                                                  {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">if</span> (table is IQueryTable)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">return</span> ((IQueryTable) table).FindColumn(columnName);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">if</span> (columnName.Parent != null &amp;&amp;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                !columnName.Parent.Equals(table.TableInfo.TableName))</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">return</span> table.TableInfo.IndexOfColumn(columnName);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a73bbf557559aa58adb87b142c2bf4831"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Intersect </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>all</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01075">1075</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                                                                                  {</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;            <span class="keywordflow">return</span> table.Composite(other, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">CompositeFunction</a>.Intersect, all);</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_htm_a43a8483ef91b1611fe44f265383656b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql.htm#a43a8483ef91b1611fe44f265383656b1">Deveel.Data.Sql.CompositeFunction</a></div><div class="ttdeci">CompositeFunction</div><div class="ttdoc">The kind of composite function in a CompositeTable. </div><div class="ttdef"><b>Definition:</b> <a href="CompositeFunction_8cs_source.htm#l00025">CompositeFunction.cs:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2a8f3f1a0f8eaad60b0d756f103aa852"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Join </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>otherTable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>quick</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01083">1083</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                                                                    {</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            ITable outTable;</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;            <span class="keywordflow">if</span> (quick) {</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                <span class="comment">// This implementation doesn&#39;t materialize the join</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                outTable = <span class="keyword">new</span> NaturallyJoinedTable(table, otherTable);</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                var tabs = <span class="keyword">new</span> [] { table, otherTable};</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                var rowSets = <span class="keyword">new</span> IList&lt;int&gt;[2];</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                <span class="comment">// Optimized trivial case, if either table has zero rows then result of</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                <span class="comment">// join will contain zero rows also.</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                <span class="keywordflow">if</span> (table.RowCount == 0 || otherTable.RowCount == 0) {</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                    rowSets[0] = <span class="keyword">new</span> List&lt;int&gt;(0);</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                    rowSets[1] = <span class="keyword">new</span> List&lt;int&gt;(0);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    <span class="comment">// The natural join algorithm.</span></div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                    List&lt;int&gt; thisRowSet = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                    List&lt;int&gt; tableRowSet = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                    <span class="comment">// Get the set of all rows in the given table.</span></div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                    var tableSelectedSet = otherTable.Select(x =&gt; x.RowId.RowNumber).ToList();</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                    <span class="keywordtype">int</span> tableSelectedSetSize = tableSelectedSet.Count;</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                    <span class="comment">// Join with the set of rows in this table.</span></div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                    var e = table.GetEnumerator();</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                    <span class="keywordflow">while</span> (e.MoveNext()) {</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                        <span class="keywordtype">int</span> rowIndex = e.Current.RowId.RowNumber;</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tableSelectedSetSize; ++i) {</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                            thisRowSet.Add(rowIndex);</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                        }</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                        tableRowSet.AddRange(tableSelectedSet);</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                    }</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                    <span class="comment">// The row sets we are joining from each table.</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                    rowSets[0] = thisRowSet;</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                    rowSets[1] = tableRowSet;</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                }</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                <span class="comment">// Create the new VirtualTable with the joined tables.</span></div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                outTable = <span class="keyword">new</span> VirtualTable(tabs, rowSets);</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            }</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;            <span class="keywordflow">return</span> outTable;</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acec41448a50af0ed298ff4e396b18caa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Join </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>operatorType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01135">1135</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                                      {</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;            var rightExpression = expression;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;            <span class="comment">// If the rightExpression is a simple variable then we have the option</span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;            <span class="comment">// of optimizing this join by putting the smallest table on the LHS.</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;            var rhsVar = rightExpression.AsReferenceName();</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;            var lhsVar = columnName;</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;            var op = operatorType;</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;            <span class="keywordflow">if</span> (rhsVar != null) {</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                <span class="comment">// We should arrange the expression so the right table is the smallest</span></div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                <span class="comment">// of the sides.</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                <span class="comment">// If the left result is less than the right result</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                <span class="keywordflow">if</span> (table.RowCount &lt; other.RowCount) {</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                    <span class="comment">// Reverse the join</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                    rightExpression = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(lhsVar);</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                    lhsVar = rhsVar;</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                    op = op.Reverse();</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                    <span class="comment">// Reverse the tables.</span></div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                    var t = other;</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                    other = table;</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                    table = t;</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                }</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            }</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;            var joinExp = <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Binary</a>(<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Reference</a>(lhsVar), op, rightExpression);</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;            <span class="comment">// The join operation.</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            <span class="keywordflow">return</span> table.SimpleJoin(context, other, joinExp);</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ae3792af713778beb017f2ed55e219e86"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ae3792af713778beb017f2ed55e219e86">Deveel.Data.Sql.Expressions.SqlExpression.Reference</a></div><div class="ttdeci">static SqlReferenceExpression Reference(ObjectName objectName)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00284">SqlExpression.cs:284</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_ad5bd15eb16058f78c184625a44fffde8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#ad5bd15eb16058f78c184625a44fffde8">Deveel.Data.Sql.Expressions.SqlExpression.Binary</a></div><div class="ttdeci">static SqlBinaryExpression Binary(SqlExpression left, SqlExpressionType expressionType, SqlExpression right)</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00304">SqlExpression.cs:304</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">Deveel.Data.Sql.Expressions.SqlExpression</a></div><div class="ttdoc">Defines the base class for instances that represent SQL expression tree nodes. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00035">SqlExpression.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3770f694295620e6026d3ed56b97647f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a> Deveel.Data.Sql.Tables.TableQueryExtensions.MakeObject </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00138">138</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                                                                    {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (columnOffset &lt; 0 || columnOffset &gt;= table.TableInfo.ColumnCount)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;columnOffset&quot;</span>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            var columnType = table.TableInfo[columnOffset].ColumnType;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>(columnType, value);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm">Deveel.Data.DataObject</a></div><div class="ttdoc">Represents a dynamic object that encapsulates a defined SqlType and a compatible constant ISqlObject ...</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00035">DataObject.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab03faadd6f1cc6267c3d666f0469c87d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.NaturalJoin </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>otherTable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01131">1131</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                                                                               {</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            <span class="keywordflow">return</span> table.Join(otherTable, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aff418839e2ef51e7557fae3e1a72175e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.NotIn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>otherTable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>tableColumns</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>otherColumns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01063">1063</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                                                                                                                 {</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;            <span class="keywordflow">return</span> table.AsVirtual(() =&gt; <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a18ab02f1cbc2eab43107f52387f685f4">SelectRowsNotIn</a>(table, otherTable, tableColumns, otherColumns));</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions_htm_a18ab02f1cbc2eab43107f52387f685f4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a18ab02f1cbc2eab43107f52387f685f4">Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsNotIn</a></div><div class="ttdeci">static IEnumerable&lt; int &gt; SelectRowsNotIn(this ITable table, ITable other, int col1, int col2)</div><div class="ttdoc">This implements the not in command. </div><div class="ttdef"><b>Definition:</b> <a href="TableQueryExtensions_8cs_source.htm#l01010">TableQueryExtensions.cs:1010</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a258209508608525eb4b74b77e39b7488"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OrderBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01309">1309</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                                                       {</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;            <span class="comment">// Sort by the column list.</span></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;            ITable resultTable = table;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = columns.Length - 1; i &gt;= 0; --i) {</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                resultTable = resultTable.OrderBy(columns[i], <span class="keyword">true</span>);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;            }</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;            <span class="comment">// A nice post condition to check on.</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;            <span class="keywordflow">if</span> (resultTable.RowCount != table.RowCount)</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;The final row count mismatches.&quot;</span>);</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;            <span class="keywordflow">return</span> table;</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a812f403b087f06c22dadfb2269e63a94"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OrderBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ascending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01323">1323</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;                                                                                         {</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;            <span class="keywordflow">if</span> (table == null)</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;            var rows = table.SelectAllRows(columnIndex);</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;            <span class="comment">// Reverse the list if we are not ascending</span></div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;            <span class="keywordflow">if</span> (@ascending == <span class="keyword">false</span>)</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;                rows = rows.Reverse();</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, rows.ToArray());</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a158541a52c4842b551d3cb32ee044756"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OrderBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ascending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01336">1336</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                                                                                               {</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;            var columnOffset = table.IndexOfColumn(columnName);</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            <span class="keywordflow">if</span> (columnOffset == -1)</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Column &#39;{0}&#39; was not found in table.&quot;</span>, columnName));</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            <span class="keywordflow">return</span> table.OrderBy(columnOffset, @ascending);</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9da71e5424b896afcdf37926f89cbb43"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OrderBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>columnNames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool[]&#160;</td>
          <td class="paramname"><em>ascending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01344">1344</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                                                                                    {</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;            var result = table;</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;            <span class="comment">// Sort the results by the columns in reverse-safe order.</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            <span class="keywordtype">int</span> sz = ascending.Length;</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = sz - 1; n &gt;= 0; --n) {</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                result = result.OrderBy(columnNames[n], ascending[n]);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            }</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a39a994f46a57ea46fa822af948b7cbd2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OrderBy </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ascending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01354">1354</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                                                                           {</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;            <span class="keywordflow">return</span> table.OrderBy(table.ResolveColumnName(columnName), ascending);</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a54245ba52cc00b30afd461f52660e7a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.OrderRowsByColumns </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01299">1299</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                                                                                            {</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;            var work = table.OrderBy(columns);</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;            <span class="comment">// &#39;work&#39; is now sorted by the columns,</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;            <span class="comment">// Get the rows in this tables domain,</span></div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;            var rowList = work.Select(row =&gt; row.RowId.RowNumber);</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;            <span class="keywordflow">return</span> work.ResolveRows(0, rowList, table);</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad8af42e60214625ed261ea0653e791ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.OuterJoin </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>rightTable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01218">1218</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                                                                             {</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            <span class="comment">// Form the row list for right hand table,</span></div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;            var rowList = rightTable.Select(x =&gt; x.RowId.RowNumber).ToList();</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;            <span class="keywordtype">int</span> colIndex = rightTable.IndexOfColumn(table.GetResolvedColumnName(0));</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;            rowList = rightTable.ResolveRows(colIndex, rowList, table).ToList();</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;            <span class="comment">// This row set</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;            var thisTableSet = table.Select(x =&gt; x.RowId.RowNumber).ToList();</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;            thisTableSet.Sort();</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;            rowList.Sort();</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;            <span class="comment">// Find all rows that are in &#39;this table&#39; and not in &#39;right&#39;</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;            List&lt;int&gt; resultList = <span class="keyword">new</span> List&lt;int&gt;(96);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            <span class="keywordtype">int</span> size = thisTableSet.Count;</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;            <span class="keywordtype">int</span> rowListIndex = 0;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;            <span class="keywordtype">int</span> rowListSize = rowList.Count;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                <span class="keywordtype">int</span> thisVal = thisTableSet[i];</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                <span class="keywordflow">if</span> (rowListIndex &lt; rowListSize) {</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                    <span class="keywordtype">int</span> inVal = rowList[rowListIndex];</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                    <span class="keywordflow">if</span> (thisVal &lt; inVal) {</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                        resultList.Add(thisVal);</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (thisVal == inVal) {</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                        <span class="keywordflow">while</span> (rowListIndex &lt; rowListSize &amp;&amp;</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                               rowList[rowListIndex] == inVal) {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                            ++rowListIndex;</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                        }</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;&#39;this_val&#39; &gt; &#39;in_val&#39;&quot;</span>);</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                    }</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                    resultList.Add(thisVal);</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                }</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;            }</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;            <span class="comment">// Return the new VirtualTable</span></div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, resultList);</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2f35fbd79614dbe550b4907ac5d877c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.Search </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>pattern</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00325">325</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                                                             {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keywordflow">return</span> table.Search(column, pattern, <span class="charliteral">&#39;\\&#39;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa1856262b257d8e5b2d6dbff40e3061e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.Search </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>escapeChar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00329">329</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                                                                              {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            var colType = table.TableInfo[column].ColumnType;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">// If the column type is not a string type then report an error.</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">if</span> (!(colType is <a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>))</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Unable to perform a pattern search on a non-String type column.&quot;</span>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="comment">// First handle the case that the column has an index that supports text search</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            var index = table.GetIndex(column);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">if</span> (index != null &amp;&amp; index.HandlesTextSearch)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">return</span> index.SelectLike(<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">String</a>(pattern));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            var colStringType = (StringType)colType;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="comment">// ---------- Pre Search ----------</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="comment">// First perform a &#39;pre-search&#39; on the head of the pattern.  Note that</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="comment">// there may be no head in which case the entire column is searched which</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="comment">// has more potential to be expensive than if there is a head.</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            StringBuilder prePattern = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordtype">bool</span> finished = i &gt;= pattern.Length;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordtype">bool</span> lastIsEscape = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">while</span> (!finished) {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keywordtype">char</span> c = pattern[i];</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">if</span> (lastIsEscape) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    lastIsEscape = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    prePattern.Append(c);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c == escapeChar) {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    lastIsEscape = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm">PatternSearch</a>.<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">IsWildCard</a>(c)) {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    prePattern.Append(c);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    ++i;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    <span class="keywordflow">if</span> (i &gt;= pattern.Length) {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        finished = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    finished = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="comment">// This is set with the remaining search.</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordtype">string</span> postPattern;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="comment">// This is our initial search row set.  In the second stage, rows are</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="comment">// eliminated from this vector.</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            IEnumerable&lt;int&gt; searchCase;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordflow">if</span> (i &gt;= pattern.Length) {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="comment">// If the pattern has no &#39;wildcards&#39; then just perform an EQUALS</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="comment">// operation on the column and return the results.</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                var cell = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>(colType, <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(pattern));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aad86c70ab0b3832965b5269fe1a4f55a">SelectRows</a>(table, column, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal, cell);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">if</span> (prePattern.Length == 0 ||</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                colStringType.Locale != null) {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                <span class="comment">// No pre-pattern easy search :-(.  This is either because there is no</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="comment">// pre pattern (it starts with a wild-card) or the locale of the string</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="comment">// is non-lexicographical.  In either case, we need to select all from</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                <span class="comment">// the column and brute force the search space.</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                searchCase = table.SelectAllRows(column);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                postPattern = pattern;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="comment">// Criteria met: There is a pre_pattern, and the column locale is</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="comment">// lexicographical.</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="comment">// Great, we can do an upper and lower bound search on our pre-search</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="comment">// set.  eg. search between &#39;Geoff&#39; and &#39;Geofg&#39; or &#39;Geoff &#39; and</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                <span class="comment">// &#39;Geoff\33&#39;</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                var lowerBounds = prePattern.ToString();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <span class="keywordtype">int</span> nextChar = prePattern[i - 1] + 1;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                prePattern[i - 1] = (char)nextChar;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                var upperBounds = prePattern.ToString();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                postPattern = pattern.Substring(i);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                var cellLower = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>(colType, <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(lowerBounds));</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                var cellUpper = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>(colType, <span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(upperBounds));</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                <span class="comment">// Select rows between these two points.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                searchCase = table.SelectRowsBetween(column, cellLower, cellUpper);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            }</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="comment">// ---------- Post search ----------</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            <span class="keywordtype">int</span> preIndex = i;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="comment">// Now eliminate from our &#39;search_case&#39; any cells that don&#39;t match our</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="comment">// search pattern.</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="comment">// Note that by this point &#39;post_pattern&#39; will start with a wild card.</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="comment">// This follows the specification for the &#39;PatternMatch&#39; method.</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="comment">// EFFICIENCY: This is a brute force iterative search.  Perhaps there is</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="comment">//   a faster way of handling this?</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            var iList = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm">BlockIndex&lt;int&gt;</a>(searchCase);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            var enumerator = iList.GetEnumerator(0, iList.Count - 1);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordflow">while</span> (enumerator.MoveNext()) {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <span class="comment">// Get the expression (the contents of the cell at the given column, row)</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <span class="keywordtype">bool</span> patternMatches = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                var cell = table.GetValue(enumerator.Current, column);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <span class="comment">// Null values doesn&#39;t match with anything</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordflow">if</span> (!cell.IsNull) {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    <span class="keywordtype">string</span> expression = cell.AsVarChar().Value.ToString();</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    <span class="comment">// We must remove the head of the string, which has already been</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="comment">// found from the pre-search section.</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    expression = expression.Substring(preIndex);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    patternMatches = <a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm">PatternSearch</a>.<a class="code" href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">PatternMatch</a>(postPattern, expression, escapeChar);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                <span class="keywordflow">if</span> (!patternMatches) {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="comment">// If pattern does not match then remove this row from the search.</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    enumerator.Remove();</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">return</span> iList.ToList();</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_a4930586d99bce5807993af0cfaa8e966"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#a4930586d99bce5807993af0cfaa8e966">Deveel.Data.DataObject.String</a></div><div class="ttdeci">static DataObject String(string s)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00592">DataObject.cs:592</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_a9ed33226a41a4d06ff2764611e736fa7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#a9ed33226a41a4d06ff2764611e736fa7">Deveel.Data.Text.PatternSearch.PatternMatch</a></div><div class="ttdeci">static bool PatternMatch(string pattern, string expression, char escapeChar)</div><div class="ttdoc">This is the pattern match recurrsive method. </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00129">PatternSearch.cs:129</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm">Deveel.Data.DataObject</a></div><div class="ttdoc">Represents a dynamic object that encapsulates a defined SqlType and a compatible constant ISqlObject ...</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00035">DataObject.cs:35</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm_abfdce6e3cf7fefd107f9e87d68778938"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm#abfdce6e3cf7fefd107f9e87d68778938">Deveel.Data.Text.PatternSearch.IsWildCard</a></div><div class="ttdeci">static bool IsWildCard(char ch)</div><div class="ttdoc">Returns true if the given character is a wild card (unknown). </div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00055">PatternSearch.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndex_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm">Deveel.Data.Index.BlockIndex&lt; int &gt;</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions_htm_aad86c70ab0b3832965b5269fe1a4f55a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aad86c70ab0b3832965b5269fe1a4f55a">Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRows</a></div><div class="ttdeci">static IEnumerable&lt; int &gt; SelectRows(this ITable table, IVariableResolver resolver, IRequest context, SqlBinaryExpression expression)</div><div class="ttdef"><b>Definition:</b> <a href="TableQueryExtensions_8cs_source.htm#l00247">TableQueryExtensions.cs:247</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Text_1_1PatternSearch_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Text_1_1PatternSearch.htm">Deveel.Data.Text.PatternSearch</a></div><div class="ttdoc">This is a static class that performs the operations to do a pattern search on a given column of a tab...</div><div class="ttdef"><b>Definition:</b> <a href="PatternSearch_8cs_source.htm#l00045">PatternSearch.cs:45</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9f73d3840ac6ddc9bfdbfea6ddcc0da1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelecRowsLess </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00215">215</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                                                                            {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectLess(value);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9564e4a0184d47861f9a6b740580b219"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelecRowsLess </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00219">219</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                                                                                            {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> table.SelecRowsLess(columnOffset, table.MakeObject(columnOffset, value));</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a67f9a1fa15fc6c2c53f86fb99d045be9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Select </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00476">476</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                                                                                   {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keywordflow">if</span> (expression is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>) {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                var binary = (SqlBinaryExpression)expression;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                <span class="comment">// Perform the pattern search expression on the table.</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                <span class="comment">// Split the expression,</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                var leftRef = binary.Left.AsReferenceName();</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <span class="keywordflow">if</span> (leftRef != null)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    <span class="comment">// LHS is a simple variable so do a simple select</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                    <span class="keywordflow">return</span> table.SimpleSelect(context, leftRef, binary.ExpressionType, binary.Right);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="comment">// LHS must be a constant so we can just evaluate the expression</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="comment">// and see if we get true, false, null, etc.</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            var v = expression.EvaluateToConstant(context, null);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="comment">// If it evaluates to NULL or FALSE then return an empty set</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="keywordflow">if</span> (v.IsNull || v == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                <span class="keywordflow">return</span> table.EmptySelect();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">return</span> table;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">Deveel.Data.Sql.Expressions.SqlBinaryExpression</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00023">SqlBinaryExpression.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab61b513198d998609482a5c37b977e39"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SelectAll </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00472">472</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                                                            {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">return</span> table.AsVirtual(() =&gt; table.SelectAllRows(columnOffset));</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4f71c7a8100f22769b3731eee566c520"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectAllRows </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00231">231</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                                                          {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectAll();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a24dcbead311c2316603d11bc930111f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectAllRows </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00235">235</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                                        {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> table.Select(x =&gt; x.RowId.RowNumber);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a13552bff4f020cb1f11ac3023d8b1ea6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SelectAnyAllNonCorrelated </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>leftColumns</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>rightTable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00752">752</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                                                                                                                             {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">if</span> (rightTable.TableInfo.ColumnCount != leftColumns.Length) {</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The right table has {0} columns that is different from the specified column names ({1})&quot;</span>,</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                    rightTable.TableInfo.ColumnCount, leftColumns.Length));</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            }</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="comment">// Handle trivial case of no entries to select from</span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keywordflow">if</span> (table.RowCount == 0)</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                <span class="keywordflow">return</span> table;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="comment">// Resolve the vars in the left table and check the references are</span></div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="comment">// compatible.</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            var sz = leftColumns.Length;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            var leftColMap = <span class="keyword">new</span> <span class="keywordtype">int</span>[sz];</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            var rightColMap = <span class="keyword">new</span> <span class="keywordtype">int</span>[sz];</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                leftColMap[i] = table.FindColumn(leftColumns[i]);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                rightColMap[i] = i;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="keywordflow">if</span> (leftColMap[i] == -1)</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Invalid reference: &quot;</span> + leftColumns[i]);</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                var leftType = table.TableInfo[leftColMap[i]].ColumnType;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                var rightType = rightTable.TableInfo[i].ColumnType;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                <span class="keywordflow">if</span> (!leftType.IsComparable(rightType)) {</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The type of the sub-query expression {0}({1}) &quot;</span> +</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                                              <span class="stringliteral">&quot;is not compatible with the sub-query type {2}.&quot;</span>,</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                        leftColumns[i], leftType, rightType));</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                }</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            IEnumerable&lt;int&gt; rows;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <span class="keywordflow">if</span> (!op.IsSubQuery())</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The operator {0} is not a sub-query form.&quot;</span>, op));</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <span class="keywordflow">if</span> (op.IsAll()) {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                <span class="comment">// ----- ALL operation -----</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                <span class="comment">// We work out as follows:</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                <span class="comment">//   For &gt;, &gt;= type ALL we find the highest value in &#39;table&#39; and</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                <span class="comment">//   select from &#39;source&#39; all the rows that are &gt;, &gt;= than the</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                <span class="comment">//   highest value.</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                <span class="comment">//   For &lt;, &lt;= type ALL we find the lowest value in &#39;table&#39; and</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <span class="comment">//   select from &#39;source&#39; all the rows that are &lt;, &lt;= than the</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                <span class="comment">//   lowest value.</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                <span class="comment">//   For = type ALL we see if &#39;table&#39; contains a single value.  If it</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                <span class="comment">//   does we select all from &#39;source&#39; that equals the value, otherwise an</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                <span class="comment">//   empty table.</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                <span class="comment">//   For &lt;&gt; type ALL we use the &#39;not in&#39; algorithm.</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllGreaterThan || </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                    op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllGreaterOrEqualThan) {</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    <span class="comment">// Select the last from the set (the highest value),</span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                    var highestCells = rightTable.GetLastValues(rightColMap);</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                    <span class="comment">// Select from the source table all rows that are &gt; or &gt;= to the</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                    <span class="comment">// highest cell,</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    rows = table.SelectRows(leftColMap, op, highestCells);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllSmallerThan || </div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                           op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllSmallerOrEqualThan) {</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                    <span class="comment">// Select the first from the set (the lowest value),</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                    var lowestCells = rightTable.GetFirstValues(rightColMap);</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                    <span class="comment">// Select from the source table all rows that are &lt; or &lt;= to the</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                    <span class="comment">// lowest cell,</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                    rows = table.SelectRows(leftColMap, op, lowestCells);</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllEqual) {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                    <span class="comment">// Select the single value from the set (if there is one).</span></div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                    var singleCell = rightTable.GetSingleValues(rightColMap);</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                    <span class="keywordflow">if</span> (singleCell != null) {</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                        <span class="comment">// Select all from source_table all values that = this cell</span></div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                        rows = table.SelectRows(leftColMap, op, singleCell);</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                        <span class="comment">// No single value so return empty set (no value in LHS will equal</span></div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                        <span class="comment">// a value in RHS).</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                        <span class="keywordflow">return</span> table.EmptySelect();</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                    }</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AllNotEqual) {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                    <span class="comment">// Equiv. to NOT IN</span></div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                    rows = table.SelectRowsNotIn(rightTable, leftColMap, rightColMap);</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Operator of type {0} is not valid in ALL functions.&quot;</span>, op.SubQueryPlainType()));</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                }</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                <span class="comment">// ----- ANY operation -----</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                <span class="comment">// We work out as follows:</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                <span class="comment">//   For &gt;, &gt;= type ANY we find the lowest value in &#39;table&#39; and</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                <span class="comment">//   select from &#39;source&#39; all the rows that are &gt;, &gt;= than the</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                <span class="comment">//   lowest value.</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                <span class="comment">//   For &lt;, &lt;= type ANY we find the highest value in &#39;table&#39; and</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                <span class="comment">//   select from &#39;source&#39; all the rows that are &lt;, &lt;= than the</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                <span class="comment">//   highest value.</span></div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                <span class="comment">//   For = type ANY we use same method from INHelper.</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                <span class="comment">//   For &lt;&gt; type ANY we iterate through &#39;source&#39; only including those</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                <span class="comment">//   rows that a &lt;&gt; query on &#39;table&#39; returns size() != 0.</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnyGreaterThan || </div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnyGreaterOrEqualThan) {</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                    <span class="comment">// Select the first from the set (the lowest value),</span></div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                    var lowestCells = rightTable.GetFirstValues(rightColMap);</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                    <span class="comment">// Select from the source table all rows that are &gt; or &gt;= to the</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                    <span class="comment">// lowest cell,</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                    rows = table.SelectRows(leftColMap, op, lowestCells);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnySmallerThan || </div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                           op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnySmallerOrEqualThan) {</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                    <span class="comment">// Select the last from the set (the highest value),</span></div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                    var highestCells = rightTable.GetLastValues(rightColMap);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                    <span class="comment">// Select from the source table all rows that are &lt; or &lt;= to the</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                    <span class="comment">// highest cell,</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                    rows = table.SelectRows(leftColMap, op, highestCells);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnyEqual) {</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                    <span class="comment">// Equiv. to IN</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                    rows = table.SelectRowsIn(rightTable, leftColMap, rightColMap);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.AnyNotEqual) {</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                    <span class="comment">// Select the value that is the same of the entire column</span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                    var cells = rightTable.GetSingleValues(rightColMap);</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                    <span class="keywordflow">if</span> (cells != null) {</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                        <span class="comment">// All values from &#39;source_table&#39; that are &lt;&gt; than the given cell.</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                        rows = table.SelectRows(leftColMap, op, cells);</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                        <span class="comment">// No, this means there are different values in the given set so the</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                        <span class="comment">// query evaluates to the entire table.</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                        <span class="keywordflow">return</span> table;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Operator of type {0} is not valid in ANY functions.&quot;</span>, op.SubQueryPlainType()));</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            }</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, rows.ToArray());</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aebae9fcbd21baf1c28b0ee86ed8508f5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SelectEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00463">463</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                                                                               {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keywordflow">return</span> table.AsVirtual(() =&gt; table.SelectRowsEqual(columnIndex, value));</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5490c430ba5e75e1798b104db373a09a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SelectEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00468">468</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                                                                                 {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">return</span> table.AsVirtual(() =&gt; table.SelectRowsEqual(columnName, value));</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa4f63558d40f87426cd3d691123d1527"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectFirst </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00243">243</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                                                        {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectFirst();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae25d596c96619666727409a579a5336a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectFromPattern </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>ob</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00620">620</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                                                                                                             {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            <span class="keywordflow">if</span> (ob.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#a1f721d36417175d9687aaf35028050f3">IsNull</a>)</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotLike) {</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                <span class="comment">// How this works:</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                <span class="comment">//   Find the set or rows that are like the pattern.</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="comment">//   Find the complete set of rows in the column.</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                <span class="comment">//   Sort the &#39;like&#39; rows</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="comment">//   For each row that is in the original set and not in the like set,</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                <span class="comment">//     add to the result list.</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                <span class="comment">//   Result is the set of not like rows ordered by the column.</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                var likeSet = (List&lt;int&gt;)table.Search(column, ob.ToString());</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                <span class="comment">// Don&#39;t include NULL values</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                var nullCell = <a class="code" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ac5fb2a3cb95aa4344150cfa377ab95b2">Null</a>(ob.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Type</a>);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                IList&lt;int&gt; originalSet = table.SelectRows(column, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.IsNot, nullCell).ToList();</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                <span class="keywordtype">int</span> listSize = <a class="code" href="namespaceSystem.htm">System</a>.Math.Max(4, (originalSet.Count - likeSet.Count) + 4);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                List&lt;int&gt; resultSet = <span class="keyword">new</span> List&lt;int&gt;(listSize);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                likeSet.Sort();</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordtype">int</span> size = originalSet.Count;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <span class="keywordtype">int</span> val = originalSet[i];</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                    <span class="comment">// If val not in like set, add to result</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="keywordflow">if</span> (likeSet.BinarySearch(val) == 0) {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                        resultSet.Add(val);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                <span class="keywordflow">return</span> resultSet;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            }</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            <span class="comment">// if (op.is(&quot;like&quot;)) {</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="keywordflow">return</span> table.Search(column, ob.ToString());</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_a1f721d36417175d9687aaf35028050f3"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#a1f721d36417175d9687aaf35028050f3">Deveel.Data.DataObject.IsNull</a></div><div class="ttdeci">bool IsNull</div><div class="ttdoc">Gets a value that indicates if this object is materialized as null. </div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00091">DataObject.cs:91</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ab80cc7e950c6ccf7a6e3a83a41e83402"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Deveel.Data.DataObject.Type</a></div><div class="ttdeci">SqlType Type</div><div class="ttdoc">Gets the SqlType that defines the object properties </div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00078">DataObject.cs:78</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ac5fb2a3cb95aa4344150cfa377ab95b2"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ac5fb2a3cb95aa4344150cfa377ab95b2">Deveel.Data.DataObject.Null</a></div><div class="ttdeci">static DataObject Null(SqlType type)</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00630">DataObject.cs:630</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm">Deveel.Data.DataObject</a></div><div class="ttdoc">Represents a dynamic object that encapsulates a defined SqlType and a compatible constant ISqlObject ...</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00035">DataObject.cs:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7180babccc24c6648a4ebf8c226a9da3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectLast </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00239">239</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                                                       {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectLast();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aaed0914755f51226513a49331474a70a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectNotEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00174">174</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                                                             {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectNotEqual(value);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9976050f66e4b550b7d885dc42554491"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectNotEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00178">178</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                                                                             {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">return</span> table.SelectNotEqual(columnOffset, table.MakeObject(columnOffset, value));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        } </div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ada390619fa18ad317c43292a0417c420"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRange </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>thisTable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>[]&#160;</td>
          <td class="paramname"><em>ranges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00705">705</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                                                                                            {</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="comment">// If this table is empty then there is no range to select so</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <span class="comment">// trivially return this object.</span></div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">if</span> (thisTable.RowCount == 0)</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                <span class="keywordflow">return</span> thisTable;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="comment">// Are we selecting a black or null range?</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <span class="keywordflow">if</span> (ranges == null || ranges.Length == 0)</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                <span class="comment">// Yes, so return an empty table</span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                <span class="keywordflow">return</span> thisTable.EmptySelect();</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="comment">// Are we selecting the entire range?</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">if</span> (ranges.Length == 1 &amp;&amp;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                ranges[0].Equals(<a class="code" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>.<a class="code" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm#a1d1d5cdb58540eca06c4d2dca9ef832f">FullRange</a>))</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                <span class="comment">// Yes, so return this table.</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                <span class="keywordflow">return</span> thisTable;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            <span class="comment">// Must be a non-trivial range selection.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="comment">// Find the column index of the column selected</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="keywordtype">int</span> column = thisTable.IndexOfColumn(columnName);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">if</span> (column == -1) {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="stringliteral">&quot;Unable to find the column given to select the range of: &quot;</span> +</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                    columnName.Name);</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            }</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="comment">// Select the range</span></div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            var rows = thisTable.SelectRowsRange(column, ranges);</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <span class="comment">// Make a new table with the range selected</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            var result = <span class="keyword">new</span> VirtualTable(thisTable, rows.ToArray());</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="comment">// We know the new set is ordered by the column.</span></div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            result.SortColumn = column;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        }</div>
<div class="ttc" id="structDeveel_1_1Data_1_1Index_1_1IndexRange_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">Deveel.Data.Index.IndexRange</a></div><div class="ttdoc">Describes the range of values to select from an index. </div><div class="ttdef"><b>Definition:</b> <a href="IndexRange_8cs_source.htm#l00038">IndexRange.cs:38</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Index_1_1IndexRange_htm_a1d1d5cdb58540eca06c4d2dca9ef832f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm#a1d1d5cdb58540eca06c4d2dca9ef832f">Deveel.Data.Index.IndexRange.FullRange</a></div><div class="ttdeci">static readonly IndexRange FullRange</div><div class="ttdoc">The entire range of values in an index (including NULL) </div><div class="ttdef"><b>Definition:</b> <a href="IndexRange_8cs_source.htm#l00074">IndexRange.cs:74</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aad86c70ab0b3832965b5269fe1a4f55a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRows </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1IVariableResolver.htm">IVariableResolver</a>&#160;</td>
          <td class="paramname"><em>resolver</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>&#160;</td>
          <td class="paramname"><em>expression</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00247">247</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                            {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            var objRef = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Left</a> as <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression.htm">SqlReferenceExpression</a>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">if</span> (objRef == null)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            var columnName = objRef.ReferenceName;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            var column = table.FindColumn(columnName);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">if</span> (column &lt; 0)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            var reduced = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#acbbbddc9eaa9c48707a578d54b7a4bf7">Right</a>.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>(context, resolver);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span> (reduced.ExpressionType != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException();</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            var value = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) reduced).Value;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            var binOperator = expression.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ae824e2a89deb2ff7f521329e8fb5934f">ExpressionType</a>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">return</span> table.SelectRows(column, binOperator, value);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_ae824e2a89deb2ff7f521329e8fb5934f"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ae824e2a89deb2ff7f521329e8fb5934f">Deveel.Data.Sql.Expressions.SqlBinaryExpression.ExpressionType</a></div><div class="ttdeci">override SqlExpressionType ExpressionType</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00053">SqlBinaryExpression.cs:53</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression.htm">Deveel.Data.Sql.Expressions.SqlReferenceExpression</a></div><div class="ttdoc">An expression that references an object within a context. </div><div class="ttdef"><b>Definition:</b> <a href="SqlReferenceExpression_8cs_source.htm#l00026">SqlReferenceExpression.cs:26</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_acbbbddc9eaa9c48707a578d54b7a4bf7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#acbbbddc9eaa9c48707a578d54b7a4bf7">Deveel.Data.Sql.Expressions.SqlBinaryExpression.Right</a></div><div class="ttdeci">SqlExpression Right</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00047">SqlBinaryExpression.cs:47</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_af183cbb43972165fd569f3910a46a5d3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Deveel.Data.Sql.Expressions.SqlExpression.Evaluate</a></div><div class="ttdeci">virtual SqlExpression Evaluate(EvaluateContext context)</div><div class="ttdoc">When overridden by a derived class, this method evaluates the expression within the provided context...</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00167">SqlExpression.cs:167</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_ab6cfdbd79ee5230b7a3b7faf911067ce"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Deveel.Data.Sql.Expressions.SqlBinaryExpression.Left</a></div><div class="ttdeci">SqlExpression Left</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00045">SqlBinaryExpression.cs:45</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">Deveel.Data.Sql.Expressions.SqlConstantExpression</a></div><div class="ttdoc">An expression that holds a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpression_8cs_source.htm#l00033">SqlConstantExpression.cs:33</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae5556f3264239c27fd6aeea0c940e38a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRows </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>columnOffsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>[]&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00272">272</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                 {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span> (columnOffsets.Length &gt; 1)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="stringliteral">&quot;Multi-column selects not supported yet.&quot;</span>);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aad86c70ab0b3832965b5269fe1a4f55a">SelectRows</a>(table, columnOffsets[0], op, values[0]);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions_htm_aad86c70ab0b3832965b5269fe1a4f55a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#aad86c70ab0b3832965b5269fe1a4f55a">Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRows</a></div><div class="ttdeci">static IEnumerable&lt; int &gt; SelectRows(this ITable table, IVariableResolver resolver, IRequest context, SqlBinaryExpression expression)</div><div class="ttdef"><b>Definition:</b> <a href="TableQueryExtensions_8cs_source.htm#l00247">TableQueryExtensions.cs:247</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a90c42c86cdc56282982c4453325969af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRows </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00292">292</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                                                                                                         {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="comment">// If the cell is of an incompatible type, return no results,</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            var colType = table.TableInfo[column].ColumnType;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">if</span> (!value.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Type</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a2ff8f5717569d0651fd5dd19f18cc32e">IsComparable</a>(colType)) {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="comment">// Types not comparable, so return 0</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> List&lt;int&gt;(0);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="comment">// Get the selectable scheme for this column</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            var index = table.GetIndex(column);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="comment">// If the operator is a standard operator, use the interned SelectableScheme</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="comment">// methods.</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">return</span> index.SelectEqual(value);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotEqual)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">return</span> index.SelectNotEqual(value);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterThan)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">return</span> index.SelectGreater(value);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerThan)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keywordflow">return</span> index.SelectLess(value);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.GreaterOrEqualThan)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keywordflow">return</span> index.SelectGreaterOrEqual(value);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.SmallerOrEqualThan)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">return</span> index.SelectLessOrEqual(value);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="comment">// If it&#39;s not a standard operator (such as IS, NOT IS, etc) we generate the</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="comment">// range set especially.</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            var rangeSet = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">IndexRangeSet</a>();</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            rangeSet = rangeSet.Intersect(op, value);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">return</span> index.SelectRange(rangeSet.ToArray());</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ab80cc7e950c6ccf7a6e3a83a41e83402"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Deveel.Data.DataObject.Type</a></div><div class="ttdeci">SqlType Type</div><div class="ttdoc">Gets the SqlType that defines the object properties </div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00078">DataObject.cs:78</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1SqlType_htm_a2ff8f5717569d0651fd5dd19f18cc32e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a2ff8f5717569d0651fd5dd19f18cc32e">Deveel.Data.Types.SqlType.IsComparable</a></div><div class="ttdeci">virtual bool IsComparable(SqlType type)</div><div class="ttdoc">Verifies if a given SqlType is comparable to this data-type. </div><div class="ttdef"><b>Definition:</b> <a href="SqlType_8cs_source.htm#l00137">SqlType.cs:137</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1IndexRangeSet.htm">Deveel.Data.Index.IndexRangeSet</a></div><div class="ttdef"><b>Definition:</b> <a href="IndexRangeSet_8cs_source.htm#l00024">IndexRangeSet.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa1ca86afdbe6f4f58d50e7a782db3b1e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsBetween </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>minCell</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>maxCell</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00280">280</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                                                                                                                {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="comment">// Check all the tables are comparable</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            var colType = table.TableInfo[column].ColumnType;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">if</span> (!minCell.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Type</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a2ff8f5717569d0651fd5dd19f18cc32e">IsComparable</a>(colType) ||</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                !maxCell.<a class="code" href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Type</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a2ff8f5717569d0651fd5dd19f18cc32e">IsComparable</a>(colType)) {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="comment">// Types not comparable, so return 0</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> List&lt;int&gt;(0);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(column).SelectBetween(minCell, maxCell);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1DataObject_htm_ab80cc7e950c6ccf7a6e3a83a41e83402"><div class="ttname"><a href="classDeveel_1_1Data_1_1DataObject.htm#ab80cc7e950c6ccf7a6e3a83a41e83402">Deveel.Data.DataObject.Type</a></div><div class="ttdeci">SqlType Type</div><div class="ttdoc">Gets the SqlType that defines the object properties </div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00078">DataObject.cs:78</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1SqlType_htm_a2ff8f5717569d0651fd5dd19f18cc32e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1SqlType.htm#a2ff8f5717569d0651fd5dd19f18cc32e">Deveel.Data.Types.SqlType.IsComparable</a></div><div class="ttdeci">virtual bool IsComparable(SqlType type)</div><div class="ttdoc">Verifies if a given SqlType is comparable to this data-type. </div><div class="ttdef"><b>Definition:</b> <a href="SqlType_8cs_source.htm#l00137">SqlType.cs:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5aca03fb61e373da5c34eee608f6c924"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00166">166</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                                                                                             {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnIndex).SelectEqual(value);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae86fdcfd1939aa55154f65d5cea27930"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00170">170</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                                                                               {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsEqual(table.IndexOfColumn(columnName), value);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4bdb07a4f22d66d9a992382ec396a0bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnIndex1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnIndex2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00182">182</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                                                                                                                    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            var result = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            var index1 = table.GetIndex(columnIndex1).SelectEqual(value1);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">foreach</span> (var rowIndex <span class="keywordflow">in</span> index1) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                var tableValue = table.GetValue(rowIndex, columnIndex2);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">if</span> (tableValue.IsEqualTo(value2))</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    result.Add(rowIndex);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a148467c9ec2a70e42fa1811890807e52"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsGreater </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00199">199</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                                                                                                {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectGreater(value);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad374ca715fcfa0e873547a8a58f8ed93"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsGreater </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00203">203</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                                                                                {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsGreater(columnOffset, table.MakeObject(columnOffset, value));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a925b1ae89e5ab0582b0ec9fbecbc9e4d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsGreaterOrEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00207">207</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                                                                                       {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectGreaterOrEqual(value);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a50cb66a1566b3834de2a9212b65e4d27"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsGreaterOrEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00211">211</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                                                                                       {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsGreaterOrEqual(columnOffset, table.MakeObject(columnOffset, value));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        } </div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a26123947fa64ae7e7449619ef55dd66d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsIn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This implements the <code>in</code> command. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td></td></tr>
    <tr><td class="paramname">other</td><td></td></tr>
    <tr><td class="paramname">column1</td><td></td></tr>
    <tr><td class="paramname">column2</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the rows selected from <em>table1</em> . </dd></dl>

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00921">921</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                                                                                               {</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            <span class="comment">// First pick the the smallest and largest table.  We only want to iterate</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            <span class="comment">// through the smallest table.</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            <span class="comment">// NOTE: This optimisation can&#39;t be performed for the &#39;not_in&#39; command.</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            ITable smallTable;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            ITable largeTable;</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            <span class="keywordtype">int</span> smallColumn;</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            <span class="keywordtype">int</span> largeColumn;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;            <span class="keywordflow">if</span> (table.RowCount &lt; other.RowCount) {</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                smallTable = table;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                largeTable = other;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                smallColumn = column1;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                largeColumn = column2;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                smallTable = other;</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                largeTable = table;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                smallColumn = column2;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                largeColumn = column1;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;            }</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <span class="comment">// Iterate through the small table&#39;s column.  If we can find identical</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="comment">// cells in the large table&#39;s column, then we should include the row in our</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            <span class="comment">// final result.</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            var resultRows = <span class="keyword">new</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm">BlockIndex&lt;int&gt;</a>();</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;            var op = <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            <span class="keywordflow">foreach</span> (var row <span class="keywordflow">in</span> smallTable) {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                var cell = row.GetValue(smallColumn);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                var selectedSet = largeTable.SelectRows(largeColumn, op, cell).ToList();</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                <span class="comment">// We&#39;ve found cells that are IN both columns,</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                <span class="keywordflow">if</span> (selectedSet.Count &gt; 0) {</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                    <span class="comment">// If the large table is what our result table will be based on, append</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    <span class="comment">// the rows selected to our result set.  Otherwise add the index of</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    <span class="comment">// our small table.  This only works because we are performing an</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                    <span class="comment">// EQUALS operation.</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                    <span class="keywordflow">if</span> (largeTable == table) {</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                        <span class="comment">// Only allow unique rows into the table set.</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                        <span class="keywordtype">int</span> sz = selectedSet.Count;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                        <span class="keywordtype">bool</span> rs = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; rs &amp;&amp; i &lt; sz; ++i) {</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                            rs = resultRows.UniqueInsertSort(selectedSet[i]);</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                        }</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                        <span class="comment">// Don&#39;t bother adding in sorted order because it&#39;s not important.</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                        resultRows.Add(row.RowId.RowNumber);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    }</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                }</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            }</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <span class="keywordflow">return</span> resultRows.ToList();</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndex_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm">Deveel.Data.Index.BlockIndex&lt; int &gt;</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4d53a589d8e91917ff4a609232a1b9b4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsIn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>t1Cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>t2Cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A multi-column version of <code>IN</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td></td></tr>
    <tr><td class="paramname">other</td><td></td></tr>
    <tr><td class="paramname">t1Cols</td><td></td></tr>
    <tr><td class="paramname">t2Cols</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00991">991</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                                                                                                 {</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            <span class="keywordflow">if</span> (t1Cols.Length &gt; 1)</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="stringliteral">&quot;Multi-column &#39;in&#39; not supported yet.&quot;</span>);</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsIn(other, t1Cols[0], t2Cols[0]);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1a8affb3702a39a415a90bea0261875c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsLessOrEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1DataObject.htm">DataObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00223">223</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                                                                                    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(columnOffset).SelectLessOrEqual(value);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8ccfb39d5a6400e834009c6ff1664fcb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsLessOrEqual </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>columnOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00227">227</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                                                                                    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsLessOrEqual(columnOffset, table.MakeObject(columnOffset, value));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a18ab02f1cbc2eab43107f52387f685f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsNotIn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>col1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>col2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This implements the <code>not in</code> command. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td></td></tr>
    <tr><td class="paramname">other</td><td></td></tr>
    <tr><td class="paramname">col1</td><td></td></tr>
    <tr><td class="paramname">col2</td><td></td></tr>
  </table>
  </dd>
</dl>
<p><b>Issue</b>: This will be less efficient than <a class="el" href="">in</a> if <em>table</em>  has many rows and <em>other</em>  has few rows. </p>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01010">1010</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                                                                                            {</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            <span class="comment">// Handle trivial cases</span></div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            <span class="keywordtype">int</span> t2RowCount = other.RowCount;</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            <span class="keywordflow">if</span> (t2RowCount == 0)</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                <span class="comment">// No rows so include all rows.</span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                <span class="keywordflow">return</span> table.SelectAllRows(col1);</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;            <span class="keywordflow">if</span> (t2RowCount == 1) {</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                <span class="comment">// 1 row so select all from table1 that doesn&#39;t equal the value.</span></div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;                var en = other.GetEnumerator();</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                <span class="keywordflow">if</span> (!en.MoveNext())</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Cannot iterate through table rows.&quot;</span>);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                var cell = other.GetValue(en.Current.RowId.RowNumber, col2);</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                <span class="keywordflow">return</span> table.SelectRows(col1, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotEqual, cell);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;            }</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;            <span class="comment">// Iterate through table1&#39;s column.  If we can find identical cell in the</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            <span class="comment">// tables&#39;s column, then we should not include the row in our final</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            <span class="comment">// result.</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;            List&lt;int&gt; resultRows = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;            <span class="keywordflow">foreach</span> (var row <span class="keywordflow">in</span> table) {</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;                <span class="keywordtype">int</span> rowIndex = row.RowId.RowNumber;</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                var cell = row.GetValue(col1);</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                var selectedSet = other.SelectRows(col2, <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Equal, cell);</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                <span class="comment">// We&#39;ve found a row in table1 that doesn&#39;t have an identical cell in</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                <span class="comment">// other, so we should include it in the result.</span></div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                <span class="keywordflow">if</span> (!selectedSet.Any())</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                    resultRows.Add(rowIndex);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            }</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;            <span class="keywordflow">return</span> resultRows;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a56287ac52d6c2704f856d7ef29a5511c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsNotIn </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>t1Cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>t2Cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A multi-column version of NOT IN. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table1</td><td></td></tr>
    <tr><td class="paramname">other</td><td></td></tr>
    <tr><td class="paramname">t1Cols</td><td></td></tr>
    <tr><td class="paramname">t2Cols</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01056">1056</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                                                                                                                    {</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;            <span class="keywordflow">if</span> (t1Cols.Length &gt; 1)</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="stringliteral">&quot;Multi-column &#39;not in&#39; not supported yet.&quot;</span>);</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;            <span class="keywordflow">return</span> table.SelectRowsNotIn(other, t1Cols[0], t2Cols[0]);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a542dd07d85c92f3eb83c12f90fa7953c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static IEnumerable&lt;int&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.SelectRowsRange </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structDeveel_1_1Data_1_1Index_1_1IndexRange.htm">IndexRange</a>[]&#160;</td>
          <td class="paramname"><em>ranges</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00195">195</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                                                                           {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> table.GetIndex(column).SelectRange(ranges);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5bf0a54aa4ed00997b8b50f3cbe230f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SimpleJoin </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>thisTable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm">SqlBinaryExpression</a>&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01168">1168</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                                                                                                           {</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            var objRef = binary.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Left</a> as <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression.htm">SqlReferenceExpression</a>;</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;            <span class="keywordflow">if</span> (objRef == null)</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException();</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;            <span class="comment">// Find the row with the name given in the condition.</span></div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;            <span class="keywordtype">int</span> lhsColumn = thisTable.FindColumn(objRef.ReferenceName);</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;            <span class="keywordflow">if</span> (lhsColumn == -1)</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Unable to find the LHS column specified in the condition: &quot;</span> + objRef.ReferenceName);</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;            <span class="comment">// Create a variable resolver that can resolve columns in the destination</span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;            <span class="comment">// table.</span></div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;            var resolver = other.GetVariableResolver();</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;            <span class="comment">// The join algorithm.  It steps through the RHS expression, selecting the</span></div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            <span class="comment">// cells that match the relation from the LHS table (this table).</span></div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;            var thisRowSet = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;            var tableRowSet = <span class="keyword">new</span> List&lt;int&gt;();</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;            var e = other.GetEnumerator();</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;            <span class="keywordflow">while</span> (e.MoveNext()) {</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;                <span class="keywordtype">int</span> rowIndex = e.Current.RowId.RowNumber;</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                var rowResolver = resolver.ForRow(rowIndex);</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;                <span class="comment">// Select all the rows in this table that match the joining condition.</span></div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                var selectedSet = thisTable.SelectRows(rowResolver, context, binary);</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                var selectList = selectedSet.ToList();</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                var size = selectList.Count;</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                <span class="comment">// Include in the set.</span></div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; i++) {</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                    tableRowSet.Add(rowIndex);</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                }</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                thisRowSet.AddRange(selectList);</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;            }</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;            <span class="comment">// Create the new VirtualTable with the joined tables.</span></div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;            var tabs = <span class="keyword">new</span>[] {thisTable, other};</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;            var rowSets = <span class="keyword">new</span> IList&lt;int&gt;[] {thisRowSet, tableRowSet};</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(tabs, rowSets);</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlReferenceExpression.htm">Deveel.Data.Sql.Expressions.SqlReferenceExpression</a></div><div class="ttdoc">An expression that references an object within a context. </div><div class="ttdef"><b>Definition:</b> <a href="SqlReferenceExpression_8cs_source.htm#l00026">SqlReferenceExpression.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression_htm_ab6cfdbd79ee5230b7a3b7faf911067ce"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlBinaryExpression.htm#ab6cfdbd79ee5230b7a3b7faf911067ce">Deveel.Data.Sql.Expressions.SqlBinaryExpression.Left</a></div><div class="ttdeci">SqlExpression Left</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpression_8cs_source.htm#l00045">SqlBinaryExpression.cs:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6d7602f8eeae048ddc379cb65ce2542f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.SimpleSelect </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1IRequest.htm">IRequest</a>&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>&#160;</td>
          <td class="paramname"><em>columnName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm">SqlExpression</a>&#160;</td>
          <td class="paramname"><em>exp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00499">499</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                                                                                                                               {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="comment">// Find the row with the name given in the condition.</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordtype">int</span> column = table.FindColumn(columnName);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">if</span> (column == -1)</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Unable to find the column {0} in the condition.&quot;</span>, columnName.Name));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="comment">// If we are doing a sub-query search</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">if</span> (op.IsSubQuery()) {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="comment">// We can only handle constant expressions in the RHS expression, and</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                <span class="comment">// we must assume that the RHS is a Expression[] array.</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keywordflow">if</span> (exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a> != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant &amp;&amp;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                    exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a> != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Tuple)</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                IEnumerable&lt;SqlExpression&gt; list;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keywordflow">if</span> (exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">ExpressionType</a> == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant) {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    var tob = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) exp).Value;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    <span class="keywordflow">if</span> (tob.Type is <a class="code" href="classDeveel_1_1Data_1_1Types_1_1ArrayType.htm">ArrayType</a>) {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                        var array = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlArray.htm">SqlArray</a>) tob.Value;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                        list = array;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="stringliteral">&quot;Error with format or RHS expression.&quot;</span>);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    list = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlTupleExpression.htm">SqlTupleExpression</a>) exp).Expressions;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                <span class="comment">// Construct a temporary table with a single column that we are</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <span class="comment">// comparing to.</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                var col = table.TableInfo[column];</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                var ttable = TemporaryTable.SingleColumnTable(table.Context, col.ColumnName, col.ColumnType);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                <span class="keywordflow">foreach</span> (var expression <span class="keywordflow">in</span> list) {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    var rowNum = ttable.NewRow();</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    var evalExp = (<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>)expression.Evaluate(context, null, null);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    ttable.SetValue(rowNum, 0, evalExp.Value);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                ttable.BuildIndexes();</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                <span class="comment">// Perform the any/all sub-query on the constant table.</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                <span class="keywordflow">return</span> table.SelectAnyAllNonCorrelated(<span class="keyword">new</span>[] { columnName }, op, ttable);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                <span class="keywordflow">if</span> (!exp.IsConstant())</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentException(<span class="stringliteral">&quot;The search expression is not constant.&quot;</span>);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                var evalExp = exp.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Evaluate</a>(context, null);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                <span class="keywordflow">if</span> (evalExp.ExpressionType != <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Constant)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException();</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                var value = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">SqlConstantExpression</a>) evalExp).Value;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                IEnumerable&lt;int&gt; rows;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keywordflow">if</span> (op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.Like ||</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                    op == <a class="code" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">SqlExpressionType</a>.NotLike</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                    <span class="comment">/* TODO: ||</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">                op.IsOfType(BinaryOperatorType.Regex)*/</span>) {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    <span class="comment">/*</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">                TODO:</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">                if (op.IsOfType(BinaryOperatorType.Regex)) {</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">                    rows = SelectFromRegex(column, op, value);</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">                } else {</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">                 */</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    rows = table.SelectFromPattern(column, op, value);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    <span class="comment">// Is the column we are searching on indexable?</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                    var colInfo = table.TableInfo[column];</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    <span class="keywordflow">if</span> (!colInfo.IsIndexable)</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;Column {0} os type {1} cannot be searched.&quot;</span>, colInfo.ColumnName,</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                            colInfo.ColumnType));</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                    rows = table.SelectRows(column, op, value);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(table, rows.ToArray()) {SortColumn = column};</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions_htm_a2cdcdc86afbc2d50cb1ec8e389598b4a"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm#a2cdcdc86afbc2d50cb1ec8e389598b4a">Deveel.Data.Sql.Expressions.SqlExpressionType</a></div><div class="ttdeci">SqlExpressionType</div><div class="ttdoc">All the possible type of SqlExpression supported </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpressionType_8cs_source.htm#l00023">SqlExpressionType.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_af183cbb43972165fd569f3910a46a5d3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#af183cbb43972165fd569f3910a46a5d3">Deveel.Data.Sql.Expressions.SqlExpression.Evaluate</a></div><div class="ttdeci">virtual SqlExpression Evaluate(EvaluateContext context)</div><div class="ttdoc">When overridden by a derived class, this method evaluates the expression within the provided context...</div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00167">SqlExpression.cs:167</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1ArrayType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1ArrayType.htm">Deveel.Data.Types.ArrayType</a></div><div class="ttdef"><b>Definition:</b> <a href="ArrayType_8cs_source.htm#l00022">ArrayType.cs:22</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlConstantExpression.htm">Deveel.Data.Sql.Expressions.SqlConstantExpression</a></div><div class="ttdoc">An expression that holds a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="SqlConstantExpression_8cs_source.htm#l00033">SqlConstantExpression.cs:33</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlArray_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlArray.htm">Deveel.Data.Sql.Objects.SqlArray</a></div><div class="ttdoc">An object that provides methods for accessing a finite collection of SQL expressions. </div><div class="ttdef"><b>Definition:</b> <a href="SqlArray_8cs_source.htm#l00028">SqlArray.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression_htm_a3f022885e573e9111024b4392237d255"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlExpression.htm#a3f022885e573e9111024b4392237d255">Deveel.Data.Sql.Expressions.SqlExpression.ExpressionType</a></div><div class="ttdeci">abstract SqlExpressionType ExpressionType</div><div class="ttdoc">Gets the type code of this SQL expression. </div><div class="ttdef"><b>Definition:</b> <a href="SqlExpression_8cs_source.htm#l00051">SqlExpression.cs:51</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlTupleExpression_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlTupleExpression.htm">Deveel.Data.Sql.Expressions.SqlTupleExpression</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlTupleExpression_8cs_source.htm#l00023">SqlTupleExpression.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac0d58f2ce27ec14886466500db81cb48"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Subset </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>columnNames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1ObjectName.htm">ObjectName</a>[]&#160;</td>
          <td class="paramname"><em>aliases</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01360">1360</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                                                                                       {</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            var columnMap = <span class="keyword">new</span> <span class="keywordtype">int</span>[columnNames.Length];</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; columnMap.Length; i++) {</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                columnMap[i] = table.IndexOfColumn(columnNames[i]);</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            }</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> SubsetColumnTable(table, columnMap, aliases);</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a633d4169fbfe03290b22297bb483738f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Dictionary&lt;string, <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Objects_1_1ISqlObject.htm">ISqlObject</a>&gt; Deveel.Data.Sql.Tables.TableQueryExtensions.ToDictionary </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l01402">1402</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                                                                     {</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;            <span class="keywordflow">if</span> (table.TableInfo.ColumnCount != 2)</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="stringliteral">&quot;Table must have two columns.&quot;</span>);</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;            var map = <span class="keyword">new</span> Dictionary&lt;string, ISqlObject&gt;();</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            <span class="keywordflow">foreach</span> (var row <span class="keywordflow">in</span> table) {</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                var key = row.GetValue(0);</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;                var value = row.GetValue(1);</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;                map[key.AsVarChar().Value.ToString()] = value.Value;</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;            }</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;            <span class="keywordflow">return</span> map;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a737083a0cfc9e16efa20bd105c06e5c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a> Deveel.Data.Sql.Tables.TableQueryExtensions.Union </td>
          <td>(</td>
          <td class="paramtype">this <a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>thisTable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Sql_1_1Tables_1_1ITable.htm">ITable</a>&#160;</td>
          <td class="paramname"><em>otherTable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="TableQueryExtensions_8cs_source.htm#l00882">882</a> of file <a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                                                                             {</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="comment">// Optimizations - handle trivial case of row count in one of the tables</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            <span class="comment">//   being 0.</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            <span class="comment">// NOTE: This optimization assumes this table and the unioned table are</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            <span class="comment">//   of the same type.</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <span class="keywordflow">if</span> ((thisTable.RowCount == 0 &amp;&amp; otherTable.RowCount == 0) ||</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                otherTable.RowCount == 0) {</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                <span class="keywordflow">return</span> thisTable;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;            }</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            <span class="keywordflow">if</span> (thisTable.RowCount == 0)</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                <span class="keywordflow">return</span> otherTable;</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            <span class="comment">// First we merge this table with the input table.</span></div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            var raw1 = thisTable.GetRawTableInfo();</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            var raw2 = otherTable.GetRawTableInfo();</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            <span class="comment">// This will throw an exception if the table types do not match up.</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            var <span class="keyword">union </span>= raw1.<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a737083a0cfc9e16efa20bd105c06e5c2">Union</a>(raw2);</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            <span class="comment">// Now &#39;union&#39; contains a list of uniquely merged rows (ie. the union).</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            <span class="comment">// Now make it into a new table and return the information.</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            var tableList = <span class="keyword">union</span>.GetTables().AsEnumerable();</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> VirtualTable(tableList, <span class="keyword">union</span>.GetRows());</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions_htm_a737083a0cfc9e16efa20bd105c06e5c2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Tables_1_1TableQueryExtensions.htm#a737083a0cfc9e16efa20bd105c06e5c2">Deveel.Data.Sql.Tables.TableQueryExtensions.Union</a></div><div class="ttdeci">static ITable Union(this ITable thisTable, ITable otherTable)</div><div class="ttdef"><b>Definition:</b> <a href="TableQueryExtensions_8cs_source.htm#l00882">TableQueryExtensions.cs:882</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Sql.Tables/<a class="el" href="TableQueryExtensions_8cs_source.htm">TableQueryExtensions.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
