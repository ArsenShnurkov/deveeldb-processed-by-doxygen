<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Linq.ExpressionVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Linq.htm">Linq</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm">ExpressionVisitor</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Linq.ExpressionVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for Deveel.Data.Linq.ExpressionVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.png" usemap="#Deveel.Data.Linq.ExpressionVisitor_map" alt=""/>
  <map id="Deveel.Data.Linq.ExpressionVisitor_map" name="Deveel.Data.Linq.ExpressionVisitor_map">
<area href="classDeveel_1_1Data_1_1Linq_1_1Evaluator_1_1Nominator.htm" title="Performs bottom-up analysis to determine which nodes can possibly be part of an evaluated sub-tree..." alt="Deveel.Data.Linq.Evaluator.Nominator" shape="rect" coords="0,56,269,80"/>
<area href="classDeveel_1_1Data_1_1Linq_1_1Evaluator_1_1SubtreeEvaluator.htm" title="Evaluates & replaces sub-trees when first candidate is reached (top-down) " alt="Deveel.Data.Linq.Evaluator.SubtreeEvaluator" shape="rect" coords="279,56,548,80"/>
<area href="classDeveel_1_1Data_1_1Linq_1_1ExpressionTreeModifier.htm" alt="Deveel.Data.Linq.ExpressionTreeModifier" shape="rect" coords="558,56,827,80"/>
<area href="classDeveel_1_1Data_1_1Linq_1_1InnermostWhereFinder.htm" alt="Deveel.Data.Linq.InnermostWhereFinder" shape="rect" coords="837,56,1106,80"/>
<area href="classDeveel_1_1Data_1_1Linq_1_1QueryBuilder.htm" alt="Deveel.Data.Linq.QueryBuilder" shape="rect" coords="1116,56,1385,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac7352b8c3a5f7bfc09dc2996386b0320"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a> (Expression exp)</td></tr>
<tr class="separator:ac7352b8c3a5f7bfc09dc2996386b0320"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a27712c8c0642f669159caabfabf734c9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a27712c8c0642f669159caabfabf734c9">ExpressionVisitor</a> ()</td></tr>
<tr class="separator:a27712c8c0642f669159caabfabf734c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85a37122d879074d84a86f3a4df3435e"><td class="memItemLeft" align="right" valign="top">virtual MemberBinding&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a85a37122d879074d84a86f3a4df3435e">VisitBinding</a> (MemberBinding binding)</td></tr>
<tr class="separator:a85a37122d879074d84a86f3a4df3435e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13a58b52408f4602ecfa2f121e1f95ed"><td class="memItemLeft" align="right" valign="top">virtual ElementInit&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a13a58b52408f4602ecfa2f121e1f95ed">VisitElementInitializer</a> (ElementInit initializer)</td></tr>
<tr class="separator:a13a58b52408f4602ecfa2f121e1f95ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a164a5e84fe279a9f97ba169e5140c7c4"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a164a5e84fe279a9f97ba169e5140c7c4">VisitUnary</a> (UnaryExpression u)</td></tr>
<tr class="separator:a164a5e84fe279a9f97ba169e5140c7c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad95bb8cd04d776af5d988996aabbb7fb"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad95bb8cd04d776af5d988996aabbb7fb">VisitBinary</a> (BinaryExpression b)</td></tr>
<tr class="separator:ad95bb8cd04d776af5d988996aabbb7fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29fdb9a72a0c1a47316d80ba1175318e"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a29fdb9a72a0c1a47316d80ba1175318e">VisitTypeIs</a> (TypeBinaryExpression b)</td></tr>
<tr class="separator:a29fdb9a72a0c1a47316d80ba1175318e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62e60e0db9a79c7aaebd3967e771266c"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a62e60e0db9a79c7aaebd3967e771266c">VisitConstant</a> (ConstantExpression c)</td></tr>
<tr class="separator:a62e60e0db9a79c7aaebd3967e771266c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82a8903504a6c20b035e9b6677de90b5"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a82a8903504a6c20b035e9b6677de90b5">VisitConditional</a> (ConditionalExpression c)</td></tr>
<tr class="separator:a82a8903504a6c20b035e9b6677de90b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf188cd8b5c87e819271e46d7a077af"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#abcf188cd8b5c87e819271e46d7a077af">VisitParameter</a> (ParameterExpression p)</td></tr>
<tr class="separator:abcf188cd8b5c87e819271e46d7a077af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96cc64b500501ecdb77fd3f7b76856a6"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a96cc64b500501ecdb77fd3f7b76856a6">VisitMemberAccess</a> (MemberExpression m)</td></tr>
<tr class="separator:a96cc64b500501ecdb77fd3f7b76856a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e910439d5b8d8c194c0db731709d93"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a70e910439d5b8d8c194c0db731709d93">VisitMethodCall</a> (MethodCallExpression m)</td></tr>
<tr class="separator:a70e910439d5b8d8c194c0db731709d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cabfceae03c17e2e0a6da794029f1a5"><td class="memItemLeft" align="right" valign="top">virtual ReadOnlyCollection&lt; Expression &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a> (ReadOnlyCollection&lt; Expression &gt; original)</td></tr>
<tr class="separator:a9cabfceae03c17e2e0a6da794029f1a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3b57226b529eefa8a5aca972b6ca9dd"><td class="memItemLeft" align="right" valign="top">virtual MemberAssignment&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad3b57226b529eefa8a5aca972b6ca9dd">VisitMemberAssignment</a> (MemberAssignment assignment)</td></tr>
<tr class="separator:ad3b57226b529eefa8a5aca972b6ca9dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11570668094b865b6346b345c1785e16"><td class="memItemLeft" align="right" valign="top">virtual MemberMemberBinding&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a11570668094b865b6346b345c1785e16">VisitMemberMemberBinding</a> (MemberMemberBinding binding)</td></tr>
<tr class="separator:a11570668094b865b6346b345c1785e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add017ddc8f8a00a66f29bf3de49b6b32"><td class="memItemLeft" align="right" valign="top">virtual MemberListBinding&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#add017ddc8f8a00a66f29bf3de49b6b32">VisitMemberListBinding</a> (MemberListBinding binding)</td></tr>
<tr class="separator:add017ddc8f8a00a66f29bf3de49b6b32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5b60a7810aab6fd882b16c90da900a7"><td class="memItemLeft" align="right" valign="top">virtual IEnumerable&lt; MemberBinding &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ab5b60a7810aab6fd882b16c90da900a7">VisitBindingList</a> (ReadOnlyCollection&lt; MemberBinding &gt; original)</td></tr>
<tr class="separator:ab5b60a7810aab6fd882b16c90da900a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f65cc126158f332f4a26dfd119c4aa5"><td class="memItemLeft" align="right" valign="top">virtual IEnumerable&lt; ElementInit &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6f65cc126158f332f4a26dfd119c4aa5">VisitElementInitializerList</a> (ReadOnlyCollection&lt; ElementInit &gt; original)</td></tr>
<tr class="separator:a6f65cc126158f332f4a26dfd119c4aa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7a087967bb14e3e785a19c4d8725297"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aa7a087967bb14e3e785a19c4d8725297">VisitLambda</a> (LambdaExpression lambda)</td></tr>
<tr class="separator:aa7a087967bb14e3e785a19c4d8725297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e2a833fa081aa26f69fec72bf4e98ea"><td class="memItemLeft" align="right" valign="top">virtual NewExpression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">VisitNew</a> (NewExpression nex)</td></tr>
<tr class="separator:a6e2a833fa081aa26f69fec72bf4e98ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbf6fc2251a30454b29687817521699e"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#adbf6fc2251a30454b29687817521699e">VisitMemberInit</a> (MemberInitExpression init)</td></tr>
<tr class="separator:adbf6fc2251a30454b29687817521699e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037a737913df01c265981a62dc7d8e91"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a037a737913df01c265981a62dc7d8e91">VisitListInit</a> (ListInitExpression init)</td></tr>
<tr class="separator:a037a737913df01c265981a62dc7d8e91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb053c75c859100606baf8bb4e76e8b0"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aeb053c75c859100606baf8bb4e76e8b0">VisitNewArray</a> (NewArrayExpression na)</td></tr>
<tr class="separator:aeb053c75c859100606baf8bb4e76e8b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1dfa2893b8696c1bb2feb6ac4e65673"><td class="memItemLeft" align="right" valign="top">virtual Expression&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#af1dfa2893b8696c1bb2feb6ac4e65673">VisitInvocation</a> (InvocationExpression iv)</td></tr>
<tr class="separator:af1dfa2893b8696c1bb2feb6ac4e65673"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00024">24</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a27712c8c0642f669159caabfabf734c9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Linq.ExpressionVisitor.ExpressionVisitor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00025">25</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                      {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ac7352b8c3a5f7bfc09dc2996386b0320"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.Visit </td>
          <td>(</td>
          <td class="paramtype">Expression&#160;</td>
          <td class="paramname"><em>exp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1Evaluator_1_1Nominator.htm#ab1b32056ca43b88668a1a79474b451f2">Deveel.Data.Linq.Evaluator.Nominator</a>, and <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1Evaluator_1_1SubtreeEvaluator.htm#a16aea51e998190fc379ffc4e0acc2cd2">Deveel.Data.Linq.Evaluator.SubtreeEvaluator</a>.</p>

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00028">28</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                        {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keywordflow">if</span> (exp == null)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                <span class="keywordflow">return</span> exp;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="keywordflow">switch</span> (exp.NodeType) {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Negate:</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                <span class="keywordflow">case</span> ExpressionType.NegateChecked:</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Not:</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Convert:</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                <span class="keywordflow">case</span> ExpressionType.ConvertChecked:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keywordflow">case</span> ExpressionType.ArrayLength:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Quote:</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="keywordflow">case</span> ExpressionType.TypeAs:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                    <span class="keywordflow">return</span> this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a164a5e84fe279a9f97ba169e5140c7c4">VisitUnary</a>((UnaryExpression)exp);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Add:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="keywordflow">case</span> ExpressionType.AddChecked:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Subtract:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                <span class="keywordflow">case</span> ExpressionType.SubtractChecked:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Multiply:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">case</span> ExpressionType.MultiplyChecked:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Divide:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Modulo:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                <span class="keywordflow">case</span> ExpressionType.And:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keywordflow">case</span> ExpressionType.AndAlso:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Or:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keywordflow">case</span> ExpressionType.OrElse:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">case</span> ExpressionType.LessThan:</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keywordflow">case</span> ExpressionType.LessThanOrEqual:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keywordflow">case</span> ExpressionType.GreaterThan:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="keywordflow">case</span> ExpressionType.GreaterThanOrEqual:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Equal:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="keywordflow">case</span> ExpressionType.NotEqual:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Coalesce:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="keywordflow">case</span> ExpressionType.ArrayIndex:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordflow">case</span> ExpressionType.RightShift:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="keywordflow">case</span> ExpressionType.LeftShift:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">case</span> ExpressionType.ExclusiveOr:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad95bb8cd04d776af5d988996aabbb7fb">VisitBinary</a>((BinaryExpression)exp);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">case</span> ExpressionType.TypeIs:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a29fdb9a72a0c1a47316d80ba1175318e">VisitTypeIs</a>((TypeBinaryExpression)exp);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Conditional:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a82a8903504a6c20b035e9b6677de90b5">VisitConditional</a>((ConditionalExpression)exp);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Constant:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a62e60e0db9a79c7aaebd3967e771266c">VisitConstant</a>((ConstantExpression)exp);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Parameter:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#abcf188cd8b5c87e819271e46d7a077af">VisitParameter</a>((ParameterExpression)exp);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keywordflow">case</span> ExpressionType.MemberAccess:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a96cc64b500501ecdb77fd3f7b76856a6">VisitMemberAccess</a>((MemberExpression)exp);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Call:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a70e910439d5b8d8c194c0db731709d93">VisitMethodCall</a>((MethodCallExpression)exp);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Lambda:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aa7a087967bb14e3e785a19c4d8725297">VisitLambda</a>((LambdaExpression)exp);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">case</span> ExpressionType.New:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">VisitNew</a>((NewExpression)exp);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">case</span> ExpressionType.NewArrayInit:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">case</span> ExpressionType.NewArrayBounds:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aeb053c75c859100606baf8bb4e76e8b0">VisitNewArray</a>((NewArrayExpression)exp);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">case</span> ExpressionType.Invoke:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#af1dfa2893b8696c1bb2feb6ac4e65673">VisitInvocation</a>((InvocationExpression)exp);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">case</span> ExpressionType.MemberInit:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#adbf6fc2251a30454b29687817521699e">VisitMemberInit</a>((MemberInitExpression)exp);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">case</span> ExpressionType.ListInit:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a037a737913df01c265981a62dc7d8e91">VisitListInit</a>((ListInitExpression)exp);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="keywordtype">string</span>.Format(<span class="stringliteral">&quot;Unhandled expression type: &#39;{0}&#39;&quot;</span>, exp.NodeType));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a29fdb9a72a0c1a47316d80ba1175318e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a29fdb9a72a0c1a47316d80ba1175318e">Deveel.Data.Linq.ExpressionVisitor.VisitTypeIs</a></div><div class="ttdeci">virtual Expression VisitTypeIs(TypeBinaryExpression b)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00137">ExpressionVisitor.cs:137</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_abcf188cd8b5c87e819271e46d7a077af"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#abcf188cd8b5c87e819271e46d7a077af">Deveel.Data.Linq.ExpressionVisitor.VisitParameter</a></div><div class="ttdeci">virtual Expression VisitParameter(ParameterExpression p)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00159">ExpressionVisitor.cs:159</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ad95bb8cd04d776af5d988996aabbb7fb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad95bb8cd04d776af5d988996aabbb7fb">Deveel.Data.Linq.ExpressionVisitor.VisitBinary</a></div><div class="ttdeci">virtual Expression VisitBinary(BinaryExpression b)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00124">ExpressionVisitor.cs:124</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_aeb053c75c859100606baf8bb4e76e8b0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aeb053c75c859100606baf8bb4e76e8b0">Deveel.Data.Linq.ExpressionVisitor.VisitNewArray</a></div><div class="ttdeci">virtual Expression VisitNewArray(NewArrayExpression na)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00299">ExpressionVisitor.cs:299</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a037a737913df01c265981a62dc7d8e91"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a037a737913df01c265981a62dc7d8e91">Deveel.Data.Linq.ExpressionVisitor.VisitListInit</a></div><div class="ttdeci">virtual Expression VisitListInit(ListInitExpression init)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00290">ExpressionVisitor.cs:290</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a70e910439d5b8d8c194c0db731709d93"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a70e910439d5b8d8c194c0db731709d93">Deveel.Data.Linq.ExpressionVisitor.VisitMethodCall</a></div><div class="ttdeci">virtual Expression VisitMethodCall(MethodCallExpression m)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00171">ExpressionVisitor.cs:171</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_adbf6fc2251a30454b29687817521699e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#adbf6fc2251a30454b29687817521699e">Deveel.Data.Linq.ExpressionVisitor.VisitMemberInit</a></div><div class="ttdeci">virtual Expression VisitMemberInit(MemberInitExpression init)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00281">ExpressionVisitor.cs:281</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a82a8903504a6c20b035e9b6677de90b5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a82a8903504a6c20b035e9b6677de90b5">Deveel.Data.Linq.ExpressionVisitor.VisitConditional</a></div><div class="ttdeci">virtual Expression VisitConditional(ConditionalExpression c)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00149">ExpressionVisitor.cs:149</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a6e2a833fa081aa26f69fec72bf4e98ea"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">Deveel.Data.Linq.ExpressionVisitor.VisitNew</a></div><div class="ttdeci">virtual NewExpression VisitNew(NewExpression nex)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00270">ExpressionVisitor.cs:270</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_af1dfa2893b8696c1bb2feb6ac4e65673"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#af1dfa2893b8696c1bb2feb6ac4e65673">Deveel.Data.Linq.ExpressionVisitor.VisitInvocation</a></div><div class="ttdeci">virtual Expression VisitInvocation(InvocationExpression iv)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00311">ExpressionVisitor.cs:311</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a96cc64b500501ecdb77fd3f7b76856a6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a96cc64b500501ecdb77fd3f7b76856a6">Deveel.Data.Linq.ExpressionVisitor.VisitMemberAccess</a></div><div class="ttdeci">virtual Expression VisitMemberAccess(MemberExpression m)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00163">ExpressionVisitor.cs:163</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a164a5e84fe279a9f97ba169e5140c7c4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a164a5e84fe279a9f97ba169e5140c7c4">Deveel.Data.Linq.ExpressionVisitor.VisitUnary</a></div><div class="ttdeci">virtual Expression VisitUnary(UnaryExpression u)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00116">ExpressionVisitor.cs:116</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_aa7a087967bb14e3e785a19c4d8725297"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#aa7a087967bb14e3e785a19c4d8725297">Deveel.Data.Linq.ExpressionVisitor.VisitLambda</a></div><div class="ttdeci">virtual Expression VisitLambda(LambdaExpression lambda)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00262">ExpressionVisitor.cs:262</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a62e60e0db9a79c7aaebd3967e771266c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a62e60e0db9a79c7aaebd3967e771266c">Deveel.Data.Linq.ExpressionVisitor.VisitConstant</a></div><div class="ttdeci">virtual Expression VisitConstant(ConstantExpression c)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00145">ExpressionVisitor.cs:145</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad95bb8cd04d776af5d988996aabbb7fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitBinary </td>
          <td>(</td>
          <td class="paramtype">BinaryExpression&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1QueryBuilder.htm#afd9af74861728c1e09096d52a6d77148">Deveel.Data.Linq.QueryBuilder</a>.</p>

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00124">124</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                                     {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            Expression left = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(b.Left);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            Expression right = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(b.Right);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            Expression conversion = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(b.Conversion);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">if</span> (left != b.Left || right != b.Right || conversion != b.Conversion) {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">if</span> (b.NodeType == ExpressionType.Coalesce &amp;&amp; b.Conversion != null)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordflow">return</span> Expression.Coalesce(left, right, conversion as LambdaExpression);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">return</span> Expression.MakeBinary(b.NodeType, left, right, b.IsLiftedToNull, b.Method);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a85a37122d879074d84a86f3a4df3435e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual MemberBinding Deveel.Data.Linq.ExpressionVisitor.VisitBinding </td>
          <td>(</td>
          <td class="paramtype">MemberBinding&#160;</td>
          <td class="paramname"><em>binding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00095">95</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                                            {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">switch</span> (binding.BindingType) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">case</span> MemberBindingType.Assignment:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad3b57226b529eefa8a5aca972b6ca9dd">VisitMemberAssignment</a>((MemberAssignment)binding);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">case</span> MemberBindingType.MemberBinding:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a11570668094b865b6346b345c1785e16">VisitMemberMemberBinding</a>((MemberMemberBinding)binding);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">case</span> MemberBindingType.ListBinding:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#add017ddc8f8a00a66f29bf3de49b6b32">VisitMemberListBinding</a>((MemberListBinding)binding);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> Exception(<span class="keywordtype">string</span>.Format(<span class="stringliteral">&quot;Unhandled binding type &#39;{0}&#39;&quot;</span>, binding.BindingType));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ad3b57226b529eefa8a5aca972b6ca9dd"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ad3b57226b529eefa8a5aca972b6ca9dd">Deveel.Data.Linq.ExpressionVisitor.VisitMemberAssignment</a></div><div class="ttdeci">virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00200">ExpressionVisitor.cs:200</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a11570668094b865b6346b345c1785e16"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a11570668094b865b6346b345c1785e16">Deveel.Data.Linq.ExpressionVisitor.VisitMemberMemberBinding</a></div><div class="ttdeci">virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00208">ExpressionVisitor.cs:208</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_add017ddc8f8a00a66f29bf3de49b6b32"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#add017ddc8f8a00a66f29bf3de49b6b32">Deveel.Data.Linq.ExpressionVisitor.VisitMemberListBinding</a></div><div class="ttdeci">virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00216">ExpressionVisitor.cs:216</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab5b60a7810aab6fd882b16c90da900a7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual IEnumerable&lt;MemberBinding&gt; Deveel.Data.Linq.ExpressionVisitor.VisitBindingList </td>
          <td>(</td>
          <td class="paramtype">ReadOnlyCollection&lt; MemberBinding &gt;&#160;</td>
          <td class="paramname"><em>original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00224">224</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                                                                                  {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            List&lt;MemberBinding&gt; list = null;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = original.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                MemberBinding b = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a85a37122d879074d84a86f3a4df3435e">VisitBinding</a>(original[i]);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">if</span> (list != null) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    list.Add(b);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (b != original[i]) {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    list = <span class="keyword">new</span> List&lt;MemberBinding&gt;(n);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; j++) {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        list.Add(original[j]);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    list.Add(b);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">if</span> (list != null)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">return</span> original;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a85a37122d879074d84a86f3a4df3435e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a85a37122d879074d84a86f3a4df3435e">Deveel.Data.Linq.ExpressionVisitor.VisitBinding</a></div><div class="ttdeci">virtual MemberBinding VisitBinding(MemberBinding binding)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00095">ExpressionVisitor.cs:95</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a82a8903504a6c20b035e9b6677de90b5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitConditional </td>
          <td>(</td>
          <td class="paramtype">ConditionalExpression&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00149">149</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                                               {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            Expression test = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(c.Test);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            Expression ifTrue = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(c.IfTrue);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            Expression ifFalse = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(c.IfFalse);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">if</span> (test != c.Test || ifTrue != c.IfTrue || ifFalse != c.IfFalse) {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">return</span> Expression.Condition(test, ifTrue, ifFalse);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a62e60e0db9a79c7aaebd3967e771266c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitConstant </td>
          <td>(</td>
          <td class="paramtype">ConstantExpression&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionTreeModifier.htm#a0d68f3c6773a52476ca398aa0360ecea">Deveel.Data.Linq.ExpressionTreeModifier</a>.</p>

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00145">145</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                                         {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a13a58b52408f4602ecfa2f121e1f95ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ElementInit Deveel.Data.Linq.ExpressionVisitor.VisitElementInitializer </td>
          <td>(</td>
          <td class="paramtype">ElementInit&#160;</td>
          <td class="paramname"><em>initializer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00108">108</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                                                       {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            ReadOnlyCollection&lt;Expression&gt; arguments = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a>(initializer.Arguments);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> (arguments != initializer.Arguments) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">return</span> Expression.ElementInit(initializer.AddMethod, arguments);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">return</span> initializer;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a9cabfceae03c17e2e0a6da794029f1a5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList</a></div><div class="ttdeci">virtual ReadOnlyCollection&lt; Expression &gt; VisitExpressionList(ReadOnlyCollection&lt; Expression &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00180">ExpressionVisitor.cs:180</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6f65cc126158f332f4a26dfd119c4aa5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual IEnumerable&lt;ElementInit&gt; Deveel.Data.Linq.ExpressionVisitor.VisitElementInitializerList </td>
          <td>(</td>
          <td class="paramtype">ReadOnlyCollection&lt; ElementInit &gt;&#160;</td>
          <td class="paramname"><em>original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00243">243</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                                                                                         {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            List&lt;ElementInit&gt; list = null;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = original.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                ElementInit init = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a13a58b52408f4602ecfa2f121e1f95ed">VisitElementInitializer</a>(original[i]);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">if</span> (list != null) {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    list.Add(init);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (init != original[i]) {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    list = <span class="keyword">new</span> List&lt;ElementInit&gt;(n);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; j++) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        list.Add(original[j]);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    list.Add(init);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">if</span> (list != null)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">return</span> original;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a13a58b52408f4602ecfa2f121e1f95ed"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a13a58b52408f4602ecfa2f121e1f95ed">Deveel.Data.Linq.ExpressionVisitor.VisitElementInitializer</a></div><div class="ttdeci">virtual ElementInit VisitElementInitializer(ElementInit initializer)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00108">ExpressionVisitor.cs:108</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9cabfceae03c17e2e0a6da794029f1a5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ReadOnlyCollection&lt;Expression&gt; Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList </td>
          <td>(</td>
          <td class="paramtype">ReadOnlyCollection&lt; Expression &gt;&#160;</td>
          <td class="paramname"><em>original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00180">180</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                                                                                      {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            List&lt;Expression&gt; list = null;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = original.Count; i &lt; n; i++) {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                Expression p = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(original[i]);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keywordflow">if</span> (list != null) {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    list.Add(p);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p != original[i]) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    list = <span class="keyword">new</span> List&lt;Expression&gt;(n);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; j++) {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        list.Add(original[j]);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    list.Add(p);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">if</span> (list != null) {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordflow">return</span> list.AsReadOnly();</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">return</span> original;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af1dfa2893b8696c1bb2feb6ac4e65673"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitInvocation </td>
          <td>(</td>
          <td class="paramtype">InvocationExpression&#160;</td>
          <td class="paramname"><em>iv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00311">311</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                                              {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            IEnumerable&lt;Expression&gt; args = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a>(iv.Arguments);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            Expression expr = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(iv.Expression);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">if</span> (args != iv.Arguments || expr != iv.Expression) {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                <span class="keywordflow">return</span> Expression.Invoke(expr, args);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> iv;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a9cabfceae03c17e2e0a6da794029f1a5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList</a></div><div class="ttdeci">virtual ReadOnlyCollection&lt; Expression &gt; VisitExpressionList(ReadOnlyCollection&lt; Expression &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00180">ExpressionVisitor.cs:180</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa7a087967bb14e3e785a19c4d8725297"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitLambda </td>
          <td>(</td>
          <td class="paramtype">LambdaExpression&#160;</td>
          <td class="paramname"><em>lambda</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00262">262</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                                          {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            Expression body = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(lambda.Body);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">if</span> (body != lambda.Body) {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <span class="keywordflow">return</span> Expression.Lambda(lambda.Type, body, lambda.Parameters);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">return</span> lambda;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a037a737913df01c265981a62dc7d8e91"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitListInit </td>
          <td>(</td>
          <td class="paramtype">ListInitExpression&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00290">290</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                                            {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            NewExpression n = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">VisitNew</a>(init.NewExpression);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            IEnumerable&lt;ElementInit&gt; initializers = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6f65cc126158f332f4a26dfd119c4aa5">VisitElementInitializerList</a>(init.Initializers);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">if</span> (n != init.NewExpression || initializers != init.Initializers) {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keywordflow">return</span> Expression.ListInit(n, initializers);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">return</span> init;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a6f65cc126158f332f4a26dfd119c4aa5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6f65cc126158f332f4a26dfd119c4aa5">Deveel.Data.Linq.ExpressionVisitor.VisitElementInitializerList</a></div><div class="ttdeci">virtual IEnumerable&lt; ElementInit &gt; VisitElementInitializerList(ReadOnlyCollection&lt; ElementInit &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00243">ExpressionVisitor.cs:243</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a6e2a833fa081aa26f69fec72bf4e98ea"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">Deveel.Data.Linq.ExpressionVisitor.VisitNew</a></div><div class="ttdeci">virtual NewExpression VisitNew(NewExpression nex)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00270">ExpressionVisitor.cs:270</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a96cc64b500501ecdb77fd3f7b76856a6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitMemberAccess </td>
          <td>(</td>
          <td class="paramtype">MemberExpression&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00163">163</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                                                           {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            Expression exp = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(m.Expression);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> (exp != m.Expression) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keywordflow">return</span> Expression.MakeMemberAccess(exp, m.Member);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad3b57226b529eefa8a5aca972b6ca9dd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual MemberAssignment Deveel.Data.Linq.ExpressionVisitor.VisitMemberAssignment </td>
          <td>(</td>
          <td class="paramtype">MemberAssignment&#160;</td>
          <td class="paramname"><em>assignment</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1QueryBuilder.htm#a6d06668fd848fce88138bb4ee416d728">Deveel.Data.Linq.QueryBuilder</a>.</p>

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00200">200</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                                                                              {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            Expression e = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(assignment.Expression);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">if</span> (e != assignment.Expression) {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">return</span> Expression.Bind(assignment.Member, e);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">return</span> assignment;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adbf6fc2251a30454b29687817521699e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitMemberInit </td>
          <td>(</td>
          <td class="paramtype">MemberInitExpression&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00281">281</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                                                                {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            NewExpression n = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">VisitNew</a>(init.NewExpression);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            IEnumerable&lt;MemberBinding&gt; bindings = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ab5b60a7810aab6fd882b16c90da900a7">VisitBindingList</a>(init.Bindings);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">if</span> (n != init.NewExpression || bindings != init.Bindings) {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">return</span> Expression.MemberInit(n, bindings);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">return</span> init;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ab5b60a7810aab6fd882b16c90da900a7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ab5b60a7810aab6fd882b16c90da900a7">Deveel.Data.Linq.ExpressionVisitor.VisitBindingList</a></div><div class="ttdeci">virtual IEnumerable&lt; MemberBinding &gt; VisitBindingList(ReadOnlyCollection&lt; MemberBinding &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00224">ExpressionVisitor.cs:224</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a6e2a833fa081aa26f69fec72bf4e98ea"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6e2a833fa081aa26f69fec72bf4e98ea">Deveel.Data.Linq.ExpressionVisitor.VisitNew</a></div><div class="ttdeci">virtual NewExpression VisitNew(NewExpression nex)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00270">ExpressionVisitor.cs:270</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="add017ddc8f8a00a66f29bf3de49b6b32"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual MemberListBinding Deveel.Data.Linq.ExpressionVisitor.VisitMemberListBinding </td>
          <td>(</td>
          <td class="paramtype">MemberListBinding&#160;</td>
          <td class="paramname"><em>binding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00216">216</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                                                              {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            IEnumerable&lt;ElementInit&gt; initializers = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6f65cc126158f332f4a26dfd119c4aa5">VisitElementInitializerList</a>(binding.Initializers);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">if</span> (initializers != binding.Initializers) {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">return</span> Expression.ListBind(binding.Member, initializers);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">return</span> binding;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a6f65cc126158f332f4a26dfd119c4aa5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a6f65cc126158f332f4a26dfd119c4aa5">Deveel.Data.Linq.ExpressionVisitor.VisitElementInitializerList</a></div><div class="ttdeci">virtual IEnumerable&lt; ElementInit &gt; VisitElementInitializerList(ReadOnlyCollection&lt; ElementInit &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00243">ExpressionVisitor.cs:243</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a11570668094b865b6346b345c1785e16"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual MemberMemberBinding Deveel.Data.Linq.ExpressionVisitor.VisitMemberMemberBinding </td>
          <td>(</td>
          <td class="paramtype">MemberMemberBinding&#160;</td>
          <td class="paramname"><em>binding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00208">208</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                                                                                    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            IEnumerable&lt;MemberBinding&gt; bindings = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ab5b60a7810aab6fd882b16c90da900a7">VisitBindingList</a>(binding.Bindings);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">if</span> (bindings != binding.Bindings) {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordflow">return</span> Expression.MemberBind(binding.Member, bindings);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">return</span> binding;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ab5b60a7810aab6fd882b16c90da900a7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ab5b60a7810aab6fd882b16c90da900a7">Deveel.Data.Linq.ExpressionVisitor.VisitBindingList</a></div><div class="ttdeci">virtual IEnumerable&lt; MemberBinding &gt; VisitBindingList(ReadOnlyCollection&lt; MemberBinding &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00224">ExpressionVisitor.cs:224</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a70e910439d5b8d8c194c0db731709d93"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitMethodCall </td>
          <td>(</td>
          <td class="paramtype">MethodCallExpression&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Linq_1_1InnermostWhereFinder.htm#a3f0ef274e7743595caaea469dc72d733">Deveel.Data.Linq.InnermostWhereFinder</a>.</p>

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00171">171</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                                             {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            Expression obj = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(m.Object);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            IEnumerable&lt;Expression&gt; args = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a>(m.Arguments);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">if</span> (obj != m.Object || args != m.Arguments) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">return</span> Expression.Call(obj, m.Method, args);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> m;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a9cabfceae03c17e2e0a6da794029f1a5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList</a></div><div class="ttdeci">virtual ReadOnlyCollection&lt; Expression &gt; VisitExpressionList(ReadOnlyCollection&lt; Expression &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00180">ExpressionVisitor.cs:180</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6e2a833fa081aa26f69fec72bf4e98ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual NewExpression Deveel.Data.Linq.ExpressionVisitor.VisitNew </td>
          <td>(</td>
          <td class="paramtype">NewExpression&#160;</td>
          <td class="paramname"><em>nex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00270">270</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                                    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            IEnumerable&lt;Expression&gt; args = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a>(nex.Arguments);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keywordflow">if</span> (args != nex.Arguments) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="keywordflow">if</span> (nex.Members != null)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    <span class="keywordflow">return</span> Expression.New(nex.Constructor, args, nex.Members);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keywordflow">return</span> Expression.New(nex.Constructor, args);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">return</span> nex;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a9cabfceae03c17e2e0a6da794029f1a5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList</a></div><div class="ttdeci">virtual ReadOnlyCollection&lt; Expression &gt; VisitExpressionList(ReadOnlyCollection&lt; Expression &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00180">ExpressionVisitor.cs:180</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aeb053c75c859100606baf8bb4e76e8b0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitNewArray </td>
          <td>(</td>
          <td class="paramtype">NewArrayExpression&#160;</td>
          <td class="paramname"><em>na</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00299">299</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                                          {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            IEnumerable&lt;Expression&gt; exprs = this.<a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">VisitExpressionList</a>(na.Expressions);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (exprs != na.Expressions) {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">if</span> (na.NodeType == ExpressionType.NewArrayInit) {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    <span class="keywordflow">return</span> Expression.NewArrayInit(na.Type.GetElementType(), exprs);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="keywordflow">return</span> Expression.NewArrayBounds(na.Type.GetElementType(), exprs);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">return</span> na;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_a9cabfceae03c17e2e0a6da794029f1a5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#a9cabfceae03c17e2e0a6da794029f1a5">Deveel.Data.Linq.ExpressionVisitor.VisitExpressionList</a></div><div class="ttdeci">virtual ReadOnlyCollection&lt; Expression &gt; VisitExpressionList(ReadOnlyCollection&lt; Expression &gt; original)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00180">ExpressionVisitor.cs:180</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abcf188cd8b5c87e819271e46d7a077af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitParameter </td>
          <td>(</td>
          <td class="paramtype">ParameterExpression&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00159">159</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                                                           {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> p;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a29fdb9a72a0c1a47316d80ba1175318e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitTypeIs </td>
          <td>(</td>
          <td class="paramtype">TypeBinaryExpression&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00137">137</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                                         {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            Expression expr = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(b.Expression);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (expr != b.Expression) {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">return</span> Expression.TypeIs(expr, b.TypeOperand);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a164a5e84fe279a9f97ba169e5140c7c4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Expression Deveel.Data.Linq.ExpressionVisitor.VisitUnary </td>
          <td>(</td>
          <td class="paramtype">UnaryExpression&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="ExpressionVisitor_8cs_source.htm#l00116">116</a> of file <a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                                   {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            Expression operand = <a class="code" href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Visit</a>(u.Operand);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">if</span> (operand != u.Operand) {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">return</span> Expression.MakeUnary(u.NodeType, operand, u.Type, u.Method);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">return</span> u;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor_htm_ac7352b8c3a5f7bfc09dc2996386b0320"><div class="ttname"><a href="classDeveel_1_1Data_1_1Linq_1_1ExpressionVisitor.htm#ac7352b8c3a5f7bfc09dc2996386b0320">Deveel.Data.Linq.ExpressionVisitor.Visit</a></div><div class="ttdeci">virtual Expression Visit(Expression exp)</div><div class="ttdef"><b>Definition:</b> <a href="ExpressionVisitor_8cs_source.htm#l00028">ExpressionVisitor.cs:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-linq/Deveel.Data.Linq.old/<a class="el" href="ExpressionVisitor_8cs_source.htm">ExpressionVisitor.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
