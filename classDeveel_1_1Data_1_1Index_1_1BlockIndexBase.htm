<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Index.BlockIndexBase&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Index.htm">Index</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pac-methods">Package Functions</a> &#124;
<a href="#properties">Properties</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Index.BlockIndexBase&lt; T &gt; Class Template Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>An implementation of an index of values that are stored across an array of blocks.  
 <a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#details">More...</a></p>
<div class="dynheader">
Inheritance diagram for Deveel.Data.Index.BlockIndexBase&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.png" usemap="#Deveel.Data.Index.BlockIndexBase&lt; T &gt;_map" alt=""/>
  <map id="Deveel.Data.Index.BlockIndexBase&lt; T &gt;_map" name="Deveel.Data.Index.BlockIndexBase&lt; T &gt;_map">
<area href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm" alt="Deveel.Data.Index.IIndex&lt; T &gt;" shape="rect" coords="0,0,240,24"/>
<area href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm" title="An implementation of BlockIndexBase<T> that stores all values in blocks that are entirely stored in m..." alt="Deveel.Data.Index.BlockIndex&lt; T &gt;" shape="rect" coords="0,112,240,136"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_1_1Enumerator.htm">Enumerator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acb0e6a442e1d80330e698da8a6fb1bc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#acb0e6a442e1d80330e698da8a6fb1bc2">Insert</a> (int index, T value)</td></tr>
<tr class="separator:acb0e6a442e1d80330e698da8a6fb1bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a921cc3a57cf5a37b9ce87fdfbb9c2461"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Add</a> (T value)</td></tr>
<tr class="separator:a921cc3a57cf5a37b9ce87fdfbb9c2461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae30c0423a27eff806c0b317c9f2a6a41"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae30c0423a27eff806c0b317c9f2a6a41">RemoveAt</a> (int index)</td></tr>
<tr class="separator:ae30c0423a27eff806c0b317c9f2a6a41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d9eebe518fa61c79d1847ceac1415fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d9eebe518fa61c79d1847ceac1415fe">Contains</a> (T value)</td></tr>
<tr class="separator:a9d9eebe518fa61c79d1847ceac1415fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4bb5460760be524b6e0aa13aaa1a3c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aa4bb5460760be524b6e0aa13aaa1a3c9">InsertSort</a> (T value)</td></tr>
<tr class="separator:aa4bb5460760be524b6e0aa13aaa1a3c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a896498a4b1422b1426bb9671bdbff4fa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a896498a4b1422b1426bb9671bdbff4fa">UniqueInsertSort</a> (T value)</td></tr>
<tr class="separator:a896498a4b1422b1426bb9671bdbff4fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a221422342e9b30aaca06bae3bdf2ea31"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a221422342e9b30aaca06bae3bdf2ea31">RemoveSort</a> (T value)</td></tr>
<tr class="separator:a221422342e9b30aaca06bae3bdf2ea31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b19b534c8cacdb9c2f5ff622de305e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a56b19b534c8cacdb9c2f5ff622de305e">Contains</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="separator:a56b19b534c8cacdb9c2f5ff622de305e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af548b09a5136307c204ff4e1b37668f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#af548b09a5136307c204ff4e1b37668f4">InsertSort</a> (object key, T value, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="separator:af548b09a5136307c204ff4e1b37668f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5859cc7c1942c906b479c2c89fe86b7"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac5859cc7c1942c906b479c2c89fe86b7">RemoveSort</a> (object key, T value, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="separator:ac5859cc7c1942c906b479c2c89fe86b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0654b32561d537e32ffd0bba7ad0dacf"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a0654b32561d537e32ffd0bba7ad0dacf">SearchLast</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="separator:a0654b32561d537e32ffd0bba7ad0dacf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81b2b42f1a49544761574a3fa213627c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a81b2b42f1a49544761574a3fa213627c">SearchFirst</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="separator:a81b2b42f1a49544761574a3fa213627c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1acad79bb2e068b165157481de0dec9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">GetEnumerator</a> ()</td></tr>
<tr class="separator:a1acad79bb2e068b165157481de0dec9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4036aeaee8a3095761f14a3ad08aaee3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a4036aeaee8a3095761f14a3ad08aaee3">GetEnumerator</a> (int startOffset, int endOffset)</td></tr>
<tr class="separator:a4036aeaee8a3095761f14a3ad08aaee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae088a19d3c3508afb66502cbd9f50c3b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae088a19d3c3508afb66502cbd9f50c3b">BlockIndexBase</a> ()</td></tr>
<tr class="separator:ae088a19d3c3508afb66502cbd9f50c3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74dcd2d2b35b8da8343ea12556ea79ff"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a74dcd2d2b35b8da8343ea12556ea79ff">BlockIndexBase</a> (IEnumerable&lt; <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&gt; blocks)</td></tr>
<tr class="separator:a74dcd2d2b35b8da8343ea12556ea79ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8d477cc98655d9d3bd2f330f70917d1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ac8d477cc98655d9d3bd2f330f70917d1">BlockIndexBase</a> (IEnumerable&lt; T &gt; values)</td></tr>
<tr class="separator:ac8d477cc98655d9d3bd2f330f70917d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b13ce99032f50b2e5bcad23df6c116"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a23b13ce99032f50b2e5bcad23df6c116">BlockIndexBase</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm">IIndex</a>&lt; T &gt; index)</td></tr>
<tr class="separator:a23b13ce99032f50b2e5bcad23df6c116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61915d1656edf69aa4e555ec36bae07d"><td class="memItemLeft" align="right" valign="top">abstract <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">NewBlock</a> ()</td></tr>
<tr class="memdesc:a61915d1656edf69aa4e555ec36bae07d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new IIndexBlock&lt;T&gt; for the given implementation.  <a href="#a61915d1656edf69aa4e555ec36bae07d">More...</a><br /></td></tr>
<tr class="separator:a61915d1656edf69aa4e555ec36bae07d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae98c3ceece630399dd8f3f5d1571b69"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">OnDeleteBlock</a> (<a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt; block)</td></tr>
<tr class="memdesc:aae98c3ceece630399dd8f3f5d1571b69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the class decides the given IIndexBlock&lt;T&gt; is no longer needed.  <a href="#aae98c3ceece630399dd8f3f5d1571b69">More...</a><br /></td></tr>
<tr class="separator:aae98c3ceece630399dd8f3f5d1571b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pac-methods"></a>
Package Functions</h2></td></tr>
<tr class="memitem:a27933d269026917f7b9f67102ab0bfc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a27933d269026917f7b9f67102ab0bfc3">CopyToArray</a> (T[] array, int offset, int length)</td></tr>
<tr class="memdesc:a27933d269026917f7b9f67102ab0bfc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from each block into the given int[] array.  <a href="#a27933d269026917f7b9f67102ab0bfc3">More...</a><br /></td></tr>
<tr class="separator:a27933d269026917f7b9f67102ab0bfc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="properties"></a>
Properties</h2></td></tr>
<tr class="memitem:a2f6c724ee5e177a3a6212873141023a3"><td class="memItemLeft" align="right" valign="top">List&lt; <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a><code> [get, private set]</code></td></tr>
<tr class="separator:a2f6c724ee5e177a3a6212873141023a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6854ee1cfea230b149e32a2e234c5c0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">IsReadOnly</a><code> [get, set]</code></td></tr>
<tr class="separator:ab6854ee1cfea230b149e32a2e234c5c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d04e42347f31f08414d995a977e6ec7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a><code> [get, private set]</code></td></tr>
<tr class="separator:a6d04e42347f31f08414d995a977e6ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad26fdb3805aba7fc31d206dab271e2d8"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad26fdb3805aba7fc31d206dab271e2d8">this[int index]</a><code> [get]</code></td></tr>
<tr class="separator:ad26fdb3805aba7fc31d206dab271e2d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:aef2a349aaada862c202ecab5ff4436a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a> (int index, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt; block)</td></tr>
<tr class="memdesc:aef2a349aaada862c202ecab5ff4436a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a block at the given position in the index.  <a href="#aef2a349aaada862c202ecab5ff4436a2">More...</a><br /></td></tr>
<tr class="separator:aef2a349aaada862c202ecab5ff4436a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2fa7d93837715b1ea6b10919e5916dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">RemoveBlock</a> (int index)</td></tr>
<tr class="memdesc:ae2fa7d93837715b1ea6b10919e5916dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a block from the given position in the index.  <a href="#ae2fa7d93837715b1ea6b10919e5916dc">More...</a><br /></td></tr>
<tr class="separator:ae2fa7d93837715b1ea6b10919e5916dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d23b291c3ec69d59c5ab65a8786132b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a> (T value, int blockIndex, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt; block, int position)</td></tr>
<tr class="memdesc:a9d23b291c3ec69d59c5ab65a8786132b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a value in the given block position in the list.  <a href="#a9d23b291c3ec69d59c5ab65a8786132b">More...</a><br /></td></tr>
<tr class="separator:a9d23b291c3ec69d59c5ab65a8786132b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85090d3d907dd726299e5f4c7bdce544"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">RemoveFromBlock</a> (int blockIndex, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt; block, int position)</td></tr>
<tr class="memdesc:a85090d3d907dd726299e5f4c7bdce544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the value from the given position in the specified block.  <a href="#a85090d3d907dd726299e5f4c7bdce544">More...</a><br /></td></tr>
<tr class="separator:a85090d3d907dd726299e5f4c7bdce544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44142dfbc0a192bef2be270c358c33cb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">FindBlockContaining</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="memdesc:a44142dfbc0a192bef2be270c358c33cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator.  <a href="#a44142dfbc0a192bef2be270c358c33cb">More...</a><br /></td></tr>
<tr class="separator:a44142dfbc0a192bef2be270c358c33cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d38bf7e648ef6bf1ab4da5a4d129e58"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; comparer)</td></tr>
<tr class="memdesc:a7d38bf7e648ef6bf1ab4da5a4d129e58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator.  <a href="#a7d38bf7e648ef6bf1ab4da5a4d129e58">More...</a><br /></td></tr>
<tr class="separator:a7d38bf7e648ef6bf1ab4da5a4d129e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a497a00c13b562c16a21275364a8602e9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">FindFirstBlock</a> (object key, <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt; c)</td></tr>
<tr class="memdesc:a497a00c13b562c16a21275364a8602e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator.  <a href="#a497a00c13b562c16a21275364a8602e9">More...</a><br /></td></tr>
<tr class="separator:a497a00c13b562c16a21275364a8602e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dbfd7896ee2b82e5b112f34b07dc2d5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7dbfd7896ee2b82e5b112f34b07dc2d5">FindLastBlock</a> (T val)</td></tr>
<tr class="memdesc:a7dbfd7896ee2b82e5b112f34b07dc2d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given value.  <a href="#a7dbfd7896ee2b82e5b112f34b07dc2d5">More...</a><br /></td></tr>
<tr class="separator:a7dbfd7896ee2b82e5b112f34b07dc2d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46492c91a3f6b828160622586e381193"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a> ()</td></tr>
<tr class="memdesc:a46492c91a3f6b828160622586e381193"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the current index is mutable.  <a href="#a46492c91a3f6b828160622586e381193">More...</a><br /></td></tr>
<tr class="separator:a46492c91a3f6b828160622586e381193"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a539e332a1c945be8d6deaac28b5438d2"><td class="memItemLeft" align="right" valign="top">IEnumerator&lt; T &gt; IEnumerable&lt; T &gt;.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a539e332a1c945be8d6deaac28b5438d2">GetEnumerator</a> ()</td></tr>
<tr class="separator:a539e332a1c945be8d6deaac28b5438d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97835e8fa1f5cfcaaa98a6fce157ea03"><td class="memItemLeft" align="right" valign="top">IEnumerator IEnumerable.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a97835e8fa1f5cfcaaa98a6fce157ea03">GetEnumerator</a> ()</td></tr>
<tr class="separator:a97835e8fa1f5cfcaaa98a6fce157ea03"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:aeb2681065642424f8dc7267b68aa2df6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">IsSmallerOrEqual</a> (T x, T y)</td></tr>
<tr class="separator:aeb2681065642424f8dc7267b68aa2df6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a770c864e43fc560bf1d096e294cc9237"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">IsGreaterOrEqual</a> (T x, T y)</td></tr>
<tr class="separator:a770c864e43fc560bf1d096e294cc9237"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7da6e17ca10ff50fd67f2b7606020ae"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">IsGreater</a> (T x, T y)</td></tr>
<tr class="separator:ad7da6e17ca10ff50fd67f2b7606020ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad15d43e82f148428c5f16eae5e729e77"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">IsSmaller</a> (T x, T y)</td></tr>
<tr class="separator:ad15d43e82f148428c5f16eae5e729e77"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An implementation of an index of values that are stored across an array of blocks. </p>
<p>This allows for quicker insertion and deletion of values, including other memory saving benefits. </p>
<p>The class works as follows: </p><ul>
<li>
The index can contain any number of <a class="el" href="">integer</a> values. </li>
<li>
Each value is stored within a block of integers A block is of finite size. </li>
<li>
When a block becomes full, values are moved around until enough space is free. This may be by inserting a new block or by shifting informations from one block to another. </li>
<li>
When a block becomes empty, it is removed. </li>
</ul>
<p>The benefits of this system are that inserts and deletes are fast even for very large lists. There are no megabyte sized arraycopies. Also, the object could be extended to a version that pages un-used blocks to disk thus saving precious system memory. </p>
<p><b>Note:</b> The following methods are <b>not</b> optimal: Item(int), <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#acb0e6a442e1d80330e698da8a6fb1bc2">Insert(int, T)</a>, <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae30c0423a27eff806c0b317c9f2a6a41">RemoveAt(int)</a>.<br />
 Specifically, they slow as the specified <em>index</em> nears the end of large lists. </p>
<p>This type of structure is very fast for large sorted lists where values can be inserted at any position within the list. Care needs to be taken for lists where values are inserted and removed constantly, because fragmentation of the list blocks can occur. For example, adding 60,000 random entries followed by removing 50,000 random entries will result in many only partially filled blocks. Since each block takes a constant amount of memory, this may not be acceptable. </p>
<div class="typeconstraint">
<dl><dt><b>Type Constraints</b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em>T</em></td><td>&#160;:</td><td valign="top"><em>IComparable&lt;T&gt;</em></td><td>&#160;</td></tr>
<tr><td valign="top"><em>T</em></td><td>&#160;:</td><td valign="top"><em>IEquatable&lt;T&gt;</em></td><td>&#160;</td></tr>
</table>
</dl>
</div>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00063">63</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae088a19d3c3508afb66502cbd9f50c3b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.<a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00064">64</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                   {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> = 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">IsReadOnly</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a> = <span class="keyword">new</span> List&lt;IIndexBlock&lt;T&gt;&gt;(10);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ab6854ee1cfea230b149e32a2e234c5c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">Deveel.Data.Index.BlockIndexBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00120">BlockIndexBase_T.cs:120</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a74dcd2d2b35b8da8343ea12556ea79ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.<a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a> </td>
          <td>(</td>
          <td class="paramtype">IEnumerable&lt; <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&gt;&#160;</td>
          <td class="paramname"><em>blocks</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00070">70</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            : <span class="keyword">this</span>() {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">foreach</span> (var block <span class="keywordflow">in</span> blocks) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Add(block);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> += block.Count;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac8d477cc98655d9d3bd2f330f70917d1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.<a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a> </td>
          <td>(</td>
          <td class="paramtype">IEnumerable&lt; T &gt;&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00078">78</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            : <span class="keyword">this</span>() {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">foreach</span> (var value <span class="keywordflow">in</span> values) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Add</a>(value);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a921cc3a57cf5a37b9ce87fdfbb9c2461"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Deveel.Data.Index.BlockIndexBase.Add</a></div><div class="ttdeci">void Add(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00547">BlockIndexBase_T.cs:547</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a23b13ce99032f50b2e5bcad23df6c116"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.<a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">BlockIndexBase</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndex.htm">IIndex</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00085">85</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            : <span class="keyword">this</span>() {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">if</span> (index is BlockIndexBase&lt;T&gt;) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="comment">// Optimization for when the input list is a BlockIntegerList</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                var blockIndex = (BlockIndexBase&lt;T&gt;) index;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                var inBlocks = blockIndex.Blocks;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordtype">int</span> inBlocksCount = inBlocks.Count;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// For each block in &#39;blockIndex&#39;</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; inBlocksCount; ++i) {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment">// get the block.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    var block = inBlocks[i];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="comment">// Insert a new block in this object.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    var destBlock = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a>(i, <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">NewBlock</a>());</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="comment">// Copy the contents of the source block to the new destination block.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    block.CopyTo(destBlock);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="comment">// Set the size of the list</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> = blockIndex.Count; <span class="comment">//count;</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="comment">// The case when IIntegerList type is not known</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                var i = index.GetEnumerator();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">while</span> (i.MoveNext()) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Add</a>(i.Current);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// If the given list is immutable then set this list to immutable</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span> (index.IsReadOnly)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">IsReadOnly</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a61915d1656edf69aa4e555ec36bae07d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">Deveel.Data.Index.BlockIndexBase.NewBlock</a></div><div class="ttdeci">abstract IIndexBlock&lt; T &gt; NewBlock()</div><div class="ttdoc">Creates a new IIndexBlock<T> for the given implementation. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a921cc3a57cf5a37b9ce87fdfbb9c2461"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a921cc3a57cf5a37b9ce87fdfbb9c2461">Deveel.Data.Index.BlockIndexBase.Add</a></div><div class="ttdeci">void Add(T value)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00547">BlockIndexBase_T.cs:547</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ab6854ee1cfea230b149e32a2e234c5c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">Deveel.Data.Index.BlockIndexBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00120">BlockIndexBase_T.cs:120</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aef2a349aaada862c202ecab5ff4436a2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">Deveel.Data.Index.BlockIndexBase.InsertBlock</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; InsertBlock(int index, IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Inserts a block at the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00165">BlockIndexBase_T.cs:165</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a921cc3a57cf5a37b9ce87fdfbb9c2461"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Add </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00547">547</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                 {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            <span class="keywordtype">int</span> size = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[size - 1];</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(value, size - 1, block, block.Count);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a46492c91a3f6b828160622586e381193"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.CheckImmutable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the current index is mutable. </p>
<p>This is called before any mutable operations on the index: if the index is mutable and empty then an empty block is added to the index. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">InvalidOperationException</td><td>Thrown if the index is read-only. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00499">499</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                      {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">IsReadOnly</a>)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Index is read-only.&quot;</span>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="comment">// HACK: We have a side effect of checking whether the list is immutable.</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="comment">//   If the block list doesn&#39;t contain any entries we add one here.  This</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="comment">//   hack reduces the memory requirements.</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count == 0) {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a>(0, <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">NewBlock</a>());</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a61915d1656edf69aa4e555ec36bae07d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">Deveel.Data.Index.BlockIndexBase.NewBlock</a></div><div class="ttdeci">abstract IIndexBlock&lt; T &gt; NewBlock()</div><div class="ttdoc">Creates a new IIndexBlock<T> for the given implementation. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ab6854ee1cfea230b149e32a2e234c5c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ab6854ee1cfea230b149e32a2e234c5c0">Deveel.Data.Index.BlockIndexBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00120">BlockIndexBase_T.cs:120</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aef2a349aaada862c202ecab5ff4436a2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">Deveel.Data.Index.BlockIndexBase.InsertBlock</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; InsertBlock(int index, IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Inserts a block at the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00165">BlockIndexBase_T.cs:165</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9d9eebe518fa61c79d1847ceac1415fe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Contains </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00572">572</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                                      {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(value);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                <span class="comment">// We didn&#39;t find in the list, so return false.</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="comment">// Find, if not there then return false.</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> block.SearchLast(value) &gt;= 0;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a56b19b534c8cacdb9c2f5ff622de305e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Contains </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00684">684</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                                                     {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">FindBlockContaining</a>(key, comparer);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="comment">// We didn&#39;t find in the list, so return false.</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <span class="comment">// Find, if not there then return false.</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keywordflow">return</span> block.BinarySearch(key, comparer) &gt;= 0;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a44142dfbc0a192bef2be270c358c33cb"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a44142dfbc0a192bef2be270c358c33cb">Deveel.Data.Index.BlockIndexBase.FindBlockContaining</a></div><div class="ttdeci">int FindBlockContaining(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00290">BlockIndexBase_T.cs:290</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a27933d269026917f7b9f67102ab0bfc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.CopyToArray </td>
          <td>(</td>
          <td class="paramtype">T[]&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">package</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies the data from each block into the given int[] array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">array</td><td></td></tr>
    <tr><td class="paramname">offset</td><td></td></tr>
    <tr><td class="paramname">length</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>The int[] array must be big enough to fit all the data in this list. </p>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00520">520</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                                                     {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keywordflow">if</span> (array.Length &lt; length || (offset + length) &gt; <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a>)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Size mismatch.&quot;</span>);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">foreach</span> (var block <span class="keywordflow">in</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>) {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                offset += block.CopyTo(array, offset);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a44142dfbc0a192bef2be270c358c33cb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.FindBlockContaining </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td></td></tr>
    <tr><td class="paramname">comparer</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00290">290</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                                                {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> == 0)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordtype">int</span> high = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[mid];</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">if</span> (comparer.CompareValue(block.Bottom, (DataObject) key) &gt; 0) {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comparer.CompareValue(block.Top, (DataObject) key) &lt; 0) {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    <span class="comment">// Must be inside this block then!</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordflow">return</span> mid;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a497a00c13b562c16a21275364a8602e9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.FindFirstBlock </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td></td></tr>
    <tr><td class="paramname">c</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00379">379</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                                    {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> == 0) {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keywordtype">int</span> high = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = low; i &lt;= high; ++i) {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        var block1 = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                        <span class="keywordflow">if</span> (c.CompareValue(block1.Top, (DataObject) key) &gt;= 0) {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            <span class="keywordflow">if</span> (c.CompareValue(block1.Bottom, (DataObject) key) &lt;= 0)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                            <span class="keywordflow">return</span> -(i + 1);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">return</span> -(high + 1) - 1;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[mid];</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="keywordflow">if</span> (c.CompareValue(block.Bottom, (DataObject) key) &gt; 0) {</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c.CompareValue(block.Top, (DataObject) key) &lt; 0) {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    high = mid;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7d38bf7e648ef6bf1ab4da5a4d129e58"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.FindLastBlock </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given key value using the IIndexComparer&lt;T&gt; as a lookup comparator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td></td></tr>
    <tr><td class="paramname">comparer</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00327">327</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                                          {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> == 0)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordtype">int</span> high = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = high; i &gt;= low; --i) {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        var block1 = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <span class="keywordflow">if</span> (comparer.CompareValue(block1.Bottom, (DataObject) key) &lt;= 0) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                            <span class="keywordflow">if</span> (comparer.CompareValue(block1.Top, (DataObject) key) &gt;= 0)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                            <span class="keywordflow">return</span> -(i + 1) - 1;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    <span class="keywordflow">return</span> -(low + 1);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[mid];</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">if</span> (comparer.CompareValue(block.Bottom, (DataObject) key) &gt; 0) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comparer.CompareValue(block.Top, (DataObject) key) &lt; 0) {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    low = mid;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <span class="keywordflow">if</span> (low == high) {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        <span class="keywordflow">return</span> low;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7dbfd7896ee2b82e5b112f34b07dc2d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.FindLastBlock </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Uses a binary search algorithm to quickly determine the index of the IIndexBlock&lt;T&gt; within 'blocks' of the block that contains the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00444">444</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                         {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> == 0) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordtype">int</span> low = 0;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordtype">int</span> high = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keywordflow">while</span> (low &lt;= high) {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                <span class="keywordflow">if</span> (high - low &lt;= 2) {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = high; i &gt;= low; --i) {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        var block1 = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">IsSmallerOrEqual</a>(block1.Bottom, val)) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                            <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">IsGreaterOrEqual</a>(block1.Top, val))</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                            <span class="keywordflow">return</span> -(i + 1) - 1;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="keywordflow">return</span> -(low + 1);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                <span class="keywordtype">int</span> mid = (low + high)/2;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[mid];</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="comment">// Is what we are searching for lower than the bottom value?</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">IsGreater</a>(block.Bottom,val)) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    high = mid - 1;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="comment">// No, then is it greater than the highest value?</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">IsSmaller</a>(block.Top, val)) {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    low = mid + 1;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    <span class="comment">// Equal, so highest must be someplace between mid and high.</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    low = mid;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keywordflow">if</span> (low == high) {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        <span class="keywordflow">return</span> low;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                }</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">return</span> -(low + 1); <span class="comment">// key not found.</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a770c864e43fc560bf1d096e294cc9237"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a770c864e43fc560bf1d096e294cc9237">Deveel.Data.Index.BlockIndexBase.IsGreaterOrEqual</a></div><div class="ttdeci">static bool IsGreaterOrEqual(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00425">BlockIndexBase_T.cs:425</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aeb2681065642424f8dc7267b68aa2df6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aeb2681065642424f8dc7267b68aa2df6">Deveel.Data.Index.BlockIndexBase.IsSmallerOrEqual</a></div><div class="ttdeci">static bool IsSmallerOrEqual(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00421">BlockIndexBase_T.cs:421</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ad7da6e17ca10ff50fd67f2b7606020ae"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad7da6e17ca10ff50fd67f2b7606020ae">Deveel.Data.Index.BlockIndexBase.IsGreater</a></div><div class="ttdeci">static bool IsGreater(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00429">BlockIndexBase_T.cs:429</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ad15d43e82f148428c5f16eae5e729e77"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ad15d43e82f148428c5f16eae5e729e77">Deveel.Data.Index.BlockIndexBase.IsSmaller</a></div><div class="ttdeci">static bool IsSmaller(T x, T y)</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00433">BlockIndexBase_T.cs:433</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1acad79bb2e068b165157481de0dec9b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator</a>&lt;T&gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.GetEnumerator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00808">808</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                                   {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">GetEnumerator</a>(0, <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a> - 1);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a1acad79bb2e068b165157481de0dec9b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">Deveel.Data.Index.BlockIndexBase.GetEnumerator</a></div><div class="ttdeci">IIndexEnumerator&lt; T &gt; GetEnumerator()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00808">BlockIndexBase_T.cs:808</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4036aeaee8a3095761f14a3ad08aaee3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexEnumerator.htm">IIndexEnumerator</a>&lt;T&gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.GetEnumerator </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>startOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>endOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00812">812</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                                                                 {</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Enumerator(<span class="keyword">this</span>, startOffset, endOffset);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a539e332a1c945be8d6deaac28b5438d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;. <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.GetEnumerator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00816">816</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                                                      {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">GetEnumerator</a>();</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a1acad79bb2e068b165157481de0dec9b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">Deveel.Data.Index.BlockIndexBase.GetEnumerator</a></div><div class="ttdeci">IIndexEnumerator&lt; T &gt; GetEnumerator()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00808">BlockIndexBase_T.cs:808</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a97835e8fa1f5cfcaaa98a6fce157ea03"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IEnumerator IEnumerable. <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.GetEnumerator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00820">820</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                                {</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">GetEnumerator</a>();</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a1acad79bb2e068b165157481de0dec9b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a1acad79bb2e068b165157481de0dec9b">Deveel.Data.Index.BlockIndexBase.GetEnumerator</a></div><div class="ttdeci">IIndexEnumerator&lt; T &gt; GetEnumerator()</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00808">BlockIndexBase_T.cs:808</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acb0e6a442e1d80330e698da8a6fb1bc2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Insert </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00529">529</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                               {</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordtype">int</span> size = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <span class="keywordflow">if</span> (index &gt;= start &amp;&amp; index &lt;= start + bsize) {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(value, i, block, index - start);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                start += bsize;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            }</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;index&quot;</span>);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aef2a349aaada862c202ecab5ff4436a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt;T&gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.InsertBlock </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>block</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a block at the given position in the index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td></td></tr>
    <tr><td class="paramname">block</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00165">165</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                                            {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Insert(index, block);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="comment">// Point to next in the list.</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">if</span> (index + 1 &lt; <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count) {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                var nextBlock = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[index + 1];</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                block.Next = nextBlock;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                nextBlock.Previous = block;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                block.Next = null;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="comment">// Point to previous in the list.</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> (index &gt; 0) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                var prevBlock = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[index - 1];</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                block.Previous = prevBlock;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                prevBlock.Next = block;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                block.Previous = null;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">return</span> block;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9d23b291c3ec69d59c5ab65a8786132b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.InsertIntoBlock </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blockIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a value in the given block position in the list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td></td></tr>
    <tr><td class="paramname">blockIndex</td><td></td></tr>
    <tr><td class="paramname">block</td><td></td></tr>
    <tr><td class="paramname">position</td><td></td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00223">223</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                                                                  {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            block.Insert(value, position);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            ++<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="comment">// Is the block full?</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span> (block.IsFull) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">// We need to move half of the data out of this block into either the</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// next block or create a new block to store it.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="comment">// The size that we going to zap out of this block.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordtype">int</span> moveSize = (block.Count/7) - 1;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="comment">// The block to move half the data from this block.</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                IIndexBlock&lt;T&gt; moveTo;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="comment">// Is there a next block?</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    var nextBlock = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex + 1];</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="comment">// Yes, can this block contain half the values from this block?</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keywordflow">if</span> (nextBlock.CanContain(moveSize)) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        moveTo = nextBlock;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        <span class="comment">// Can&#39;t contain so insert a new block.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        moveTo = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a>(blockIndex + 1, <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">NewBlock</a>());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="comment">// No next block so create a new block</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    moveTo = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">InsertBlock</a>(blockIndex + 1, <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">NewBlock</a>());</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="comment">// &#39;moveTo&#39; should be set to the block we are to use to move half the</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <span class="comment">// data from this block.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                block.MoveTo(moveTo, 0, moveSize);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a61915d1656edf69aa4e555ec36bae07d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a61915d1656edf69aa4e555ec36bae07d">Deveel.Data.Index.BlockIndexBase.NewBlock</a></div><div class="ttdeci">abstract IIndexBlock&lt; T &gt; NewBlock()</div><div class="ttdoc">Creates a new IIndexBlock<T> for the given implementation. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aef2a349aaada862c202ecab5ff4436a2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aef2a349aaada862c202ecab5ff4436a2">Deveel.Data.Index.BlockIndexBase.InsertBlock</a></div><div class="ttdeci">IIndexBlock&lt; T &gt; InsertBlock(int index, IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Inserts a block at the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00165">BlockIndexBase_T.cs:165</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa4bb5460760be524b6e0aa13aaa1a3c9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.InsertSort </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00586">586</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                        {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(value);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                }</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                i = i + 1;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <span class="comment">// NOTE: A block can never become totally full so it&#39;s always okay to</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                <span class="comment">//   skip one ahead.</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(value, blockIndex, block, i);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af548b09a5136307c204ff4e1b37668f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.InsertSort </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00698">698</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                                                                {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(key, comparer);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            }</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(key, comparer);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                i = i + 1;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="comment">// NOTE: A block can never become totally full so it&#39;s always okay to</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="comment">//   skip one ahead.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(value, blockIndex, block, i);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad7da6e17ca10ff50fd67f2b7606020ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.IsGreater </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00429">429</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &gt; 0;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a770c864e43fc560bf1d096e294cc9237"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.IsGreaterOrEqual </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00425">425</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                                       {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &gt;= 0;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad15d43e82f148428c5f16eae5e729e77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.IsSmaller </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00433">433</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &lt; 0;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aeb2681065642424f8dc7267b68aa2df6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.IsSmallerOrEqual </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00421">421</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                       {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="keywordflow">return</span> x.CompareTo(y) &lt;= 0;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a61915d1656edf69aa4e555ec36bae07d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract <a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt;T&gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.NewBlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new IIndexBlock&lt;T&gt; for the given implementation. </p>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndex.htm#a8ae71d2a1e089114a897f83fef4b4004">Deveel.Data.Index.BlockIndex&lt; T &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="aae98c3ceece630399dd8f3f5d1571b69"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.OnDeleteBlock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>block</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the class decides the given IIndexBlock&lt;T&gt; is no longer needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">block</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>Provided as an event for derived classes to intercept. </p>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00155">155</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                                                   {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae30c0423a27eff806c0b317c9f2a6a41"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.RemoveAt </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00555">555</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                     {</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <span class="keywordtype">int</span> size = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordtype">int</span> start = 0;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                <span class="keywordtype">int</span> bsize = block.Count;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">if</span> (index &gt;= start &amp;&amp; index &lt;= start + bsize) {</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">RemoveFromBlock</a>(i, block, index - start);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                start += bsize;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="stringliteral">&quot;index&quot;</span>);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a85090d3d907dd726299e5f4c7bdce544"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">Deveel.Data.Index.BlockIndexBase.RemoveFromBlock</a></div><div class="ttdeci">T RemoveFromBlock(int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Removes the value from the given position in the specified block. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00270">BlockIndexBase_T.cs:270</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae2fa7d93837715b1ea6b10919e5916dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.RemoveBlock </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a block from the given position in the index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td></td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00193">193</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                            {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="comment">// Alter linked list pointers.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            IIndexBlock&lt;T&gt; newPrev = null;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            IIndexBlock&lt;T&gt; newNext = null;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">if</span> (index + 1 &lt; <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                newNext = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[index + 1];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">if</span> (index &gt; 0) {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                newPrev = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[index - 1];</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span> (newPrev != null) {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                newPrev.Next = newNext;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">if</span> (newNext != null) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                newNext.Previous = newPrev;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            var beenRemoved = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[index];</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.RemoveAt(index);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">OnDeleteBlock</a>(beenRemoved);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_aae98c3ceece630399dd8f3f5d1571b69"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#aae98c3ceece630399dd8f3f5d1571b69">Deveel.Data.Index.BlockIndexBase.OnDeleteBlock</a></div><div class="ttdeci">virtual void OnDeleteBlock(IIndexBlock&lt; T &gt; block)</div><div class="ttdoc">Called when the class decides the given IIndexBlock<T> is no longer needed. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00155">BlockIndexBase_T.cs:155</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a85090d3d907dd726299e5f4c7bdce544"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.RemoveFromBlock </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blockIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>block</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the value from the given position in the specified block. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">blockIndex</td><td></td></tr>
    <tr><td class="paramname">block</td><td></td></tr>
    <tr><td class="paramname">position</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>It returns the value that used to be at that position. </p>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00270">270</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                                                      {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            var oldValue = block.RemoveAt(position);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            --<a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Count</a>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="comment">// If we have emptied out this block, then we should remove it from the</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="comment">// list.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span> (block.IsEmpty &amp;&amp; <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count &gt; 1)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">RemoveBlock</a>(blockIndex);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">return</span> oldValue;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a6d04e42347f31f08414d995a977e6ec7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a6d04e42347f31f08414d995a977e6ec7">Deveel.Data.Index.BlockIndexBase.Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00122">BlockIndexBase_T.cs:122</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_ae2fa7d93837715b1ea6b10919e5916dc"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#ae2fa7d93837715b1ea6b10919e5916dc">Deveel.Data.Index.BlockIndexBase.RemoveBlock</a></div><div class="ttdeci">void RemoveBlock(int index)</div><div class="ttdoc">Removes a block from the given position in the index. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00193">BlockIndexBase_T.cs:193</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a221422342e9b30aaca06bae3bdf2ea31"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.RemoveSort </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00650">650</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                        {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(value);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="comment">// The block to remove the value,</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                }</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            }</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            <span class="comment">// The point to remove the block,</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                <span class="comment">// This means we can&#39;t found the value in the given block, so return</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                <span class="comment">// false.</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            <span class="comment">// Remove value into the block,</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            var valRemoved = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">RemoveFromBlock</a>(blockIndex, block, i);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">if</span> (!value.Equals(valRemoved))</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Incorrect value removed.&quot;</span>);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="comment">// Value removed so return true.</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a85090d3d907dd726299e5f4c7bdce544"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">Deveel.Data.Index.BlockIndexBase.RemoveFromBlock</a></div><div class="ttdeci">T RemoveFromBlock(int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Removes the value from the given position in the specified block. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00270">BlockIndexBase_T.cs:270</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac5859cc7c1942c906b479c2c89fe86b7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.RemoveSort </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00729">729</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                                                                             {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="comment">// Find the range of blocks that the value is in.</span></div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keywordtype">int</span> origBlockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">FindFirstBlock</a>(key, comparer);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            <span class="keywordtype">int</span> blockIndex = origBlockIndex;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="keywordtype">int</span> lastBlockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>.Count - 1;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0)</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                <span class="comment">// Not found in a block,</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Value (&quot;</span> + key + <span class="stringliteral">&quot;) was not found in the list.&quot;</span>);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keywordtype">int</span> i = block.IndexOf(value);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keywordflow">while</span> (i == -1) {</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                <span class="comment">// If not found, go to next block</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                ++blockIndex;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                <span class="keywordflow">if</span> (blockIndex &gt; lastBlockIndex)</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="stringliteral">&quot;Value (&quot;</span> + key + <span class="stringliteral">&quot;) was not found in the list.&quot;</span>);</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                <span class="comment">// Try and find the value within this block</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                i = block.IndexOf(value);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            }</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="comment">// Remove value from the block,</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">RemoveFromBlock</a>(blockIndex, block, i);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a497a00c13b562c16a21275364a8602e9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">Deveel.Data.Index.BlockIndexBase.FindFirstBlock</a></div><div class="ttdeci">int FindFirstBlock(object key, IIndexComparer&lt; T &gt; c)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00379">BlockIndexBase_T.cs:379</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a85090d3d907dd726299e5f4c7bdce544"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a85090d3d907dd726299e5f4c7bdce544">Deveel.Data.Index.BlockIndexBase.RemoveFromBlock</a></div><div class="ttdeci">T RemoveFromBlock(int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Removes the value from the given position in the specified block. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00270">BlockIndexBase_T.cs:270</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a81b2b42f1a49544761574a3fa213627c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.SearchFirst </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00783">783</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                                                       {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keywordtype">int</span> blockNum = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">FindFirstBlock</a>(key, comparer);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <span class="keywordtype">int</span> sr;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="keywordflow">if</span> (blockNum &lt; 0) {</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                <span class="comment">// Guarenteed not found in any blocks so return start of insert block</span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                blockNum = (-(blockNum + 1)); <span class="comment">// - 1;</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                sr = -1;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockNum];</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <span class="comment">// Try and find it in the block,</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                sr = block.SearchFirst(key, comparer);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            }</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="keywordtype">int</span> offset = 0;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; blockNum; ++i) {</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                offset += block.Count;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            }</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            <span class="keywordflow">return</span> sr &gt;= 0 ? offset + sr : -offset + sr;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a497a00c13b562c16a21275364a8602e9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a497a00c13b562c16a21275364a8602e9">Deveel.Data.Index.BlockIndexBase.FindFirstBlock</a></div><div class="ttdeci">int FindFirstBlock(object key, IIndexComparer&lt; T &gt; c)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00379">BlockIndexBase_T.cs:379</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0654b32561d537e32ffd0bba7ad0dacf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.SearchLast </td>
          <td>(</td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexComparer.htm">IIndexComparer</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>comparer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00758">758</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                                                      {</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(key, comparer);</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordtype">int</span> sr;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                <span class="comment">// Guarenteed not found in any blocks so return start of insert block</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                blockIndex = (-(blockIndex + 1)); <span class="comment">// - 1;</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                sr = -1;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                <span class="comment">// Try and find it in the block,</span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                sr = block.SearchLast(key, comparer);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            }</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordtype">int</span> offset = 0;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; blockIndex; ++i) {</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[i];</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                offset += block.Count;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            }</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="keywordflow">return</span> sr &gt;= 0 ? offset + sr : -offset + sr;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a896498a4b1422b1426bb9671bdbff4fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.UniqueInsertSort </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00617">617</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                              {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">CheckImmutable</a>();</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            <span class="keywordtype">int</span> blockIndex = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">FindLastBlock</a>(value);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                <span class="comment">// Not found a block,</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                <span class="comment">// The block to insert the value,</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                blockIndex = (-(blockIndex + 1)) - 1;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                <span class="keywordflow">if</span> (blockIndex &lt; 0) {</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    blockIndex = 0;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <span class="comment">// We got a block, so find out if it&#39;s in the block or not.</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            var block = <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Blocks</a>[blockIndex];</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="comment">// The point to insert in the block,</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            <span class="keywordtype">int</span> i = block.SearchLast(value);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                <span class="comment">// This means we found the value in the given block, so return false.</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            }</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <span class="comment">// Insert value into the block,</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">InsertIntoBlock</a>(value, blockIndex, block, i);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="comment">// Value inserted so return true.</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a9d23b291c3ec69d59c5ab65a8786132b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a9d23b291c3ec69d59c5ab65a8786132b">Deveel.Data.Index.BlockIndexBase.InsertIntoBlock</a></div><div class="ttdeci">void InsertIntoBlock(T value, int blockIndex, IIndexBlock&lt; T &gt; block, int position)</div><div class="ttdoc">Inserts a value in the given block position in the list. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00223">BlockIndexBase_T.cs:223</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a2f6c724ee5e177a3a6212873141023a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a2f6c724ee5e177a3a6212873141023a3">Deveel.Data.Index.BlockIndexBase.Blocks</a></div><div class="ttdeci">List&lt; IIndexBlock&lt; T &gt; &gt; Blocks</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00118">BlockIndexBase_T.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a46492c91a3f6b828160622586e381193"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a46492c91a3f6b828160622586e381193">Deveel.Data.Index.BlockIndexBase.CheckImmutable</a></div><div class="ttdeci">void CheckImmutable()</div><div class="ttdoc">Checks if the current index is mutable. </div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00499">BlockIndexBase_T.cs:499</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase_htm_a7d38bf7e648ef6bf1ab4da5a4d129e58"><div class="ttname"><a href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm#a7d38bf7e648ef6bf1ab4da5a4d129e58">Deveel.Data.Index.BlockIndexBase.FindLastBlock</a></div><div class="ttdeci">int FindLastBlock(object key, IIndexComparer&lt; T &gt; comparer)</div><div class="ttdoc">Uses a binary search algorithm to quickly determine the index of the IIndexBlock<T> within &#39;blocks&#39; o...</div><div class="ttdef"><b>Definition:</b> <a href="BlockIndexBase__T_8cs_source.htm#l00327">BlockIndexBase_T.cs:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Property Documentation</h2>
<a class="anchor" id="a2f6c724ee5e177a3a6212873141023a3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">List&lt;<a class="el" href="interfaceDeveel_1_1Data_1_1Index_1_1IIndexBlock.htm">IIndexBlock</a>&lt;T&gt; &gt; <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Blocks</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00118">118</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a6d04e42347f31f08414d995a977e6ec7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.Count</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00122">122</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ab6854ee1cfea230b149e32a2e234c5c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.IsReadOnly</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00120">120</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ad26fdb3805aba7fc31d206dab271e2d8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classDeveel_1_1Data_1_1Index_1_1BlockIndexBase.htm">Deveel.Data.Index.BlockIndexBase</a>&lt; T &gt;.this[int index]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="BlockIndexBase__T_8cs_source.htm#l00124">124</a> of file <a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Index/<a class="el" href="BlockIndexBase__T_8cs_source.htm">BlockIndexBase_T.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
