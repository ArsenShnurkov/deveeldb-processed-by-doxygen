<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: /var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Sql.Parser/SqlBinaryExpressionNode.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_4864ba48851acdac1f58aca03434e433.htm">deveeldb.git</a></li><li class="navelem"><a class="el" href="dir_16ba1103c766f180fec75258526d70ac.htm">src</a></li><li class="navelem"><a class="el" href="dir_bfbf8ac8e8a34c8957f32a767b16c329.htm">deveeldb</a></li><li class="navelem"><a class="el" href="dir_f0ea0b9ea9aae2e0e9b9dfca26eb78a8.htm">Deveel.Data.Sql.Parser</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SqlBinaryExpressionNode.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SqlBinaryExpressionNode_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  Copyright 2010-2015 Deveel</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//        http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Linq;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceSystem.htm">System</a>.Text;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceDeveel.htm">Deveel</a>.Data.Sql.Parser {</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm">   25</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm">SqlBinaryExpressionNode</a> : <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlNode.htm">SqlNode</a>, <a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode.htm">IExpressionNode</a> {</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a03740400929a86045a80c806cec730f9">   26</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">bool</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a03740400929a86045a80c806cec730f9">leftSeen</a>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a4aae1dcafdcb9dee95f9cd9e3581343c">   31</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode.htm">IExpressionNode</a> Left { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a1a6812fb666f5f41018308524e45b442">   36</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode.htm">IExpressionNode</a> Right { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a9fe0a0e63528b46b52f7ee2b116dd048">   42</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> IsAll { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a5a9d4ddbac8cbc8a3a04959ec3d11aba">   48</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">bool</span> IsAny { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#ad5125dcee1ece1c77801f0e597a70a94">   54</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">string</span> Operator { <span class="keyword">get</span>; <span class="keyword">private</span> set; }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a3d356c2dab366576390a8dd3ea6a7e40">   57</a></span>&#160;        <span class="keyword">protected</span> <span class="keyword">override</span> <a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">ISqlNode</a> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a3d356c2dab366576390a8dd3ea6a7e40">OnChildNode</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">ISqlNode</a> node) {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">if</span> (node is <a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode.htm">IExpressionNode</a>) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">if</span> (!leftSeen) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    Left = (IExpressionNode) node;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                    leftSeen = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                    Right = (IExpressionNode) node;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    leftSeen = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (node.<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a15af4a9f55b9d03b1265f1b3f0fb10d7">NodeName</a> == <span class="stringliteral">&quot;binary_op&quot;</span>) {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                GetOperator(node);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> base.OnChildNode(node);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a15dff25f7e71d8939a5285789fd3e002">   73</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a15dff25f7e71d8939a5285789fd3e002">GetOperator</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">ISqlNode</a> node) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            var childNode = node.<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a156305a37aea852103bbae1642bfd8f8">ChildNodes</a>.First();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">if</span> (childNode.NodeName == <span class="stringliteral">&quot;binary_op_simple&quot;</span>) {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                var op = childNode.ChildNodes.First();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                Operator = ((<a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlKeyNode.htm">SqlKeyNode</a>) op).Text;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (childNode.NodeName == <span class="stringliteral">&quot;logical_op&quot;</span>) {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                GetLogicalOp(childNode); </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (node.<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a15af4a9f55b9d03b1265f1b3f0fb10d7">NodeName</a> == <span class="stringliteral">&quot;any_op&quot;</span> ||</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                       node.<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a15af4a9f55b9d03b1265f1b3f0fb10d7">NodeName</a> == <span class="stringliteral">&quot;all_op&quot;</span>) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                GetAnyAllOp(childNode);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (childNode.NodeName == <span class="stringliteral">&quot;subquery_op&quot;</span>) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                GetLogicalOp(childNode);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a2c391fe7c71ba9a938e468be7ed13598">   88</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a2c391fe7c71ba9a938e468be7ed13598">GetLogicalOp</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">ISqlNode</a> node) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            var sb = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">foreach</span> (var childNode <span class="keywordflow">in</span> node.ChildNodes) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">if</span> (childNode is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlKeyNode.htm">SqlKeyNode</a>) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    sb.Append(((SqlKeyNode) childNode).Text);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    sb.Append(<span class="stringliteral">&quot; &quot;</span>);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            Operator = sb.ToString().Trim();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a917694cd6299f3e8a3318c14ad911c34">  100</a></span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a917694cd6299f3e8a3318c14ad911c34">GetAnyAllOp</a>(<a class="code" href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">ISqlNode</a> node) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            var sb = <span class="keyword">new</span> StringBuilder();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">foreach</span> (var childNode <span class="keywordflow">in</span> node.ChildNodes) {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">if</span> (childNode is <a class="code" href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlKeyNode.htm">SqlKeyNode</a>) {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    var anyOrAll = ((SqlKeyNode) childNode).Text;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keywordflow">if</span> (String.Equals(anyOrAll, <span class="stringliteral">&quot;ALL&quot;</span>, StringComparison.OrdinalIgnoreCase)) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        IsAll = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (String.Equals(anyOrAll, <span class="stringliteral">&quot;ANY&quot;</span>, StringComparison.OrdinalIgnoreCase)) {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                        IsAny = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (childNode.NodeName == <span class="stringliteral">&quot;binary_op_simple&quot;</span>) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    var op = childNode.ChildNodes.First();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    sb.Append(((SqlKeyNode) op).Text);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            Operator = sb.ToString();</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm_a03740400929a86045a80c806cec730f9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a03740400929a86045a80c806cec730f9">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode.leftSeen</a></div><div class="ttdeci">bool leftSeen</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00026">SqlBinaryExpressionNode.cs:26</a></div></div>
<div class="ttc" id="namespaceDeveel_htm"><div class="ttname"><a href="namespaceDeveel.htm">Deveel</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm">Deveel.Data.Sql.Parser.ISqlNode</a></div><div class="ttdoc">Defines the contract for nodes in an AST model for a SQL grammar analysis and parsing. </div><div class="ttdef"><b>Definition:</b> <a href="ISqlNode_8cs_source.htm#l00025">ISqlNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlKeyNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlKeyNode.htm">Deveel.Data.Sql.Parser.SqlKeyNode</a></div><div class="ttdoc">Represents a keyword found during the compilation of a source text. </div><div class="ttdef"><b>Definition:</b> <a href="SqlKeyNode_8cs_source.htm#l00025">SqlKeyNode.cs:25</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode_htm_a15af4a9f55b9d03b1265f1b3f0fb10d7"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a15af4a9f55b9d03b1265f1b3f0fb10d7">Deveel.Data.Sql.Parser.ISqlNode.NodeName</a></div><div class="ttdeci">string NodeName</div><div class="ttdoc">Gets the name of the node analyzed from the parser. </div><div class="ttdef"><b>Definition:</b> <a href="ISqlNode_8cs_source.htm#l00029">ISqlNode.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm_a917694cd6299f3e8a3318c14ad911c34"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a917694cd6299f3e8a3318c14ad911c34">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode.GetAnyAllOp</a></div><div class="ttdeci">void GetAnyAllOp(ISqlNode node)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00100">SqlBinaryExpressionNode.cs:100</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm_a2c391fe7c71ba9a938e468be7ed13598"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a2c391fe7c71ba9a938e468be7ed13598">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode.GetLogicalOp</a></div><div class="ttdeci">void GetLogicalOp(ISqlNode node)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00088">SqlBinaryExpressionNode.cs:88</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode_htm_a156305a37aea852103bbae1642bfd8f8"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1ISqlNode.htm#a156305a37aea852103bbae1642bfd8f8">Deveel.Data.Sql.Parser.ISqlNode.ChildNodes</a></div><div class="ttdeci">IEnumerable&lt; ISqlNode &gt; ChildNodes</div><div class="ttdoc">Gets a read-only enumeration of the children nodes, if any. </div><div class="ttdef"><b>Definition:</b> <a href="ISqlNode_8cs_source.htm#l00039">ISqlNode.cs:39</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm_a3d356c2dab366576390a8dd3ea6a7e40"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a3d356c2dab366576390a8dd3ea6a7e40">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode.OnChildNode</a></div><div class="ttdeci">override ISqlNode OnChildNode(ISqlNode node)</div><div class="ttdoc">During the initialization of the node from the parser, this method is called for every child node add...</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00057">SqlBinaryExpressionNode.cs:57</a></div></div>
<div class="ttc" id="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode_htm"><div class="ttname"><a href="interfaceDeveel_1_1Data_1_1Sql_1_1Parser_1_1IExpressionNode.htm">Deveel.Data.Sql.Parser.IExpressionNode</a></div><div class="ttdoc">This interface acts like a marker that indicates if a ISqlNode represents a SQL expression. </div><div class="ttdef"><b>Definition:</b> <a href="IExpressionNode_8cs_source.htm#l00024">IExpressionNode.cs:24</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode</a></div><div class="ttdoc">Represents an expression that evaluates between two other expressions. </div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00025">SqlBinaryExpressionNode.cs:25</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode_htm_a15dff25f7e71d8939a5285789fd3e002"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlBinaryExpressionNode.htm#a15dff25f7e71d8939a5285789fd3e002">Deveel.Data.Sql.Parser.SqlBinaryExpressionNode.GetOperator</a></div><div class="ttdeci">void GetOperator(ISqlNode node)</div><div class="ttdef"><b>Definition:</b> <a href="SqlBinaryExpressionNode_8cs_source.htm#l00073">SqlBinaryExpressionNode.cs:73</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlNode_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Sql_1_1Parser_1_1SqlNode.htm">Deveel.Data.Sql.Parser.SqlNode</a></div><div class="ttdoc">The default implementation of ISqlNode, that is a node in the text analysis parsing of SQL commands...</div><div class="ttdef"><b>Definition:</b> <a href="SqlNode_8cs_source.htm#l00032">SqlNode.cs:32</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
