<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Store.StoreBase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Store.htm">Store</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pac-methods">Package Functions</a> &#124;
<a href="#properties">Properties</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="classDeveel_1_1Data_1_1Store_1_1StoreBase-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Store.StoreBase Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for Deveel.Data.Store.StoreBase:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classDeveel_1_1Data_1_1Store_1_1StoreBase.png" usemap="#Deveel.Data.Store.StoreBase_map" alt=""/>
  <map id="Deveel.Data.Store.StoreBase_map" name="Deveel.Data.Store.StoreBase_map">
<area href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm" title="A store is a resource where areas can be allocated and freed to store information (a memory allocator..." alt="Deveel.Data.Store.IStore" shape="rect" coords="0,56,206,80"/>
<area href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm" alt="Deveel.Data.Store.SingleFileStore" shape="rect" coords="0,168,206,192"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm">StoreArea</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a> that is backed by a <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm">StoreBase</a>.  <a href="classDeveel_1_1Data_1_1Store_1_1StoreBase_1_1StoreArea.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a79b93178e52ed198d47c8e763d8f95e8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a79b93178e52ed198d47c8e763d8f95e8">Open</a> ()</td></tr>
<tr class="separator:a79b93178e52ed198d47c8e763d8f95e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cd30093e6d372e3b33bf6fc28010441"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">Close</a> ()</td></tr>
<tr class="separator:a2cd30093e6d372e3b33bf6fc28010441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a856219ef6b432e96bad6ba7a203ab69b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Dispose</a> ()</td></tr>
<tr class="separator:a856219ef6b432e96bad6ba7a203ab69b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98940aaca42749a5d6f45a3bd372e886"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886">CreateArea</a> (long size)</td></tr>
<tr class="memdesc:a98940aaca42749a5d6f45a3bd372e886"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates a block of memory in the store of the specified size and returns an <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a> object that can be used to initialize the contents of the area.  <a href="#a98940aaca42749a5d6f45a3bd372e886">More...</a><br /></td></tr>
<tr class="separator:a98940aaca42749a5d6f45a3bd372e886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77d1cf74383b6bac24918e8e35fc0dfa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a77d1cf74383b6bac24918e8e35fc0dfa">DeleteArea</a> (long id)</td></tr>
<tr class="memdesc:a77d1cf74383b6bac24918e8e35fc0dfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes an area that was previously allocated by the <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886" title="Allocates a block of memory in the store of the specified size and returns an IArea object that can b...">CreateArea</a> method by the area id.  <a href="#a77d1cf74383b6bac24918e8e35fc0dfa">More...</a><br /></td></tr>
<tr class="separator:a77d1cf74383b6bac24918e8e35fc0dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a21756bcf0a4b2b8b1b68a3fdf2a0d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5a21756bcf0a4b2b8b1b68a3fdf2a0d5">GetArea</a> (long id, bool readOnly)</td></tr>
<tr class="memdesc:a5a21756bcf0a4b2b8b1b68a3fdf2a0d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an object that allows for the contents of an area (represented by the <em>id</em>  parameter) to be Read.  <a href="#a5a21756bcf0a4b2b8b1b68a3fdf2a0d5">More...</a><br /></td></tr>
<tr class="separator:a5a21756bcf0a4b2b8b1b68a3fdf2a0d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0371a4da25f016fb895e36e5984565f8"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0371a4da25f016fb895e36e5984565f8">Lock</a> ()</td></tr>
<tr class="memdesc:a0371a4da25f016fb895e36e5984565f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called before the start of a sequence of Write commands between consistant states of some data structure represented by the store.  <a href="#a0371a4da25f016fb895e36e5984565f8">More...</a><br /></td></tr>
<tr class="separator:a0371a4da25f016fb895e36e5984565f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20c87e2c5e61fd48b283a0bd7eaf4e18"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a20c87e2c5e61fd48b283a0bd7eaf4e18">Unlock</a> ()</td></tr>
<tr class="memdesc:a20c87e2c5e61fd48b283a0bd7eaf4e18"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called after the end of a sequence of Write commands between consistant states of some data structure represented by the store.  <a href="#a20c87e2c5e61fd48b283a0bd7eaf4e18">More...</a><br /></td></tr>
<tr class="separator:a20c87e2c5e61fd48b283a0bd7eaf4e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8726d586aad04152dcc075687180a2c"><td class="memItemLeft" align="right" valign="top">IEnumerable&lt; long &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8726d586aad04152dcc075687180a2c">GetAllAreas</a> ()</td></tr>
<tr class="memdesc:ac8726d586aad04152dcc075687180a2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a complete list of pointers to all areas in the <a class="el" href="namespaceDeveel_1_1Data_1_1Store.htm">Store</a> as long objects sorted from lowest pointer to highest.  <a href="#ac8726d586aad04152dcc075687180a2c">More...</a><br /></td></tr>
<tr class="separator:ac8726d586aad04152dcc075687180a2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ab0de0d59ca4f102abb09cbb5cf809bdb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab0de0d59ca4f102abb09cbb5cf809bdb">StoreBase</a> (bool isReadOnly)</td></tr>
<tr class="separator:ab0de0d59ca4f102abb09cbb5cf809bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd39ec7976495868479bad6765c2e418"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a> (long offset, long[] header)</td></tr>
<tr class="separator:abd39ec7976495868479bad6765c2e418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9400712dff6cb92771dd0ea77d2c9c3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">SplitArea</a> (long offset, long newBoundary)</td></tr>
<tr class="separator:ac9400712dff6cb92771dd0ea77d2c9c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c8be539420dce508effd29b22a3d17"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a05c8be539420dce508effd29b22a3d17">SetDataAreaSize</a> (long length)</td></tr>
<tr class="separator:a05c8be539420dce508effd29b22a3d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a477157c487b4db565a6cc8d1c5c54e4e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a477157c487b4db565a6cc8d1c5c54e4e">Dispose</a> (bool disposing)</td></tr>
<tr class="separator:a477157c487b4db565a6cc8d1c5c54e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a926d63c6ac1c759c0d8ea22e112d7916"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a926d63c6ac1c759c0d8ea22e112d7916">OpenStore</a> (bool readOnly)</td></tr>
<tr class="separator:a926d63c6ac1c759c0d8ea22e112d7916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3304e781e8b0792d4ea1b2699a137c0"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae3304e781e8b0792d4ea1b2699a137c0">CloseStore</a> ()</td></tr>
<tr class="separator:ae3304e781e8b0792d4ea1b2699a137c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a637f9ff7443b79d42673c3eb6fed612e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a637f9ff7443b79d42673c3eb6fed612e">ReadByte</a> (long offset)</td></tr>
<tr class="separator:a637f9ff7443b79d42673c3eb6fed612e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41466843f4855373cb32b299cbb733c9"><td class="memItemLeft" align="right" valign="top">abstract int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a> (long offset, byte[] buffer, int index, int length)</td></tr>
<tr class="separator:a41466843f4855373cb32b299cbb733c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b0194c00e5a16f2035968a26d3e7bb5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a> (long offset, byte value)</td></tr>
<tr class="separator:a7b0194c00e5a16f2035968a26d3e7bb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6456aec5f79d5202c3086b27f9a9a3"><td class="memItemLeft" align="right" valign="top">abstract void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe6456aec5f79d5202c3086b27f9a9a3">Write</a> (long offset, byte[] buffer, int index, int length)</td></tr>
<tr class="separator:abe6456aec5f79d5202c3086b27f9a9a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pac-methods"></a>
Package Functions</h2></td></tr>
<tr class="memitem:aac64c691f8dfcf5fc043f53dcaa974f1"><td class="memItemLeft" align="right" valign="top">IEnumerable&lt; long &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aac64c691f8dfcf5fc043f53dcaa974f1">FindAllocatedAreasNotIn</a> (List&lt; long &gt; usedAreas)</td></tr>
<tr class="separator:aac64c691f8dfcf5fc043f53dcaa974f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="properties"></a>
Properties</h2></td></tr>
<tr class="memitem:a47ad56242f9c9de2fb0ecc7719c3c634"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a><code> [get, set]</code></td></tr>
<tr class="separator:a47ad56242f9c9de2fb0ecc7719c3c634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a69159c8174532acbf93e6193cfc0a3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">IsReadOnly</a><code> [get, private set]</code></td></tr>
<tr class="separator:a2a69159c8174532acbf93e6193cfc0a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8c18d2cb4a8b71a4d83f6ce79943d43"><td class="memItemLeft" align="right" valign="top">abstract long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a><code> [get]</code></td></tr>
<tr class="separator:ab8c18d2cb4a8b71a4d83f6ce79943d43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc9bbd62a5f278719dc0145f263087d6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">ClosedClean</a><code> [get, private set]</code></td></tr>
<tr class="separator:adc9bbd62a5f278719dc0145f263087d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header properties_interfaceDeveel_1_1Data_1_1Store_1_1IStore"><td colspan="2" onclick="javascript:toggleInherit('properties_interfaceDeveel_1_1Data_1_1Store_1_1IStore')"><img src="closed.png" alt="-"/>&#160;Properties inherited from <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm">Deveel.Data.Store.IStore</a></td></tr>
<tr class="memitem:a3078ce310c34041f9451549016235a37 inherit properties_interfaceDeveel_1_1Data_1_1Store_1_1IStore"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a3078ce310c34041f9451549016235a37">ClosedClean</a><code> [get]</code></td></tr>
<tr class="memdesc:a3078ce310c34041f9451549016235a37 inherit properties_interfaceDeveel_1_1Data_1_1Store_1_1IStore"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if the store was closed cleanly last time was accessed.  <a href="#a3078ce310c34041f9451549016235a37">More...</a><br /></td></tr>
<tr class="separator:a3078ce310c34041f9451549016235a37 inherit properties_interfaceDeveel_1_1Data_1_1Store_1_1IStore"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:acf2ef79394e0249328fa813fc60b5854"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf2ef79394e0249328fa813fc60b5854">~StoreBase</a> ()</td></tr>
<tr class="separator:acf2ef79394e0249328fa813fc60b5854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af52a7336bf64711adc4bf1f577a527ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">CheckOffset</a> (long offset)</td></tr>
<tr class="separator:af52a7336bf64711adc4bf1f577a527ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc7e71cdd308489c801075f66e9b35d5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">ReadBins</a> ()</td></tr>
<tr class="separator:afc7e71cdd308489c801075f66e9b35d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f8ad70cd7a824f84d6e0aa7271dd29"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa9f8ad70cd7a824f84d6e0aa7271dd29">WriteAllBins</a> ()</td></tr>
<tr class="separator:aa9f8ad70cd7a824f84d6e0aa7271dd29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3a11524f8d72be7c7faf0a91dc4361"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a> (int index)</td></tr>
<tr class="separator:a8b3a11524f8d72be7c7faf0a91dc4361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00a3f2b0e6503ce1c5fd035535e4eb5b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">AddToBinChain</a> (long pointer, long size)</td></tr>
<tr class="separator:a00a3f2b0e6503ce1c5fd035535e4eb5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5717180a15a0c07d035c320274705530"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">RemoveFromBinChain</a> (long offset, long size)</td></tr>
<tr class="separator:a5717180a15a0c07d035c320274705530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04413e690f21483564c32b996c2186d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">Free</a> (long pointer)</td></tr>
<tr class="separator:a04413e690f21483564c32b996c2186d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8ee7e9d714cfb2a3db12e79e2e4e283"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">GetPreviousAreaHeader</a> (long offset, long[] header)</td></tr>
<tr class="separator:ac8ee7e9d714cfb2a3db12e79e2e4e283"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5894a234b11e2c39d74a18778867244"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">GetNextAreaHeader</a> (long offset, long[] header)</td></tr>
<tr class="separator:ae5894a234b11e2c39d74a18778867244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18e40aadbc7dd999b25276881790e19b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a> (long offset, long[] header, bool writeHeaders)</td></tr>
<tr class="separator:a18e40aadbc7dd999b25276881790e19b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2596f3b96dccbbe1c4e9f3ff11b42f48"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">CoalesceArea</a> (long offset, long size)</td></tr>
<tr class="separator:a2596f3b96dccbbe1c4e9f3ff11b42f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b3295a740c1a2fe7d7c9bfa7edf5de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">CropArea</a> (long offset, long allocatedSize)</td></tr>
<tr class="separator:a56b3295a740c1a2fe7d7c9bfa7edf5de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e13e91bb574fff6bdf022168aafb7e4"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">Alloc</a> (long size)</td></tr>
<tr class="separator:a9e13e91bb574fff6bdf022168aafb7e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac99362fa22ac4c9e4ed982870e33e030"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">ExpandDataArea</a> (long minSize)</td></tr>
<tr class="separator:ac99362fa22ac4c9e4ed982870e33e030"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4c6c81971a96a2af0c6d026b2bf28d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">Init</a> ()</td></tr>
<tr class="separator:ac4c6c81971a96a2af0c6d026b2bf28d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a993f2ad0ef93324bc5c1a20a6943568d"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">MinimumBinSizeIndex</a> (long size)</td></tr>
<tr class="separator:a993f2ad0ef93324bc5c1a20a6943568d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7eaa03a2eb0a095e57e67e4e1a9473e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae7eaa03a2eb0a095e57e67e4e1a9473e">IsValidBoundarySize</a> (long size)</td></tr>
<tr class="separator:ae7eaa03a2eb0a095e57e67e4e1a9473e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ac06e4e7bc35cea51328a69339f791e29"><td class="memItemLeft" align="right" valign="top">long[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a></td></tr>
<tr class="separator:ac06e4e7bc35cea51328a69339f791e29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c1a6c21d6fdefb1b4d6e3fa41343f61"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">totalAllocatedSpace</a></td></tr>
<tr class="separator:a0c1a6c21d6fdefb1b4d6e3fa41343f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed09793e31d5728a3194071fa7c4d39"><td class="memItemLeft" align="right" valign="top">readonly byte[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a> = new byte[128 * 8]</td></tr>
<tr class="separator:a6ed09793e31d5728a3194071fa7c4d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a254d312cf16a570c10ff607302972a3c"><td class="memItemLeft" align="right" valign="top">const long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a> = Int64.MaxValue</td></tr>
<tr class="separator:a254d312cf16a570c10ff607302972a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee1fd161c2d4c5330677649dfd6e40c"><td class="memItemLeft" align="right" valign="top">const long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a> = Int64.MinValue</td></tr>
<tr class="separator:a8ee1fd161c2d4c5330677649dfd6e40c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6862bc09a9dbabd7569e29c37342c3e2"><td class="memItemLeft" align="right" valign="top">const long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6862bc09a9dbabd7569e29c37342c3e2">FixedAreaOffset</a> = 128</td></tr>
<tr class="separator:a6862bc09a9dbabd7569e29c37342c3e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe7a397fba3a7a3073f66be13cb39aab"><td class="memItemLeft" align="right" valign="top">const long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a> = 256 + 1024 + 32</td></tr>
<tr class="separator:abe7a397fba3a7a3073f66be13cb39aab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f49853c19b25dd0b6d720f84e35c9a"><td class="memItemLeft" align="right" valign="top">const long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a> = 256</td></tr>
<tr class="separator:ac5f49853c19b25dd0b6d720f84e35c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac99eb83c8853b2fccc653a5ec60f2fd7"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">Magic</a> = 0x0AEAE91</td></tr>
<tr class="separator:ac99eb83c8853b2fccc653a5ec60f2fd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf969d7c3ab15eaf6b298c50e81cc5c8"><td class="memItemLeft" align="right" valign="top">readonly byte[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a> = new byte[16]</td></tr>
<tr class="separator:acf969d7c3ab15eaf6b298c50e81cc5c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b91b28cb645082130a46c8f5c7d1a48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">disposed</a></td></tr>
<tr class="separator:a2b91b28cb645082130a46c8f5c7d1a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr class="memitem:ad9a64d2f90187ee13f607c09b1f003b7"><td class="memItemLeft" align="right" valign="top">static readonly int[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">BinSizes</a></td></tr>
<tr class="separator:ad9a64d2f90187ee13f607c09b1f003b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa53570b7c20e1bbb25c370b014e95836"><td class="memItemLeft" align="right" valign="top">static readonly int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> = BinSizes.Length</td></tr>
<tr class="separator:aa53570b7c20e1bbb25c370b014e95836"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cfcf79aae1989da82d41104fbe878d1"><td class="memItemLeft" align="right" valign="top">static readonly int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0cfcf79aae1989da82d41104fbe878d1">MaxBinSize</a> = <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">BinSizes</a>[<a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> - 1]</td></tr>
<tr class="separator:a0cfcf79aae1989da82d41104fbe878d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00025">25</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab0de0d59ca4f102abb09cbb5cf809bdb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Store.StoreBase.StoreBase </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isReadOnly</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00061">61</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                             {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a> = <span class="keyword">new</span> <span class="keywordtype">long</span>[<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> + 1];</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> + 1; ++i) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[i] = -1L;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = -1;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">IsReadOnly</a> = isReadOnly;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a47ad56242f9c9de2fb0ecc7719c3c634"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">Deveel.Data.Store.StoreBase.WildernessOffset</a></div><div class="ttdeci">long WildernessOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00076">StoreBase.cs:76</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2a69159c8174532acbf93e6193cfc0a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">Deveel.Data.Store.StoreBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00078">StoreBase.cs:78</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_aa53570b7c20e1bbb25c370b014e95836"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">Deveel.Data.Store.StoreBase.BinSizeEntries</a></div><div class="ttdeci">static readonly int BinSizeEntries</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00046">StoreBase.cs:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acf2ef79394e0249328fa813fc60b5854"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Deveel.Data.Store.StoreBase.~StoreBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00072">72</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                     {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Dispose</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a856219ef6b432e96bad6ba7a203ab69b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Deveel.Data.Store.StoreBase.Dispose</a></div><div class="ttdeci">void Dispose()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00738">StoreBase.cs:738</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a00a3f2b0e6503ce1c5fd035535e4eb5b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.AddToBinChain </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00125">125</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                                            {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">CheckOffset</a>(pointer);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// What bin would this area fit into?</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">int</span> binChainIndex = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">MinimumBinSizeIndex</a>(size);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordtype">long</span> curOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[binChainIndex];</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">if</span> (curOffset == -1) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="comment">// If the bin chain has no elements,</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                headerInfo[0] = (size | <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                headerInfo[1] = -1;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[binChainIndex] = pointer;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a>(binChainIndex);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordtype">bool</span> inserted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordtype">long</span> lastOffset = -1;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordtype">int</span> searches = 0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">while</span> (curOffset != -1 &amp;&amp; inserted == <span class="keyword">false</span>) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="comment">// Get the current offset</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(curOffset, headerInfo);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keywordtype">long</span> header = headerInfo[0];</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keywordtype">long</span> next = headerInfo[1];</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="comment">// Assert - the header must have deleted flag</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="keywordflow">if</span> ((header &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>) == 0)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area not marked as deleted.&quot;</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="keywordtype">long</span> areaSize = header ^ <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keywordflow">if</span> (areaSize &gt;= size || searches &gt;= 12) {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <span class="comment">// Insert if the area size is &gt;= than the size we are adding.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        <span class="comment">// Set the previous header to point to this</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        <span class="keywordtype">long</span> previous = lastOffset;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <span class="comment">// Set up the deleted area</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        headerInfo[0] = (size | <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        headerInfo[1] = curOffset;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        <span class="keywordflow">if</span> (lastOffset != -1) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            <span class="comment">// Set the previous input the chain to point to the deleted area</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(previous, headerInfo);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                            headerInfo[1] = pointer;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(previous, headerInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            <span class="comment">// Otherwise set the head bin item</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[binChainIndex] = pointer;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a>(binChainIndex);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        inserted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    lastOffset = curOffset;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    curOffset = next;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    ++searches;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="comment">// If we reach the end and we haven&#39;t inserted,</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">if</span> (!inserted) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="comment">// Set the new deleted area.</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    headerInfo[0] = (size | <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    headerInfo[1] = -1;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(pointer, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="comment">// Set the previous entry to this</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(lastOffset, headerInfo);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    headerInfo[1] = pointer;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(lastOffset, headerInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a993f2ad0ef93324bc5c1a20a6943568d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">Deveel.Data.Store.StoreBase.MinimumBinSizeIndex</a></div><div class="ttdeci">static int MinimumBinSizeIndex(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00089">StoreBase.cs:89</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8ee1fd161c2d4c5330677649dfd6e40c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">Deveel.Data.Store.StoreBase.DeletedFlag</a></div><div class="ttdeci">const long DeletedFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00050">StoreBase.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a18e40aadbc7dd999b25276881790e19b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">Deveel.Data.Store.StoreBase.ReboundArea</a></div><div class="ttdeci">void ReboundArea(long offset, long[] header, bool writeHeaders)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00350">StoreBase.cs:350</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_af52a7336bf64711adc4bf1f577a527ec"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#af52a7336bf64711adc4bf1f577a527ec">Deveel.Data.Store.StoreBase.CheckOffset</a></div><div class="ttdeci">void CheckOffset(long offset)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00082">StoreBase.cs:82</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8b3a11524f8d72be7c7faf0a91dc4361"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">Deveel.Data.Store.StoreBase.WriteBinIndex</a></div><div class="ttdeci">void WriteBinIndex(int index)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00118">StoreBase.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9e13e91bb574fff6bdf022168aafb7e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.Alloc </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00408">408</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                      {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="keywordflow">if</span> (size &lt; 0)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Negative size allocation&quot;</span>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="comment">// Add 16 bytes for headers</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            size = size + 16;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="comment">// If size &lt; 32, make size = 32</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="keywordflow">if</span> (size &lt; 32)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                size = 32;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <span class="comment">// Round all sizes up to the nearest 8</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="keywordtype">long</span> d = size &amp; 0x07L;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">if</span> (d != 0)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                size = size + (8 - d);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordtype">long</span> realAllocSize = size;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// Search the free bin list for the first bin that matches the given size.</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordtype">int</span> binChainIndex;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">if</span> (size &gt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0cfcf79aae1989da82d41104fbe878d1">MaxBinSize</a>) {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                binChainIndex = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a>;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                <span class="keywordtype">int</span> i = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">MinimumBinSizeIndex</a>(size);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                binChainIndex = i;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="comment">// Search the bins until we find the first area that is the nearest fit to</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">// the size requested.</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordtype">int</span> foundBinIndex = -1;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <span class="keywordtype">long</span> prevOffset = -1;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = binChainIndex;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                i &lt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> + 1 &amp;&amp; foundBinIndex == -1;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                ++i) {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordtype">long</span> curOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[i];</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">if</span> (curOffset != -1) {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    <span class="keywordflow">if</span> (!first) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <span class="comment">// Pick this..</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        foundBinIndex = i;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        prevOffset = -1;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        <span class="comment">// Search this bin for the first that&#39;s big enough.</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="comment">// We only search the first 12 entries input the bin before giving up.</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        <span class="keywordtype">long</span> lastOffset = -1;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        <span class="keywordtype">int</span> searches = 0;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        <span class="keywordflow">while</span> (curOffset != -1 &amp;&amp;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                               foundBinIndex == -1 &amp;&amp;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                               searches &lt; 12) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(curOffset, headerInfo);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            <span class="keywordtype">long</span> areaSize = (headerInfo[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            <span class="comment">// Is this area is greater or equal than the required size</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                            <span class="comment">// and is not the wilderness area, pick it.</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                            <span class="keywordflow">if</span> (curOffset != <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> &amp;&amp; areaSize &gt;= size) {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                foundBinIndex = i;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                prevOffset = lastOffset;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                            }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                            <span class="comment">// Go to next input chain.</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            lastOffset = curOffset;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            curOffset = headerInfo[1];</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            ++searches;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                first = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <span class="comment">// If no area can be recycled,</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">if</span> (foundBinIndex == -1) {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                <span class="comment">// Allocate a new area of the given size.</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="comment">// If there is a wilderness, grow the wilderness area to the new size,</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                <span class="keywordtype">long</span> workingOffset;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                <span class="keywordtype">long</span> sizeToGrow;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                <span class="keywordtype">long</span> currentAreaSize;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> != -1) {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    workingOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a>;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a>, headerInfo);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    <span class="keywordtype">long</span> wildernessSize = (headerInfo[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    <span class="comment">// Remove this from the bins</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">RemoveFromBinChain</a>(workingOffset, wildernessSize);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                    <span class="comment">// For safety, we set wilderness_pointer to -1</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = -1;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                    sizeToGrow = size - wildernessSize;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    currentAreaSize = wildernessSize;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                    <span class="comment">// wilderness_pointer == -1 so add to the end of the data area.</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    workingOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    sizeToGrow = size;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    currentAreaSize = 0;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordtype">long</span> expandedSize = 0;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keywordflow">if</span> (sizeToGrow &gt; 0) {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    <span class="comment">// Expand the data area to the new size.</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                    expandedSize = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">ExpandDataArea</a>(sizeToGrow);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// Coalesce the new area to the given size</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">CoalesceArea</a>(workingOffset, currentAreaSize + expandedSize);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="comment">// crop the area</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">CropArea</a>(workingOffset, size);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="comment">// Add to the total allocated space</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">totalAllocatedSpace</a> += realAllocSize;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">return</span> workingOffset;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <span class="comment">// An area is taken from the bins,</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                <span class="keywordtype">long</span> freeAreaOffset;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                <span class="comment">// Remove this area from the bin chain and possibly add any excess space</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                <span class="comment">// left over to a new bin.</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <span class="keywordflow">if</span> (prevOffset == -1) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    freeAreaOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[foundBinIndex];</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(freeAreaOffset, headerInfo);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[foundBinIndex] = headerInfo[1];</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a>(foundBinIndex);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(prevOffset, headerInfo2);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    freeAreaOffset = headerInfo2[1];</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(freeAreaOffset, headerInfo);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    headerInfo2[1] = headerInfo[1];</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(prevOffset, headerInfo2, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <span class="comment">// Reset the header of the recycled area.</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                headerInfo[0] = (headerInfo[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(freeAreaOffset, headerInfo, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                <span class="comment">// Crop the area to the given size.</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">CropArea</a>(freeAreaOffset, size);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                <span class="comment">// Add to the total allocated space</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">totalAllocatedSpace</a> += realAllocSize;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keywordflow">return</span> freeAreaOffset;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a0c1a6c21d6fdefb1b4d6e3fa41343f61"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">Deveel.Data.Store.StoreBase.totalAllocatedSpace</a></div><div class="ttdeci">long totalAllocatedSpace</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00027">StoreBase.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a56b3295a740c1a2fe7d7c9bfa7edf5de"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a56b3295a740c1a2fe7d7c9bfa7edf5de">Deveel.Data.Store.StoreBase.CropArea</a></div><div class="ttdeci">void CropArea(long offset, long allocatedSize)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00372">StoreBase.cs:372</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a993f2ad0ef93324bc5c1a20a6943568d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">Deveel.Data.Store.StoreBase.MinimumBinSizeIndex</a></div><div class="ttdeci">static int MinimumBinSizeIndex(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00089">StoreBase.cs:89</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a18e40aadbc7dd999b25276881790e19b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">Deveel.Data.Store.StoreBase.ReboundArea</a></div><div class="ttdeci">void ReboundArea(long offset, long[] header, bool writeHeaders)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00350">StoreBase.cs:350</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a47ad56242f9c9de2fb0ecc7719c3c634"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">Deveel.Data.Store.StoreBase.WildernessOffset</a></div><div class="ttdeci">long WildernessOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00076">StoreBase.cs:76</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a0cfcf79aae1989da82d41104fbe878d1"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0cfcf79aae1989da82d41104fbe878d1">Deveel.Data.Store.StoreBase.MaxBinSize</a></div><div class="ttdeci">static readonly int MaxBinSize</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00047">StoreBase.cs:47</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2596f3b96dccbbe1c4e9f3ff11b42f48"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">Deveel.Data.Store.StoreBase.CoalesceArea</a></div><div class="ttdeci">void CoalesceArea(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00361">StoreBase.cs:361</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a5717180a15a0c07d035c320274705530"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">Deveel.Data.Store.StoreBase.RemoveFromBinChain</a></div><div class="ttdeci">void RemoveFromBinChain(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00205">StoreBase.cs:205</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8b3a11524f8d72be7c7faf0a91dc4361"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">Deveel.Data.Store.StoreBase.WriteBinIndex</a></div><div class="ttdeci">void WriteBinIndex(int index)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00118">StoreBase.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac99362fa22ac4c9e4ed982870e33e030"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99362fa22ac4c9e4ed982870e33e030">Deveel.Data.Store.StoreBase.ExpandDataArea</a></div><div class="ttdeci">long ExpandDataArea(long minSize)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00564">StoreBase.cs:564</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_aa53570b7c20e1bbb25c370b014e95836"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">Deveel.Data.Store.StoreBase.BinSizeEntries</a></div><div class="ttdeci">static readonly int BinSizeEntries</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00046">StoreBase.cs:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af52a7336bf64711adc4bf1f577a527ec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.CheckOffset </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00082">82</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                              {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span> (offset &lt; DataAreaOffset || offset &gt;= <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">String</a>.Format(<span class="stringliteral">&quot;The offset is out of range ({0} &gt; {1} &gt; {2})&quot;</span>, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>, offset,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a27118326006d3829667a400ad23d5d98">Deveel.Data.Types.SqlTypeCode.String</a></div><div class="ttdoc">A long string in the system. </div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2cd30093e6d372e3b33bf6fc28010441"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00728">728</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                            {</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                <span class="comment">// Mark the file as closed</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">IsReadOnly</a>)</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(16, 0);</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae3304e781e8b0792d4ea1b2699a137c0">CloseStore</a>();</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            }</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ae3304e781e8b0792d4ea1b2699a137c0"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae3304e781e8b0792d4ea1b2699a137c0">Deveel.Data.Store.StoreBase.CloseStore</a></div><div class="ttdeci">abstract void CloseStore()</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2a69159c8174532acbf93e6193cfc0a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">Deveel.Data.Store.StoreBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00078">StoreBase.cs:78</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae3304e781e8b0792d4ea1b2699a137c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.CloseStore </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#ade881f7063f38d17b929d01c695e7619">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="a2596f3b96dccbbe1c4e9f3ff11b42f48"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.CoalesceArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00361">361</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                                          {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(size, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// ISSUE: Boundary alteration is a moment when corruption could occur.</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="comment">//   There are two seeks and writes here and when we are setting the</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="comment">//   end points, there is a risk of failure.</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>((offset + size) - 8, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a98940aaca42749a5d6f45a3bd372e886"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> Deveel.Data.Store.StoreBase.CreateArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates a block of memory in the store of the specified size and returns an <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a> object that can be used to initialize the contents of the area. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>The amount of memory to allocate.</td></tr>
  </table>
  </dd>
</dl>
<p>Note that an area in the store is undefined until the <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm#af6f36e4f1b30b4f9701785d079af0e96">IArea.Flush</a> method is called in <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns an <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a> object that allows the area to be setup. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">System.IO.IOException</td><td>If not enough space available to create the area or the store is Read-only. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a2789b6b01534def9ff8e1d910dc08450">Deveel.Data.Store.IStore</a>.</p>

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00755">755</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                           {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <span class="keywordtype">long</span> pointer = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">Alloc</a>(size);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> StoreArea(<span class="keyword">this</span>, pointer, pointer + 8, <span class="keyword">false</span>, size);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a9e13e91bb574fff6bdf022168aafb7e4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a9e13e91bb574fff6bdf022168aafb7e4">Deveel.Data.Store.StoreBase.Alloc</a></div><div class="ttdeci">long Alloc(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00408">StoreBase.cs:408</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a56b3295a740c1a2fe7d7c9bfa7edf5de"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.CropArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>allocatedSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00372">372</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                               {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="comment">// Get the header info</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(offset, headerInfo);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            var header = headerInfo[0];</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            var freeAreaSize = header;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            var sizeDifference = freeAreaSize - allocatedSize;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            var isWilderness = (offset == <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a>);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="comment">// If the difference is greater than 512 bytes, add the excess space to</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="comment">// a free bin.</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">if</span> ((isWilderness &amp;&amp; sizeDifference &gt;= 32) || sizeDifference &gt;= 512) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="comment">// Split the area into two areas.</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">SplitArea</a>(offset, allocatedSize);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordtype">long</span> leftOverPointer = offset + allocatedSize;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="comment">// Add this area to the bin chain</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">AddToBinChain</a>(leftOverPointer, sizeDifference);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="comment">// If offset is the wilderness area, set this as the new wilderness</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                <span class="keywordflow">if</span> (isWilderness ||</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    (leftOverPointer + sizeDifference) &gt;= <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>) {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = leftOverPointer;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="comment">// If offset is the wilderness area, set wilderness to -1</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="keywordflow">if</span> (isWilderness) {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = -1;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac9400712dff6cb92771dd0ea77d2c9c3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac9400712dff6cb92771dd0ea77d2c9c3">Deveel.Data.Store.StoreBase.SplitArea</a></div><div class="ttdeci">void SplitArea(long offset, long newBoundary)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00585">StoreBase.cs:585</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a47ad56242f9c9de2fb0ecc7719c3c634"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">Deveel.Data.Store.StoreBase.WildernessOffset</a></div><div class="ttdeci">long WildernessOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00076">StoreBase.cs:76</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a00a3f2b0e6503ce1c5fd035535e4eb5b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">Deveel.Data.Store.StoreBase.AddToBinChain</a></div><div class="ttdeci">void AddToBinChain(long pointer, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00125">StoreBase.cs:125</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a77d1cf74383b6bac24918e8e35fc0dfa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.DeleteArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes an area that was previously allocated by the <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a98940aaca42749a5d6f45a3bd372e886" title="Allocates a block of memory in the store of the specified size and returns an IArea object that can b...">CreateArea</a> method by the area id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>The identifier of the area to delete.</td></tr>
  </table>
  </dd>
</dl>
<p>Once an area is deleted the resources may be reclaimed. The behaviour of this method is undefined if the id doesn't represent a valid area. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">IOException</td><td>If the id is invalid or the area can not otherwise by deleted. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a13816ddb6c9004ac9bc4249a74648ae3">Deveel.Data.Store.IStore</a>.</p>

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00762">762</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                        {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">Free</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a04413e690f21483564c32b996c2186d6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a04413e690f21483564c32b996c2186d6">Deveel.Data.Store.StoreBase.Free</a></div><div class="ttdeci">void Free(long pointer)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00245">StoreBase.cs:245</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a856219ef6b432e96bad6ba7a203ab69b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.Dispose </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00738">738</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                              {</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Dispose</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            GC.SuppressFinalize(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a856219ef6b432e96bad6ba7a203ab69b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a856219ef6b432e96bad6ba7a203ab69b">Deveel.Data.Store.StoreBase.Dispose</a></div><div class="ttdeci">void Dispose()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00738">StoreBase.cs:738</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a477157c487b4db565a6cc8d1c5c54e4e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Deveel.Data.Store.StoreBase.Dispose </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>disposing</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#af2a20c8711f91de7cccf6da7b083355c">Deveel.Data.Store.SingleFileStore</a>.</p>

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00745">745</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                                       {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">disposed</a>) {</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                <span class="keywordflow">if</span> (disposing) {</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">Close</a>();</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">disposed</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            }</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2cd30093e6d372e3b33bf6fc28010441"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2cd30093e6d372e3b33bf6fc28010441">Deveel.Data.Store.StoreBase.Close</a></div><div class="ttdeci">void Close()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00728">StoreBase.cs:728</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2b91b28cb645082130a46c8f5c7d1a48"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2b91b28cb645082130a46c8f5c7d1a48">Deveel.Data.Store.StoreBase.disposed</a></div><div class="ttdeci">bool disposed</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00743">StoreBase.cs:743</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac99362fa22ac4c9e4ed982870e33e030"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.ExpandDataArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>minSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00564">564</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                                  {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="comment">// Round all sizes up to the nearest 8</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="comment">// We grow only by a small amount if the area is small, and a large amount</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="comment">// if the area is large.</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordtype">long</span> overGrow = endOfDataArea / 64;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordtype">long</span> d = (overGrow &amp; 0x07L);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">if</span> (d != 0)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                overGrow = overGrow + (8 - d);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            overGrow = <a class="code" href="namespaceSystem.htm">System</a>.Math.Min(overGrow, 262144L);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">if</span> (overGrow &lt; 1024)</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                overGrow = 1024;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="keywordtype">long</span> growBy = minSize + overGrow;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <span class="keywordtype">long</span> newFileLength = endOfDataArea + growBy;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a05c8be539420dce508effd29b22a3d17">SetDataAreaSize</a>(newFileLength);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="keywordflow">return</span> growBy;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="namespaceSystem_htm"><div class="ttname"><a href="namespaceSystem.htm">System</a></div><div class="ttdef"><b>Definition:</b> <a href="NonSerializedAttribute_8cs_source.htm#l00003">NonSerializedAttribute.cs:3</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a05c8be539420dce508effd29b22a3d17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a05c8be539420dce508effd29b22a3d17">Deveel.Data.Store.StoreBase.SetDataAreaSize</a></div><div class="ttdeci">abstract void SetDataAreaSize(long length)</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aac64c691f8dfcf5fc043f53dcaa974f1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IEnumerable&lt;long&gt; Deveel.Data.Store.StoreBase.FindAllocatedAreasNotIn </td>
          <td>(</td>
          <td class="paramtype">List&lt; long &gt;&#160;</td>
          <td class="paramname"><em>usedAreas</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">package</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00806">806</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                                                                                 {</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="comment">// Sort the list</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            var list = <span class="keyword">new</span> List&lt;long&gt;(usedAreas);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            list.Sort();</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            <span class="comment">// The list of leaked areas</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            var leakedAreas = <span class="keyword">new</span> List&lt;long&gt;();</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordtype">int</span> listIndex = 0;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            <span class="comment">// What area are we looking for?</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <span class="keywordtype">long</span> lookingFor = Int64.MaxValue;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">if</span> (listIndex &lt; list.Count) {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                lookingFor = list[listIndex];</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                ++listIndex;</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordtype">long</span>[] header = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            <span class="keywordtype">long</span> offset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            <span class="keywordflow">while</span> (offset &lt; endOfDataArea) {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(offset, header);</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                <span class="keywordtype">long</span> areaSize = (header[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                <span class="keywordtype">bool</span> areaFree = (header[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>) != 0;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                <span class="keywordflow">if</span> (offset == lookingFor) {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    <span class="keywordflow">if</span> (areaFree)</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area is not allocated!&quot;</span>);</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                    <span class="comment">// Update the &#39;looking_for&#39; offset</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                    <span class="keywordflow">if</span> (listIndex &lt; list.Count) {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                        lookingFor = (long)list[listIndex];</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                        ++listIndex;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                        lookingFor = Int64.MaxValue;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (offset &gt; lookingFor) {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;IArea (offset = &quot;</span> + lookingFor + <span class="stringliteral">&quot;) wasn&#39;t found input store!&quot;</span>);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    <span class="comment">// An area that isn&#39;t input the list</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                    <span class="keywordflow">if</span> (!areaFree) {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                        <span class="comment">// This is a leaked area.</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        <span class="comment">// It isn&#39;t free and it isn&#39;t input the list</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                        leakedAreas.Add(offset);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                    }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                }</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                offset += areaSize;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            }</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keywordflow">return</span> leakedAreas.ToArray();</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8ee1fd161c2d4c5330677649dfd6e40c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">Deveel.Data.Store.StoreBase.DeletedFlag</a></div><div class="ttdeci">const long DeletedFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00050">StoreBase.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a04413e690f21483564c32b996c2186d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.Free </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>pointer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00245">245</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                        {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="comment">// Get the area header</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(pointer, headerInfo);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">if</span> ((headerInfo[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>) != 0)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area already marked as unallocated.&quot;</span>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="comment">// If (pointer + size) reaches the end of the header area, set this as the</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">// wilderness.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordtype">bool</span> setAsWilderness = ((pointer + headerInfo[0]) &gt;= <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            var rOffset = pointer;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            var freeingAreaSize = headerInfo[0];</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            var rSize = freeingAreaSize;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="comment">// Can this area coalesce?</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            var leftPointer = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">GetPreviousAreaHeader</a>(pointer, headerInfo2);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            var coalesc = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">if</span> ((headerInfo2[0] &amp; DeletedFlag) != 0) {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="comment">// Yes, we can coalesce left</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordtype">long</span> areaSize = (headerInfo2[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                rOffset = leftPointer;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                rSize = rSize + areaSize;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="comment">// Remove left area from the bin</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">RemoveFromBinChain</a>(leftPointer, areaSize);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                coalesc = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">if</span> (!setAsWilderness) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordtype">long</span> rightPointer = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">GetNextAreaHeader</a>(pointer, headerInfo2);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                <span class="keywordflow">if</span> ((headerInfo2[0] &amp; DeletedFlag) != 0) {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="comment">// Yes, we can coalesce right</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    <span class="keywordtype">long</span> areaSize = (headerInfo2[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    rSize = rSize + areaSize;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <span class="comment">// Remove right from the bin</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">RemoveFromBinChain</a>(rightPointer, areaSize);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    setAsWilderness = (rightPointer == <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a>);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    coalesc = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="comment">// If we are coalescing parent areas</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span> (coalesc)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">CoalesceArea</a>(rOffset, rSize);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">// Add this new area to the bin chain,</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">AddToBinChain</a>(rOffset, rSize);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="comment">// Do we set this as the wilderness?</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (setAsWilderness)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = rOffset;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">totalAllocatedSpace</a> -= freeingAreaSize;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a0c1a6c21d6fdefb1b4d6e3fa41343f61"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0c1a6c21d6fdefb1b4d6e3fa41343f61">Deveel.Data.Store.StoreBase.totalAllocatedSpace</a></div><div class="ttdeci">long totalAllocatedSpace</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00027">StoreBase.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8ee1fd161c2d4c5330677649dfd6e40c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">Deveel.Data.Store.StoreBase.DeletedFlag</a></div><div class="ttdeci">const long DeletedFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00050">StoreBase.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a47ad56242f9c9de2fb0ecc7719c3c634"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">Deveel.Data.Store.StoreBase.WildernessOffset</a></div><div class="ttdeci">long WildernessOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00076">StoreBase.cs:76</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac8ee7e9d714cfb2a3db12e79e2e4e283"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac8ee7e9d714cfb2a3db12e79e2e4e283">Deveel.Data.Store.StoreBase.GetPreviousAreaHeader</a></div><div class="ttdeci">long GetPreviousAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00308">StoreBase.cs:308</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ae5894a234b11e2c39d74a18778867244"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ae5894a234b11e2c39d74a18778867244">Deveel.Data.Store.StoreBase.GetNextAreaHeader</a></div><div class="ttdeci">long GetNextAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00325">StoreBase.cs:325</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2596f3b96dccbbe1c4e9f3ff11b42f48"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2596f3b96dccbbe1c4e9f3ff11b42f48">Deveel.Data.Store.StoreBase.CoalesceArea</a></div><div class="ttdeci">void CoalesceArea(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00361">StoreBase.cs:361</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a5717180a15a0c07d035c320274705530"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a5717180a15a0c07d035c320274705530">Deveel.Data.Store.StoreBase.RemoveFromBinChain</a></div><div class="ttdeci">void RemoveFromBinChain(long offset, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00205">StoreBase.cs:205</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a00a3f2b0e6503ce1c5fd035535e4eb5b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a00a3f2b0e6503ce1c5fd035535e4eb5b">Deveel.Data.Store.StoreBase.AddToBinChain</a></div><div class="ttdeci">void AddToBinChain(long pointer, long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00125">StoreBase.cs:125</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac8726d586aad04152dcc075687180a2c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IEnumerable&lt;long&gt; Deveel.Data.Store.StoreBase.GetAllAreas </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a complete list of pointers to all areas in the <a class="el" href="namespaceDeveel_1_1Data_1_1Store.htm">Store</a> as long objects sorted from lowest pointer to highest. </p>
<p>This should be used for diagnostics only because it may be difficult for this to be generated with some implementations. It is useful in a repair tool to determine if a pointer is valid or not. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns an implementation of IList that contains all the pointers (as long) to the areas from the lowest to the highest. </dd></dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a721ce6b5ebd39ced0db818a32c75aa33">Deveel.Data.Store.IStore</a>.</p>

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00785">785</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                               {</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            var list = <span class="keyword">new</span> List&lt;long&gt;();</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <span class="keywordtype">long</span> endOfDataArea = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordtype">long</span>[] header = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <span class="comment">// The first header</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordtype">long</span> offset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="keywordflow">while</span> (offset &lt; endOfDataArea) {</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(offset, header);</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                <span class="keywordtype">long</span> areaSize = (header[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                <span class="keywordflow">if</span> ((header[0] &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>) == 0)</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    list.Add(offset);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                offset += areaSize;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8ee1fd161c2d4c5330677649dfd6e40c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">Deveel.Data.Store.StoreBase.DeletedFlag</a></div><div class="ttdeci">const long DeletedFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00050">StoreBase.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5a21756bcf0a4b2b8b1b68a3fdf2a0d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm">IArea</a> Deveel.Data.Store.StoreBase.GetArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>readOnly</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns an object that allows for the contents of an area (represented by the <em>id</em>  parameter) to be Read. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>The identifier of the area to Read, or -1 for a 64 byte fixed area in the store.</td></tr>
    <tr><td class="paramname">readOnly</td><td>Indicates if the returned area must be read-only.</td></tr>
  </table>
  </dd>
</dl>
<p>The behaviour of this method is undefined if the id doesn't represent a valid area. </p>
<p>When <em>id</em>  is -1 then a fixed area (64 bytes in size) in the store is returned. The fixed area can be used to store important static information. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns an <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IArea.htm" title="An interface for access the contents of an area of a store. ">IArea</a> object that allows access to the part of the store. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">IOException</td><td>If the id is invalid or the area can not otherwise be accessed. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a33d0523221bec574156f4060c442f972">Deveel.Data.Store.IStore</a>.</p>

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00768">768</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                                     {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="comment">// If this is the fixed area</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == -1)</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> StoreArea(<span class="keyword">this</span>, <span class="keywordtype">id</span>, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6862bc09a9dbabd7569e29c37342c3e2">FixedAreaOffset</a>, readOnly, 64);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="comment">// Otherwise must be a regular area</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> StoreArea(<span class="keyword">this</span>, <span class="keywordtype">id</span>, <span class="keywordtype">id</span>, readOnly);</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a6862bc09a9dbabd7569e29c37342c3e2"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6862bc09a9dbabd7569e29c37342c3e2">Deveel.Data.Store.StoreBase.FixedAreaOffset</a></div><div class="ttdeci">const long FixedAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00052">StoreBase.cs:52</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae5894a234b11e2c39d74a18778867244"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.GetNextAreaHeader </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long[]&#160;</td>
          <td class="paramname"><em>header</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00325">325</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                                   {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordtype">long</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            sz = sz &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordtype">long</span> nextOffset = offset + sz;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">if</span> (nextOffset &gt;= <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>) {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="comment">// Return a 0 sized block</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                header[0] = 0;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(nextOffset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">return</span> nextOffset;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac8ee7e9d714cfb2a3db12e79e2e4e283"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.GetPreviousAreaHeader </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long[]&#160;</td>
          <td class="paramname"><em>header</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00308">308</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                                       {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="comment">// If the offset is the start of the file area</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">if</span> (offset == <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>) {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <span class="comment">// Return a 0 sized block</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                header[0] = 0;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset - 8, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordtype">long</span> sz = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            sz = sz &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordtype">long</span> previousPointer = offset - sz;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(previousPointer, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">return</span> previousPointer;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac4c6c81971a96a2af0c6d026b2bf28d8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.Init </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00615">615</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                            {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a05c8be539420dce508effd29b22a3d17">SetDataAreaSize</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                <span class="keyword">using</span> (var stream = <span class="keyword">new</span> MemoryStream((<span class="keywordtype">int</span>) <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a>)) {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    <span class="keyword">using</span> (BinaryWriter writer = <span class="keyword">new</span> BinaryWriter(stream, Encoding.Unicode)) {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                        <span class="comment">// The file MAGIC</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                        writer.Write(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">Magic</a>); <span class="comment">// 0</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                        <span class="comment">// The file version</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        writer.Write(1); <span class="comment">// 4</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                        <span class="comment">// The number of areas (chunks) input the file (currently unused)</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                        writer.Write(-1L); <span class="comment">// 8</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                        <span class="comment">// File open/close status byte</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                        writer.Write((byte) 0); <span class="comment">// 16</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                        writer.Flush();</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                        byte[] buffer = <span class="keyword">new</span> byte[(int) <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>];</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                        byte[] temp = stream.ToArray();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                        <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.Copy(temp, 0, buffer, 0, temp.Length);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                        </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = (<span class="keywordtype">int</span>) <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a>; i &lt; (int) <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>; ++i) {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                            buffer[i] = 255;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                        }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(0, buffer, 0, buffer.Length);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    }</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac5f49853c19b25dd0b6d720f84e35c9a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">Deveel.Data.Store.StoreBase.BinAreaOffset</a></div><div class="ttdeci">const long BinAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00057">StoreBase.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a05c8be539420dce508effd29b22a3d17"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a05c8be539420dce508effd29b22a3d17">Deveel.Data.Store.StoreBase.SetDataAreaSize</a></div><div class="ttdeci">abstract void SetDataAreaSize(long length)</div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Deveel.Data.Types.SqlTypeCode.Array</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac99eb83c8853b2fccc653a5ec60f2fd7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">Deveel.Data.Store.StoreBase.Magic</a></div><div class="ttdeci">const int Magic</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00059">StoreBase.cs:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae7eaa03a2eb0a095e57e67e4e1a9473e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool Deveel.Data.Store.StoreBase.IsValidBoundarySize </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00609">609</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                                           {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">long</span> maxAreaSize = (long)Int32.MaxValue * 200;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            size = size &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            return ((size &lt; maxAreaSize) &amp;&amp; (size &gt;= 24) &amp;&amp; ((size &amp; 0x07) == 0));</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0371a4da25f016fb895e36e5984565f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.Lock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called before the start of a sequence of Write commands between consistant states of some data structure represented by the store. </p>
<p>This Lock mechanism is intended to inform the store when it is not safe to <a class="el" href="">checkpoint</a> the data in a log, ensuring that no partial updates are committed to a transaction log and the data can be restored in a consistant manner. </p>
<p>If the store does not implement a check point log or is otherwise not interested in consistant states of the data, then it is not necessary for this method to do anything. </p>
<p>This method prevents a check point from happening during some sequence of operations. This method should not Lock unless a check point is in progress. This method does not prevent concurrent writes to the store. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a20c87e2c5e61fd48b283a0bd7eaf4e18" title="This method is called after the end of a sequence of Write commands between consistant states of some...">Unlock</a></dd></dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#a39cd54dd685dc38c0413c8d17bd62578">Deveel.Data.Store.IStore</a>.</p>

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#a500cc6988e9e8963c28fbc7815f9132d">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="a993f2ad0ef93324bc5c1a20a6943568d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int Deveel.Data.Store.StoreBase.MinimumBinSizeIndex </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00089">89</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                          {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordtype">int</span> i = <a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Array</a>.BinarySearch(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">BinSizes</a>, (<span class="keywordtype">int</span>)size);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">if</span> (i &lt; 0) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                i = -(i + 1);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ad9a64d2f90187ee13f607c09b1f003b7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">Deveel.Data.Store.StoreBase.BinSizes</a></div><div class="ttdeci">static readonly int[] BinSizes</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00031">StoreBase.cs:31</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1a4410ec34d9e6c1a68100ca0ce033fb17">Deveel.Data.Types.SqlTypeCode.Array</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a79b93178e52ed198d47c8e763d8f95e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Deveel.Data.Store.StoreBase.Open </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00653">653</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                           {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            lock (<span class="keyword">this</span>) {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a926d63c6ac1c759c0d8ea22e112d7916">OpenStore</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">IsReadOnly</a>);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="comment">// If it&#39;s small, initialize to empty</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a> &lt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>)</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">Init</a>();</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                byte[] readBuf = <span class="keyword">new</span> byte[(int) <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a>];</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(0, readBuf, 0, readBuf.Length);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keyword">using</span> (var stream = <span class="keyword">new</span> MemoryStream(readBuf)) {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                    <span class="keyword">using</span> (var reader = <span class="keyword">new</span> BinaryReader(stream)) {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                        <span class="keywordtype">int</span> magic = reader.ReadInt32();</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                        <span class="keywordflow">if</span> (magic != <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">Magic</a>)</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: Magic value is not as expected.&quot;</span>);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                        <span class="keywordtype">int</span> version = reader.ReadInt32();</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        <span class="keywordflow">if</span> (version != 1)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: unrecognized version.&quot;</span>);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                        reader.ReadInt64(); <span class="comment">// ignore</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                        byte status = reader.ReadByte();</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">ClosedClean</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                        <span class="keywordflow">if</span> (status == 1) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                            <span class="comment">// This means the store wasn&#39;t closed cleanly.</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">ClosedClean</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                <span class="comment">// Read the bins</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">ReadBins</a>();</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="comment">// Mark the file as open</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">IsReadOnly</a>)</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(16, 1);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                <span class="keywordtype">long</span> fileLength = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">DataAreaEndOffset</a>;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                <span class="keywordflow">if</span> (fileLength &lt;= 8) {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Format invalid: File size is too small.&quot;</span>);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                <span class="comment">// Set the wilderness offset.</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keywordflow">if</span> (fileLength == <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>) {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = -1;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(fileLength - 8, readBuf, 0, 8);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordtype">long</span> lastBoundary = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(readBuf, 0);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                    <span class="keywordtype">long</span> lastAreaPointer = fileLength - lastBoundary;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="keywordflow">if</span> (lastAreaPointer &lt; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">DataAreaOffset</a>)</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;File corrupt: last area offset is before data part of file.&quot;</span>);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    <span class="keywordflow">if</span> (lastAreaPointer &gt; fileLength - 8)</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                        <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;File corrupt: last_area_pointer at the end of the file.&quot;</span>);</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(lastAreaPointer, readBuf, 0, 8);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                    <span class="keywordtype">long</span> lastAreaHeader = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(readBuf, 0);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                    <span class="comment">// If this is a freed block, then set this are the wilderness offset.</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                    <span class="keywordflow">if</span> ((lastAreaHeader &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">DeletedFlag</a>) != 0) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = lastAreaPointer;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">WildernessOffset</a> = -1;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                    }</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                }</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">ClosedClean</a>;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            }</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ab8c18d2cb4a8b71a4d83f6ce79943d43"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ab8c18d2cb4a8b71a4d83f6ce79943d43">Deveel.Data.Store.StoreBase.DataAreaEndOffset</a></div><div class="ttdeci">abstract long DataAreaEndOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00080">StoreBase.cs:80</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8ee1fd161c2d4c5330677649dfd6e40c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8ee1fd161c2d4c5330677649dfd6e40c">Deveel.Data.Store.StoreBase.DeletedFlag</a></div><div class="ttdeci">const long DeletedFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00050">StoreBase.cs:50</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_adc9bbd62a5f278719dc0145f263087d6"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#adc9bbd62a5f278719dc0145f263087d6">Deveel.Data.Store.StoreBase.ClosedClean</a></div><div class="ttdeci">bool ClosedClean</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00783">StoreBase.cs:783</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac5f49853c19b25dd0b6d720f84e35c9a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">Deveel.Data.Store.StoreBase.BinAreaOffset</a></div><div class="ttdeci">const long BinAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00057">StoreBase.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a926d63c6ac1c759c0d8ea22e112d7916"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a926d63c6ac1c759c0d8ea22e112d7916">Deveel.Data.Store.StoreBase.OpenStore</a></div><div class="ttdeci">abstract void OpenStore(bool readOnly)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_afc7e71cdd308489c801075f66e9b35d5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#afc7e71cdd308489c801075f66e9b35d5">Deveel.Data.Store.StoreBase.ReadBins</a></div><div class="ttdeci">void ReadBins()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00097">StoreBase.cs:97</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a47ad56242f9c9de2fb0ecc7719c3c634"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a47ad56242f9c9de2fb0ecc7719c3c634">Deveel.Data.Store.StoreBase.WildernessOffset</a></div><div class="ttdeci">long WildernessOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00076">StoreBase.cs:76</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abe7a397fba3a7a3073f66be13cb39aab"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abe7a397fba3a7a3073f66be13cb39aab">Deveel.Data.Store.StoreBase.DataAreaOffset</a></div><div class="ttdeci">const long DataAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00055">StoreBase.cs:55</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac4c6c81971a96a2af0c6d026b2bf28d8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac4c6c81971a96a2af0c6d026b2bf28d8">Deveel.Data.Store.StoreBase.Init</a></div><div class="ttdeci">void Init()</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00615">StoreBase.cs:615</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a2a69159c8174532acbf93e6193cfc0a3"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a2a69159c8174532acbf93e6193cfc0a3">Deveel.Data.Store.StoreBase.IsReadOnly</a></div><div class="ttdeci">bool IsReadOnly</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00078">StoreBase.cs:78</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac99eb83c8853b2fccc653a5ec60f2fd7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac99eb83c8853b2fccc653a5ec60f2fd7">Deveel.Data.Store.StoreBase.Magic</a></div><div class="ttdeci">const int Magic</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00059">StoreBase.cs:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a926d63c6ac1c759c0d8ea22e112d7916"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.OpenStore </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>readOnly</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#ae0e07ef7f2884ef71d65a5b0a0237319">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="a41466843f4855373cb32b299cbb733c9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract int Deveel.Data.Store.StoreBase.Read </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">byte[]&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#aa91a5cb5624189a13f1e93330422eabe">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="abd39ec7976495868479bad6765c2e418"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.ReadAreaHeader </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long[]&#160;</td>
          <td class="paramname"><em>header</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00342">342</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                                                  {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 16);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            header[0] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            header[1] = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afc7e71cdd308489c801075f66e9b35d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.ReadBins </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00097">97</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a>, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>, 0, 128 * 8);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">using</span> (var bin = <span class="keyword">new</span> MemoryStream(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>)) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keyword">using</span> (BinaryReader input = <span class="keyword">new</span> BinaryReader(bin)) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 128; ++i) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[i] = input.ReadInt64();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac5f49853c19b25dd0b6d720f84e35c9a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">Deveel.Data.Store.StoreBase.BinAreaOffset</a></div><div class="ttdeci">const long BinAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00057">StoreBase.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a6ed09793e31d5728a3194071fa7c4d39"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">Deveel.Data.Store.StoreBase.binArea</a></div><div class="ttdeci">readonly byte[] binArea</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00029">StoreBase.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a637f9ff7443b79d42673c3eb6fed612e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Deveel.Data.Store.StoreBase.ReadByte </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00865">865</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                                            {</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            var buffer = <span class="keyword">new</span> byte[1];</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            var count = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset, buffer, 0, 1);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            <span class="keywordflow">if</span> (count == 0)</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">return</span> buffer[0];</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a18e40aadbc7dd999b25276881790e19b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.ReboundArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long[]&#160;</td>
          <td class="paramname"><em>header</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writeHeaders</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00350">350</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                                                {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span> (writeHeaders) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[0], <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[1], <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 16);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(header[1], <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(offset + 8, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8, 8);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5717180a15a0c07d035c320274705530"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.RemoveFromBinChain </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00205">205</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                                                {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="comment">// What bin index should we be looking input?</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordtype">int</span> binChainIndex = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">MinimumBinSizeIndex</a>(size);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            var prevOffset = -1L;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            var curOffset = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[binChainIndex];</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="comment">// Search this bin for the offset</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="comment">// NOTE: This is an iterative search through the bin chain</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">while</span> (offset != curOffset) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">if</span> (curOffset == -1)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Area not found input bin chain.&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="comment">// Move to the next input the chain</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(curOffset, headerInfo);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                prevOffset = curOffset;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                curOffset = headerInfo[1];</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="comment">// Found the offset, so remove it,</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">if</span> (prevOffset == -1) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(offset, headerInfo);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[binChainIndex] = headerInfo[1];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">WriteBinIndex</a>(binChainIndex);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                var headerInfo = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                var headerInfo2 = <span class="keyword">new</span> <span class="keywordtype">long</span>[2];</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(prevOffset, headerInfo2);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">ReadAreaHeader</a>(offset, headerInfo);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                headerInfo2[1] = headerInfo[1];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">ReboundArea</a>(prevOffset, headerInfo2, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a993f2ad0ef93324bc5c1a20a6943568d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a993f2ad0ef93324bc5c1a20a6943568d">Deveel.Data.Store.StoreBase.MinimumBinSizeIndex</a></div><div class="ttdeci">static int MinimumBinSizeIndex(long size)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00089">StoreBase.cs:89</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a18e40aadbc7dd999b25276881790e19b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a18e40aadbc7dd999b25276881790e19b">Deveel.Data.Store.StoreBase.ReboundArea</a></div><div class="ttdeci">void ReboundArea(long offset, long[] header, bool writeHeaders)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00350">StoreBase.cs:350</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a8b3a11524f8d72be7c7faf0a91dc4361"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a8b3a11524f8d72be7c7faf0a91dc4361">Deveel.Data.Store.StoreBase.WriteBinIndex</a></div><div class="ttdeci">void WriteBinIndex(int index)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00118">StoreBase.cs:118</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_abd39ec7976495868479bad6765c2e418"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#abd39ec7976495868479bad6765c2e418">Deveel.Data.Store.StoreBase.ReadAreaHeader</a></div><div class="ttdeci">void ReadAreaHeader(long offset, long[] header)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00342">StoreBase.cs:342</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a05c8be539420dce508effd29b22a3d17"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.SetDataAreaSize </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>length</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#a74178c7a7bbfcd37b89255b6aaa56ebb">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="ac9400712dff6cb92771dd0ea77d2c9c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.SplitArea </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>newBoundary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00585">585</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                                                {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">// Split the area pointed to by the offset.</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Read</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="keywordtype">long</span> curSize = <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">ReadInt8</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0) &amp; <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">ActiveFlag</a>;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordtype">long</span> leftSize = newBoundary;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordtype">long</span> rightSize = curSize - newBoundary;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">if</span> (rightSize &lt; 0)</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IOException(<span class="stringliteral">&quot;Could not split the area.&quot;</span>);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(leftSize, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(rightSize, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="comment">// ISSUE: Boundary alteration is a moment when corruption could occur.</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="comment">//   There are three seeks and writes here and when we are setting the</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">//   end points, there is a risk of failure.</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="comment">// First set the boundary</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>((offset + newBoundary) - 8, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 16);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="comment">// Now set the end points</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(offset, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 0, 8);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>((offset + curSize) - 8, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">headerBuf</a>, 8, 8);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_acf969d7c3ab15eaf6b298c50e81cc5c8"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#acf969d7c3ab15eaf6b298c50e81cc5c8">Deveel.Data.Store.StoreBase.headerBuf</a></div><div class="ttdeci">readonly byte[] headerBuf</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00348">StoreBase.cs:348</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a41466843f4855373cb32b299cbb733c9"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a41466843f4855373cb32b299cbb733c9">Deveel.Data.Store.StoreBase.Read</a></div><div class="ttdeci">abstract int Read(long offset, byte[] buffer, int index, int length)</div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a254d312cf16a570c10ff607302972a3c"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a254d312cf16a570c10ff607302972a3c">Deveel.Data.Store.StoreBase.ActiveFlag</a></div><div class="ttdeci">const long ActiveFlag</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00049">StoreBase.cs:49</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_ad14d59e2c961bfbb3d7a857437fed53b"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#ad14d59e2c961bfbb3d7a857437fed53b">Deveel.Data.Util.ByteBuffer.ReadInt8</a></div><div class="ttdeci">static long ReadInt8(byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00234">ByteBuffer.cs:234</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a20c87e2c5e61fd48b283a0bd7eaf4e18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.Unlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called after the end of a sequence of Write commands between consistant states of some data structure represented by the store. </p>
<p>See the <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0371a4da25f016fb895e36e5984565f8" title="This method is called before the start of a sequence of Write commands between consistant states of s...">Lock</a> method for a further description of the operation of this locking mechanism. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a0371a4da25f016fb895e36e5984565f8" title="This method is called before the start of a sequence of Write commands between consistant states of s...">Lock</a></dd></dl>

<p>Implements <a class="el" href="interfaceDeveel_1_1Data_1_1Store_1_1IStore.htm#aa0d354c7087ca6a0a200a2423dd5f09c">Deveel.Data.Store.IStore</a>.</p>

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#a4d46463f7343703558547356a198b66e">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="a7b0194c00e5a16f2035968a26d3e7bb5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.Write </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">byte&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00876">876</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                                                      {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(offset, <span class="keyword">new</span> []{value}, 0, 1);</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abe6456aec5f79d5202c3086b27f9a9a3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract void Deveel.Data.Store.StoreBase.Write </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">byte[]&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classDeveel_1_1Data_1_1Store_1_1SingleFileStore.htm#ad3219037dddfaf83b34d030f842d76ed">Deveel.Data.Store.SingleFileStore</a>.</p>

</div>
</div>
<a class="anchor" id="aa9f8ad70cd7a824f84d6e0aa7271dd29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.WriteAllBins </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00108">108</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">int</span> p = 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 128; ++i, p += 8) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordtype">long</span> val = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[i];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(val, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>, p);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a>, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>, 0, 128 * 8);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac5f49853c19b25dd0b6d720f84e35c9a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">Deveel.Data.Store.StoreBase.BinAreaOffset</a></div><div class="ttdeci">const long BinAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00057">StoreBase.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a6ed09793e31d5728a3194071fa7c4d39"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">Deveel.Data.Store.StoreBase.binArea</a></div><div class="ttdeci">readonly byte[] binArea</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00029">StoreBase.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8b3a11524f8d72be7c7faf0a91dc4361"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Store.StoreBase.WriteBinIndex </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00118">118</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                              {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordtype">int</span> p = index * 8;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">long</span> val = <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">freeBinList</a>[index];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">ByteBuffer</a>.<a class="code" href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">WriteInt8</a>(val, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>, p);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Write</a>(<a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">BinAreaOffset</a> + p, <a class="code" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">binArea</a>, p, 8);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac5f49853c19b25dd0b6d720f84e35c9a"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac5f49853c19b25dd0b6d720f84e35c9a">Deveel.Data.Store.StoreBase.BinAreaOffset</a></div><div class="ttdeci">const long BinAreaOffset</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00057">StoreBase.cs:57</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a7b0194c00e5a16f2035968a26d3e7bb5"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a7b0194c00e5a16f2035968a26d3e7bb5">Deveel.Data.Store.StoreBase.Write</a></div><div class="ttdeci">void Write(long offset, byte value)</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00876">StoreBase.cs:876</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_a6ed09793e31d5728a3194071fa7c4d39"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#a6ed09793e31d5728a3194071fa7c4d39">Deveel.Data.Store.StoreBase.binArea</a></div><div class="ttdeci">readonly byte[] binArea</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00029">StoreBase.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm">Deveel.Data.Util.ByteBuffer</a></div><div class="ttdoc">A wrapper for an array of byte. </div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00027">ByteBuffer.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Store_1_1StoreBase_htm_ac06e4e7bc35cea51328a69339f791e29"><div class="ttname"><a href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ac06e4e7bc35cea51328a69339f791e29">Deveel.Data.Store.StoreBase.freeBinList</a></div><div class="ttdeci">long[] freeBinList</div><div class="ttdef"><b>Definition:</b> <a href="StoreBase_8cs_source.htm#l00026">StoreBase.cs:26</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Util_1_1ByteBuffer_htm_a4beda85eabb0aab7309186d8e2719589"><div class="ttname"><a href="classDeveel_1_1Data_1_1Util_1_1ByteBuffer.htm#a4beda85eabb0aab7309186d8e2719589">Deveel.Data.Util.ByteBuffer.WriteInt8</a></div><div class="ttdeci">static void WriteInt8(long value, byte[] arr, int offset)</div><div class="ttdef"><b>Definition:</b> <a href="ByteBuffer_8cs_source.htm#l00252">ByteBuffer.cs:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a254d312cf16a570c10ff607302972a3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const long Deveel.Data.Store.StoreBase.ActiveFlag = Int64.MaxValue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00049">49</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a6ed09793e31d5728a3194071fa7c4d39"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly byte [] Deveel.Data.Store.StoreBase.binArea = new byte[128 * 8]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00029">29</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ac5f49853c19b25dd0b6d720f84e35c9a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const long Deveel.Data.Store.StoreBase.BinAreaOffset = 256</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00057">57</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="aa53570b7c20e1bbb25c370b014e95836"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly int Deveel.Data.Store.StoreBase.BinSizeEntries = BinSizes.Length</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00046">46</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ad9a64d2f90187ee13f607c09b1f003b7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly int [] Deveel.Data.Store.StoreBase.BinSizes</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">            {</div>
<div class="line">                32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480,</div>
<div class="line">                512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928,</div>
<div class="line">                960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312,</div>
<div class="line">                1344, 1376, 1408, 1440, 1472, 1504, 1536, 1568, 1600, 1632, 1664, 1696,</div>
<div class="line">                1728, 1760, 1792, 1824, 1856, 1888, 1920, 1952, 1984, 2016, 2048, 2080,</div>
<div class="line">                2144, 2208, 2272, 2336, 2400, 2464, 2528, 2592, 2656, 2720, 2784, 2848,</div>
<div class="line">                2912, 2976, 3040, 3104, 3168, 3232, 3296, 3360, 3424, 3488, 3552, 3616,</div>
<div class="line">                3680, 3744, 3808, 3872, 3936, 4000, 4064, 4128, 4384, 4640, 4896, 5152,</div>
<div class="line">                5408, 5664, 5920, 6176, 6432, 6688, 6944, 7200, 7456, 7712, 7968, 8224,</div>
<div class="line">                10272, 12320, 14368, 16416, 18464, 20512, 22560, 24608, 57376, 90144,</div>
<div class="line">                122912, 155680, 1204256, 2252832</div>
<div class="line">            }</div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00031">31</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="abe7a397fba3a7a3073f66be13cb39aab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const long Deveel.Data.Store.StoreBase.DataAreaOffset = 256 + 1024 + 32</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00055">55</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a8ee1fd161c2d4c5330677649dfd6e40c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const long Deveel.Data.Store.StoreBase.DeletedFlag = Int64.MinValue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00050">50</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a2b91b28cb645082130a46c8f5c7d1a48"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Deveel.Data.Store.StoreBase.disposed</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00743">743</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a6862bc09a9dbabd7569e29c37342c3e2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const long Deveel.Data.Store.StoreBase.FixedAreaOffset = 128</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00052">52</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ac06e4e7bc35cea51328a69339f791e29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long [] Deveel.Data.Store.StoreBase.freeBinList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00026">26</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="acf969d7c3ab15eaf6b298c50e81cc5c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly byte [] Deveel.Data.Store.StoreBase.headerBuf = new byte[16]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00348">348</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ac99eb83c8853b2fccc653a5ec60f2fd7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int Deveel.Data.Store.StoreBase.Magic = 0x0AEAE91</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00059">59</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a0cfcf79aae1989da82d41104fbe878d1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly int Deveel.Data.Store.StoreBase.MaxBinSize = <a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#ad9a64d2f90187ee13f607c09b1f003b7">BinSizes</a>[<a class="el" href="classDeveel_1_1Data_1_1Store_1_1StoreBase.htm#aa53570b7c20e1bbb25c370b014e95836">BinSizeEntries</a> - 1]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00047">47</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a0c1a6c21d6fdefb1b4d6e3fa41343f61"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.totalAllocatedSpace</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00027">27</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<h2 class="groupheader">Property Documentation</h2>
<a class="anchor" id="adc9bbd62a5f278719dc0145f263087d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Deveel.Data.Store.StoreBase.ClosedClean</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00783">783</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="ab8c18d2cb4a8b71a4d83f6ce79943d43"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">abstract long Deveel.Data.Store.StoreBase.DataAreaEndOffset</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00080">80</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a2a69159c8174532acbf93e6193cfc0a3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Deveel.Data.Store.StoreBase.IsReadOnly</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00078">78</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<a class="anchor" id="a47ad56242f9c9de2fb0ecc7719c3c634"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long Deveel.Data.Store.StoreBase.WildernessOffset</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="StoreBase_8cs_source.htm#l00076">76</a> of file <a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb/Deveel.Data.Store/<a class="el" href="StoreBase_8cs_source.htm">StoreBase.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
