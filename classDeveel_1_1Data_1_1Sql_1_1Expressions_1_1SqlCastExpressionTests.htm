<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>DeveelDB: Deveel.Data.Sql.Expressions.SqlCastExpressionTests Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="deveeldb_logo2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">DeveelDB
   &#160;<span id="projectnumber">20151217</span>
   </div>
   <div id="projectbrief">complete SQL database system, primarly developed for .NET/Mono frameworks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceDeveel.htm">Deveel</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data.htm">Data</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql.htm">Sql</a></li><li class="navelem"><a class="el" href="namespaceDeveel_1_1Data_1_1Sql_1_1Expressions.htm">Expressions</a></li><li class="navelem"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm">SqlCastExpressionTests</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Deveel.Data.Sql.Expressions.SqlCastExpressionTests Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a52fa4fe85f392d324727691990980e9f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a52fa4fe85f392d324727691990980e9f">CastStringToInteger</a> ()</td></tr>
<tr class="separator:a52fa4fe85f392d324727691990980e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f0074227ae621dbd4de5021435052c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a3f0074227ae621dbd4de5021435052c9">CastStringToNumber</a> ()</td></tr>
<tr class="separator:a3f0074227ae621dbd4de5021435052c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a95a51bbe1e72c2f25731e6975c1f2f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a7a95a51bbe1e72c2f25731e6975c1f2f">CastStringToDateTime</a> ()</td></tr>
<tr class="separator:a7a95a51bbe1e72c2f25731e6975c1f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a472227eb3723506d04accc7b74c163f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a472227eb3723506d04accc7b74c163f8">CastStringToDate</a> ()</td></tr>
<tr class="separator:a472227eb3723506d04accc7b74c163f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbcb18bb4640d3c3003a00ce6a232e5d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#acbcb18bb4640d3c3003a00ce6a232e5d">CastStringToTime</a> ()</td></tr>
<tr class="separator:acbcb18bb4640d3c3003a00ce6a232e5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57419643046636832bf1caa5ea0810d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a57419643046636832bf1caa5ea0810d2">CastStringToBooleanTrue</a> ()</td></tr>
<tr class="separator:a57419643046636832bf1caa5ea0810d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a712dd27dda62f367070b6f4db3ecbc99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a712dd27dda62f367070b6f4db3ecbc99">CastStringToBooleanFalse</a> ()</td></tr>
<tr class="separator:a712dd27dda62f367070b6f4db3ecbc99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a113d63bcab87d798b887b19cb09a16"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a9a113d63bcab87d798b887b19cb09a16">CastBooleanFalseToString</a> ()</td></tr>
<tr class="separator:a9a113d63bcab87d798b887b19cb09a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2672a101ecbf6c125f03367e020abea4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#a2672a101ecbf6c125f03367e020abea4">CastBooleanTrueToString</a> ()</td></tr>
<tr class="separator:a2672a101ecbf6c125f03367e020abea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20150c19eacc622f3295ab6f9a957a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#af20150c19eacc622f3295ab6f9a957a7">CastDateToString</a> ()</td></tr>
<tr class="separator:af20150c19eacc622f3295ab6f9a957a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab31156c5ec2e7098db6d380992a935c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDeveel_1_1Data_1_1Sql_1_1Expressions_1_1SqlCastExpressionTests.htm#ab31156c5ec2e7098db6d380992a935c6">CastNumberToString</a> ()</td></tr>
<tr class="separator:ab31156c5ec2e7098db6d380992a935c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00024">24</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9a113d63bcab87d798b887b19cb09a16"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastBooleanFalseToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00145">145</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                               {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.Boolean(<span class="keyword">false</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">String</a>());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.String, value.Type.TypeCode);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(<span class="stringliteral">&quot;False&quot;</span>), value.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Value</a>);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString_htm_a5eb2132eae8da5700709b5ed92ce6d7f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Deveel.Data.Sql.Objects.SqlString.Value</a></div><div class="ttdeci">string Value</div><div class="ttdef"><b>Definition:</b> <a href="SqlString_8cs_source.htm#l00126">SqlString.cs:126</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a3c8806064ed05c26c44a8e105e40d153"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">Deveel.Data.Types.PrimitiveTypes.String</a></div><div class="ttdeci">static StringType String()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00042">PrimitiveTypes.cs:42</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2672a101ecbf6c125f03367e020abea4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastBooleanTrueToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00161">161</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                              {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.Boolean(<span class="keyword">true</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">String</a>());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.String, value.Type.TypeCode);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(<span class="stringliteral">&quot;True&quot;</span>), value.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Value</a>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString_htm_a5eb2132eae8da5700709b5ed92ce6d7f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Deveel.Data.Sql.Objects.SqlString.Value</a></div><div class="ttdeci">string Value</div><div class="ttdef"><b>Definition:</b> <a href="SqlString_8cs_source.htm#l00126">SqlString.cs:126</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a3c8806064ed05c26c44a8e105e40d153"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">Deveel.Data.Types.PrimitiveTypes.String</a></div><div class="ttdeci">static StringType String()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00042">PrimitiveTypes.cs:42</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af20150c19eacc622f3295ab6f9a957a7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastDateToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00177">177</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                       {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            var date = DataObject.Date(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">SqlDateTime</a>(2015, 02, 03));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(date), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">String</a>());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">StringType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.String, value.Type.TypeCode);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a>(<span class="stringliteral">&quot;2015-02-03&quot;</span>), value.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Value</a>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1StringType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1StringType.htm">Deveel.Data.Types.StringType</a></div><div class="ttdef"><b>Definition:</b> <a href="StringType_8cs_source.htm#l00029">StringType.cs:29</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString_htm_a5eb2132eae8da5700709b5ed92ce6d7f"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlString.htm#a5eb2132eae8da5700709b5ed92ce6d7f">Deveel.Data.Sql.Objects.SqlString.Value</a></div><div class="ttdeci">string Value</div><div class="ttdef"><b>Definition:</b> <a href="SqlString_8cs_source.htm#l00126">SqlString.cs:126</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">Deveel.Data.Sql.Objects.SqlDateTime</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlDateTime_8cs_source.htm#l00021">SqlDateTime.cs:21</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a3c8806064ed05c26c44a8e105e40d153"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a3c8806064ed05c26c44a8e105e40d153">Deveel.Data.Types.PrimitiveTypes.String</a></div><div class="ttdeci">static StringType String()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00042">PrimitiveTypes.cs:42</a></div></div>
<div class="ttc" id="DataObject_8cs_htm_a21ed9a08a27604b86732487a5a2afcb6"><div class="ttname"><a href="DataObject_8cs.htm#a21ed9a08a27604b86732487a5a2afcb6">SqlString</a></div><div class="ttdeci">Deveel.Data.Sql.Objects.SqlString SqlString</div><div class="ttdef"><b>Definition:</b> <a href="DataObject_8cs_source.htm#l00027">DataObject.cs:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab31156c5ec2e7098db6d380992a935c6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastNumberToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00194">194</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                         {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            Assert.Inconclusive();</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a712dd27dda62f367070b6f4db3ecbc99"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToBooleanFalse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00129">129</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                               {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;false&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#aeff714f46e3b8cb829d7323742ddad0e">Boolean</a>());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Boolean, value.Type.TypeCode);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>.False, value.Value);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_aeff714f46e3b8cb829d7323742ddad0e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#aeff714f46e3b8cb829d7323742ddad0e">Deveel.Data.Types.PrimitiveTypes.Boolean</a></div><div class="ttdeci">static BooleanType Boolean()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00030">PrimitiveTypes.cs:30</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a57419643046636832bf1caa5ea0810d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToBooleanTrue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00113">113</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                              {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;true&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#aeff714f46e3b8cb829d7323742ddad0e">Boolean</a>());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">BooleanType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Boolean, value.Type.TypeCode);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceSqlBoolean.htm">SqlBoolean</a>.True, value.Value);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="namespaceSqlBoolean_htm"><div class="ttname"><a href="namespaceSqlBoolean.htm">SqlBoolean</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_aeff714f46e3b8cb829d7323742ddad0e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#aeff714f46e3b8cb829d7323742ddad0e">Deveel.Data.Types.PrimitiveTypes.Boolean</a></div><div class="ttdeci">static BooleanType Boolean()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00030">PrimitiveTypes.cs:30</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1BooleanType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1BooleanType.htm">Deveel.Data.Types.BooleanType</a></div><div class="ttdef"><b>Definition:</b> <a href="BooleanType_8cs_source.htm#l00026">BooleanType.cs:26</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a472227eb3723506d04accc7b74c163f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToDate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00074">74</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                       {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;2015-09-01&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a6eeb9e84ed429a85fc68f8acd134176e">Date</a>());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">DateType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Date, value.Type.TypeCode);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">SqlDateTime</a>(2015, 09, 01), value.Value);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a6eeb9e84ed429a85fc68f8acd134176e"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a6eeb9e84ed429a85fc68f8acd134176e">Deveel.Data.Types.PrimitiveTypes.Date</a></div><div class="ttdeci">static DateType Date()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00142">PrimitiveTypes.cs:142</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">Deveel.Data.Sql.Objects.SqlDateTime</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlDateTime_8cs_source.htm#l00021">SqlDateTime.cs:21</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1DateType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">Deveel.Data.Types.DateType</a></div><div class="ttdef"><b>Definition:</b> <a href="DateType_8cs_source.htm#l00023">DateType.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7a95a51bbe1e72c2f25731e6975c1f2f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToDateTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00058">58</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                           {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;2015-09-01&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#ad8d1845131dedfabe4428de8d2f2195d">DateTime</a>());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">DateType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.DateTime, value.Type.TypeCode);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">SqlDateTime</a>(2015, 09, 01), value.Value);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_ad8d1845131dedfabe4428de8d2f2195d"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#ad8d1845131dedfabe4428de8d2f2195d">Deveel.Data.Types.PrimitiveTypes.DateTime</a></div><div class="ttdeci">static DateType DateTime()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00134">PrimitiveTypes.cs:134</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">Deveel.Data.Sql.Objects.SqlDateTime</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlDateTime_8cs_source.htm#l00021">SqlDateTime.cs:21</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1DateType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">Deveel.Data.Types.DateType</a></div><div class="ttdef"><b>Definition:</b> <a href="DateType_8cs_source.htm#l00023">DateType.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a52fa4fe85f392d324727691990980e9f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToInteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00026">26</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                          {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;1234&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#ac8b617fad2e0232d24499a6827c883dd">Integer</a>());</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            var value = ((SqlConstantExpression) casted).Value;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Integer, value.Type.TypeCode);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            Assert.AreEqual(<span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>(1234), value.Value);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_ac8b617fad2e0232d24499a6827c883dd"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#ac8b617fad2e0232d24499a6827c883dd">Deveel.Data.Types.PrimitiveTypes.Integer</a></div><div class="ttdeci">static NumericType Integer()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00110">PrimitiveTypes.cs:110</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3f0074227ae621dbd4de5021435052c9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToNumber </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00042">42</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                         {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;12.3e4&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a84c99b654fd0aba51a17e6a2ef1533a7">Numeric</a>());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">NumericType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Numeric, value.Type.TypeCode);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            Assert.AreEqual(<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">SqlNumber</a>.<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a43621f511c074e0e5f7f6ebf25544e77">Parse</a>(<span class="stringliteral">&quot;12.3e4&quot;</span>), value.Value);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1NumericType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1NumericType.htm">Deveel.Data.Types.NumericType</a></div><div class="ttdef"><b>Definition:</b> <a href="NumericType_8cs_source.htm#l00027">NumericType.cs:27</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a84c99b654fd0aba51a17e6a2ef1533a7"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a84c99b654fd0aba51a17e6a2ef1533a7">Deveel.Data.Types.PrimitiveTypes.Numeric</a></div><div class="ttdeci">static NumericType Numeric()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00078">PrimitiveTypes.cs:78</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm_a43621f511c074e0e5f7f6ebf25544e77"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm#a43621f511c074e0e5f7f6ebf25544e77">Deveel.Data.Sql.Objects.SqlNumber.Parse</a></div><div class="ttdeci">static SqlNumber Parse(string s)</div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00738">SqlNumber.cs:738</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlNumber.htm">Deveel.Data.Sql.Objects.SqlNumber</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlNumber_8cs_source.htm#l00024">SqlNumber.cs:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acbcb18bb4640d3c3003a00ce6a232e5d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Deveel.Data.Sql.Expressions.SqlCastExpressionTests.CastStringToTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="SqlCastExpressionTests_8cs_source.htm#l00090">90</a> of file <a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                       {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            var exp = SqlExpression.Cast(SqlExpression.Constant(DataObject.String(<span class="stringliteral">&quot;22:13:01&quot;</span>)), <a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">PrimitiveTypes</a>.<a class="code" href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a07829fdb887a1c1eebd643c50a5182a4">Time</a>());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            SqlExpression casted = null;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            Assert.DoesNotThrow(() =&gt; casted = exp.Evaluate());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            Assert.IsNotNull(casted);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            Assert.IsInstanceOf&lt;SqlConstantExpression&gt;(casted);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            var value = ((SqlConstantExpression)casted).Value;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            Assert.IsNotNull(value.Value);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            Assert.IsInstanceOf&lt;<a class="code" href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">DateType</a>&gt;(value.Type);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            Assert.AreEqual(<a class="code" href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">SqlTypeCode</a>.Time, value.Type.TypeCode);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// we round the expected value to the result offset because of the UTC parsing logic</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="comment">// of the date type: all we care here is the time component</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            var result = ((<a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">SqlDateTime</a>)value.Value);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            var expected = <span class="keyword">new</span> <a class="code" href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">SqlDateTime</a>(1, 1, 1, 22, 13, 01, 0, result.Offset);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            Assert.AreEqual(expected, result);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm">Deveel.Data.Types.PrimitiveTypes</a></div><div class="ttdoc">Provides some helper functions for resolving and creating SqlType instances that are primitive to the...</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00029">PrimitiveTypes.cs:29</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes_htm_a07829fdb887a1c1eebd643c50a5182a4"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1PrimitiveTypes.htm#a07829fdb887a1c1eebd643c50a5182a4">Deveel.Data.Types.PrimitiveTypes.Time</a></div><div class="ttdeci">static DateType Time()</div><div class="ttdef"><b>Definition:</b> <a href="PrimitiveTypes_8cs_source.htm#l00150">PrimitiveTypes.cs:150</a></div></div>
<div class="ttc" id="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime_htm"><div class="ttname"><a href="structDeveel_1_1Data_1_1Sql_1_1Objects_1_1SqlDateTime.htm">Deveel.Data.Sql.Objects.SqlDateTime</a></div><div class="ttdef"><b>Definition:</b> <a href="SqlDateTime_8cs_source.htm#l00021">SqlDateTime.cs:21</a></div></div>
<div class="ttc" id="namespaceDeveel_1_1Data_1_1Types_htm_a530b117fabbb831a5ebbc66579e154b1"><div class="ttname"><a href="namespaceDeveel_1_1Data_1_1Types.htm#a530b117fabbb831a5ebbc66579e154b1">Deveel.Data.Types.SqlTypeCode</a></div><div class="ttdeci">SqlTypeCode</div><div class="ttdoc">Enumerates the codes of all SQL types handled by the system. </div><div class="ttdef"><b>Definition:</b> <a href="SqlTypeCode_8cs_source.htm#l00023">SqlTypeCode.cs:23</a></div></div>
<div class="ttc" id="classDeveel_1_1Data_1_1Types_1_1DateType_htm"><div class="ttname"><a href="classDeveel_1_1Data_1_1Types_1_1DateType.htm">Deveel.Data.Types.DateType</a></div><div class="ttdef"><b>Definition:</b> <a href="DateType_8cs_source.htm#l00023">DateType.cs:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/var/calculate/remote/distfiles/egit-src/deveeldb.git/src/deveeldb-nunit/Deveel.Data.Sql.Expressions/<a class="el" href="SqlCastExpressionTests_8cs_source.htm">SqlCastExpressionTests.cs</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
